[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"course programming experiments, Stroop task, apparatus, eye tracker. programming language Python almost -mighty still easy learn. Learning develop interactive programs Pygame easiest way start, rewarding covers basics. break complexity, course teaches structured development process, can safely carry boldest ideas working prototype. parallel track, course also introduces basics Data Science even wet feed Computer Vision, branch Machine Learning.","code":""},{"path":"intro.html","id":"intro","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"intro.html","id":"installing-a-python-environment","chapter":"1 Introduction","heading":"1.1 Installing a Python environment","text":"course teaches programming language Python. order write Python programs, need set general tools, referred Python environment:Python editor, write codea Python interpreter, runs codePython libraries, provide specialized functionality task handThe Anaconda Python system puts editor, interpreter huge set libraries computer. just one library install separately. Pygame library provides specialized functionality developing arcade games (Ping Pong, Super Mario, etc.), almost perfect writing programs psychological experiments.","code":""},{"path":"intro.html","id":"installing-the-anaconda-python-environment","chapter":"1 Introduction","heading":"1.2 Installing the Anaconda Python environment","text":"","code":""},{"path":"intro.html","id":"windows","chapter":"1 Introduction","heading":"1.2.1 Windows","text":"https://www.anaconda.com/download/ download 64-bit installer Python 3.xFrom https://www.anaconda.com/download/ download 64-bit installer Python 3.xRun downloaded file \nInstall “just ”\nAccept proposed destination folder\nAccept default advanced options\nRun downloaded file andInstall “just ”Accept proposed destination folderAccept default advanced optionsIn start menu find program Anaconda PromptIn start menu find program Anaconda PromptIn console, type: pip install pygame hit Return. Confirm anything y.console, type: pip install pygame hit Return. Confirm anything y.","code":""},{"path":"intro.html","id":"macos","chapter":"1 Introduction","heading":"1.2.2 MacOS","text":"Follow analog procedure Windows. Unfortunately, authors use Windows computers, untested.","code":""},{"path":"intro.html","id":"testing-your-environment","chapter":"1 Introduction","heading":"1.3 Testing your environment","text":"testing Anaconda environment, follow steps:Start menu start Anaconda NavigatorFrom Home screen launch SpyderDownload Python file PIP_Stroop_interaction.py folder Week 1 Google Drive https://goo.gl/UmBsilOpen file Spyder (File –> Open).Run program clicking green play button. see window popping , greets Stroop experiment.finally, dear tradition greet world first program. Create new file Spyder copy-paste following lines . hit play button .","code":"print('Hello world!')## Hello world!"},{"path":"intro.html","id":"dumb_computers","chapter":"1 Introduction","heading":"1.4 Computers are dumb","text":"Programming process giving instructions computer. problem … computers incredibly dumb. order get used instructing dumb computers, following exercise become computer . just computer, first program , complying debilitating set communication rules.task create theater play resembles computer execute program Psychology researchers used thousand times labs. Stroop task, participants shown word written screen one three ink colors (red, blue, green). asked name ink color quick possible, usually pressing one four assigned keys (e.g., Y = red, X = blue, N = green). task twist: presented words color words. can happen word “RED” appears red ink, call congruent condition, can also happen word “BLUE” appears green letters, incongruent. Hundreds experiments shown, incongruent condition people respond noticably slower. observation called Stroop effect dozens theories spawned observation. Discussing beyond scope, let completely dissatisfied: people seem always read words, although asked can conclude:people readpeople (always) listen experimenter wants themThe following exercise meant theater play thus works best team around 7-8 students. However, nothing keeps just drama poet put script .rules theater play:every actor (except looper, see ) can perform one simple actionevery actor (except looper, see ) can perform one simple actionactors can talk looper, otheractors can talk looper, otherevery actor can\neither something command\nanswer question\nevery actor caneither something commandor answer questionactors take commands\nunderstand one command, like “pick color”\ncan one thing, like\npicking object\nshowing object\nmaking particular change object\n\naddition can give receive objects looper\nactors take commandsonly understand one command, like “pick color”understand one command, like “pick color”can one thing, like\npicking object\nshowing object\nmaking particular change object\ncan one thing, likepicking objectshowing objectmaking particular change objectin addition can give receive objects looperin addition can give receive objects looperactors answer questions\nunderstand one question type, example: “time now?”\ncan give one-word answer, example:\nword predefined set words\nnumber\nyes (special case pedefined set)\nactors answer questionsonly understand one question type, example: “time now?”can give one-word answer, example:word predefined set wordsa numberyes (special case pedefined set)looper special actor \none can interact actors (speak, listen, exchange objects) knows possible questions, answers actions actors can perform.\nslightly intelligent actors /can make decisions combining information various sources.\ncan simple calculations (like subtracting number) comparisons (like comparing two colors).\nunfortunately senses, relies completely actors tell\nspeaks continuous monologue audience, explaining actions audience.\nlooper special actor whois one can interact actors (speak, listen, exchange objects) knows possible questions, answers actions actors can perform.slightly intelligent actors /can make decisions combining information various sources.can simple calculations (like subtracting number) comparisons (like comparing two colors).unfortunately senses, relies completely actors tellspeaks continuous monologue audience, explaining actions audience.drawer special actor whose task present output user.drawer special actor whose task present output user.event handler special actor whose task take input userthe event handler special actor whose task take input userthe user special actor interacts drawer event handler.user special actor interacts drawer event handler.play need following requisites:instructionsthree color word stencilsthree ink colors (put behind stencil)bar three buttons drawn papera clockpaper pencilIt recommended one team assigned role debugger. person take active role, watches compliance set rules.fun let intuition come task!","code":""},{"path":"intro.html","id":"dive-in-a-first-example","chapter":"1 Introduction","heading":"1.5 Dive in: a first example","text":"section 1.2 Computers dumb, seen debilitating can program computer simplest things. Talking computer (programmer) requires understand fundamental ways computers work learn language. good way get started learning language just go expose native speakers. Let’s ! following text program performs Stroop task, just theater play.first sight, ’ll probably see just gargle-bargle. closer examination, may see one thing recognize. start visible feature Stroop task, colors. watch color words code, ’ll find following:first paragraph defines color used throughout program three numbers. computer screens produce colors mixture red, blue green, coincidentily matches three types color vision sensors eyes. example, black just means lights , hence three zeroes. Red means red channel firing photons.Whenever see single = character, means given right stored variable left. second paragraph just collects three colors one compound variable, later learn dictionary. Search COLOR following code see, used:code block called function definition. function almost exactly represents one actors play: receiving color word color, combine one Stroop trial show user. can follow function used, searching “draw_stimulus” code:see -called conditional. simple program just sequence procedures. “real” programs, especially interactive programs, certain things certain conditions satisfied. condition current state program present trial. look around immediatly see variable STATE used place happens always occur one two patterns code:condition (STATE == ...)assignment new values (STATE = ...)Note difference =, stores new value variable == means equals. Let’s discover variable STATE actually gets value: \"present_trial\":Literally, reads : “state ‘feedback’ (participant shown results previous trial), space key pressed, yet reached maximum number trials, present next trial (otherwise say good bye)”precisely rules Looper play mind. look closely, find similar constructions, change state certain conditions. statements later call interaction conditionals, control flow program. complicated rest.final endeavor, try find clues measurement response time handled program. search “time”, first occurrence right top:Just programmers can define functions, can also make use functions programmers already providing. Usually, larger packages related functions, called libraries. line code means: library time, make available function time. function used?thing happens , moment trial presented, current absolute time recorded variable time_when_presented. used ?user responds pressing button, moment time recorded another variable time_when_reacted current reaction time computed time difference reaction presentation.","code":"import pygame\nimport sys\nfrom time import time\nimport random\nfrom pygame.locals import *\nfrom pygame.compat import unichr_, unicode_\n\n##### CONFIG #####\n\n# Colors abd screen\ncol_white = (250, 250, 250)\ncol_black = (0, 0, 0)\ncol_gray = (220, 220, 220)\ncol_red = (250, 0, 0)\ncol_green = (0, 200, 0)\ncol_blue = (0, 0, 250)\ncol_yellow = (250,250,0)\n\nBACKGR_COL = col_gray\nSCREEN_SIZE = (700, 500)\n\n\n# Experiment\n\nn_trials = 5\n\nWORDS    = (\"red\", \"green\", \"blue\")\n\nCOLORS   = {\"red\": col_red,\n            \"green\": col_green,\n            \"blue\": col_blue}\n\nKEYS     = {\"red\": K_b,\n            \"green\": K_n,\n            \"blue\": K_m}\n\n\n\n### PYGAME STARTUP ###\n\npygame.init()\npygame.display.set_mode(SCREEN_SIZE) \npygame.display.set_caption(\"Stroop Test\")\n\nscreen = pygame.display.get_surface()\n# screen.fill(BACKGR_COL)\n\nfont = pygame.font.Font(None, 80)\nfont_small = pygame.font.Font(None, 40) \n\n\n### MAIN PROGRAM ###\n\ndef main():\n    \n    STATE = \"welcome\"    \n    trial_number = 0    \n    \n    while True:\n        \n        # refreshing the surface\n        screen.fill(BACKGR_COL)\n\n        # Event loop\n        for event in pygame.event.get():\n            \n            # interactive transitionals                     \n            if STATE == \"welcome\":\n                if event.type == KEYDOWN and event.key == K_SPACE:\n                    STATE = \"prepare_trial\"\n                    print(STATE)\n                    continue\n                    \n            if STATE == \"trial\":\n                if event.type == KEYDOWN and event.key in KEYS.values():\n                    time_when_reacted = time()\n                    this_reaction_time = time_when_reacted - time_when_presented\n                    this_correctness = (event.key == KEYS[this_color])\n                    STATE = \"feedback\"\n                    print(STATE)\n                    continue\n    \n            if STATE == \"feedback\":\n                if event.type == KEYDOWN and event.key == K_SPACE:\n                    if trial_number < n_trials:\n                        STATE = \"prepare_trial\"\n                    else:\n                        STATE = \"goodbye\"\n                    print(STATE)\n                    continue\n                    \n            \n            if event.type == QUIT:\n                STATE = \"quit\"\n                print(STATE)\n                break\n\n        \n        # automatic transitionals\n        if STATE == \"prepare_trial\":\n                trial_number = trial_number + 1\n                this_word  = pick_color()\n                this_color = pick_color()\n                time_when_presented = time()\n                STATE = \"show_trial\"\n                print(STATE)    \n\n        \n        \n        # Presentitionals\n        if STATE == \"welcome\":\n            draw_welcome()\n            draw_button(SCREEN_SIZE[0]*1/5, 450, \"Red: B\", col_red)\n            draw_button(SCREEN_SIZE[0]*3/5, 450, \"Green: N\", col_green)\n            draw_button(SCREEN_SIZE[0]*4/5, 450, \"Blue: M\", col_blue)\n        \n        if STATE == \"trial\":\n            draw_stimulus(this_color, this_word)\n            draw_button(SCREEN_SIZE[0]*1/5, 450, \"Red: B\", col_red)\n            draw_button(SCREEN_SIZE[0]*3/5, 450, \"Green: N\", col_green)\n            draw_button(SCREEN_SIZE[0]*4/5, 450, \"Blue: M\", col_blue)\n        \n        if STATE == \"feedback\":\n            draw_feedback(this_correctness, this_reaction_time)\n        \n        if STATE == \"goodbye\":\n            draw_goodbye()\n        \n        if STATE == \"quit\":\n            pygame.quit()\n            sys.exit()\n        \n        # Updating the display\n        pygame.display.update()\n        \n\n# Function definitions\n        \ndef pick_color():\n    \"\"\" Return a random word.\n    \"\"\"\n    random_number = random.randint(0,2)\n    return WORDS[random_number]\n\ndef draw_button(xpos, ypos, label, color):\n    text = font_small.render(label, True, color, BACKGR_COL)\n    text_rectangle = text.get_rect()\n    text_rectangle.center = (xpos, ypos)\n    screen.blit(text, text_rectangle)\n\ndef draw_welcome():\n    text_surface = font.render(\"STROOP Experiment\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n    text_surface = font_small.render(\"Press Spacebar to continue\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,300)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_stimulus(color, word):\n    text_surface = font.render(word, True, COLORS[color], col_gray)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_feedback(correct, reaction_time):\n    if correct:\n        text_surface = font_small.render(\"correct\", True, col_black, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n        screen.blit(text_surface, text_rectangle)\n        text_surface = font_small.render(str(int(reaction_time * 1000)) + \"ms\", True, col_black, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,200)\n        screen.blit(text_surface, text_rectangle)\n    else:\n        text_surface = font_small.render(\"Wrong key!\", True, col_red, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n        screen.blit(text_surface, text_rectangle)\n    text_surface = font_small.render(\"Press Spacebar to continue\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,300)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_goodbye():\n    text_surface = font_small.render(\"END OF THE EXPERIMENT\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n    text_surface = font_small.render(\"Close the application.\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,200)\n    screen.blit(text_surface, text_rectangle)\n    \nmain()col_white = (250, 250, 250)\ncol_black = (0, 0, 0)\ncol_gray = (220, 220, 220)\ncol_red = (250, 0, 0)\ncol_green = (0, 200, 0)\ncol_blue = (0, 0, 250)\n\nCOLORS   = {\"red\": col_red,\n            \"green\": col_green,\n            \"blue\": col_blue}\n\nWORDS    = (\"red\", \"green\", \"blue\")def draw_stimulus(color, word):\n    text_surface = font.render(word, True, COLORS[color], col_gray)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)if STATE == \"present_trial\":\n            draw_stimulus(this_color, this_word)\n            draw_button(SCREEN_SIZE[0]*1/5, 450, \"Red: X\", col_red)\n            draw_button(SCREEN_SIZE[0]*3/5, 450, \"Green: N\", col_green)\n            draw_button(SCREEN_SIZE[0]*4/5, 450, \"Blue: M\", col_blue)if STATE == \"feedback\":\n    if event.type == KEYDOWN and event.key == K_SPACE:\n        if trial_number < 20:\n            STATE = \"present_trial\"\n        else:\n            STATE = \"goodbye\"\n        print(STATE)from time import timeif STATE == \"present_trial\":\n    trial_number = trial_number + 1\n    this_word  = pick_color()\n    this_color = pick_color()\n    time_when_presented = time()\n    STATE = \"wait_for_response\"if STATE == \"wait_for_response\":\n    if event.type == KEYDOWN and event.key in KEYS.values():\n        time_when_reacted = time()\n        this_reaction_time = time_when_reacted - time_when_presented\n        this_correctness = (event.key == KEYS[this_color])\n        STATE = \"feedback\""},{"path":"intro.html","id":"exercises","chapter":"1 Introduction","heading":"1.5.0.1 Exercises","text":"Load Stroop program Python editor run .Find function definitions resemble one actors playIf struggled recording response time compliant way, , now seen code works? many actors needed, precisely can ?Change program 8 trialsChange progran uses orange instead red (words colors)Change program uses Q, W, E response keysChange program performs Stroop task four words colors","code":""},{"path":"intro.html","id":"batchwork","chapter":"1 Introduction","heading":"1.6 Making an eye tracker","text":"","code":""},{"path":"intro.html","id":"yets-and-yetis","chapter":"1 Introduction","heading":"1.6.1 YETs and Yetis","text":"eye tracker device tells, person looking moment moment. Modern eye trackers highly sophisticated systems, precise multiple purpose. costly, . costly every student one.Even eye tracking system 10.000 EUR price tag operates simple principle: camera device pointed eye eye ball coordinates estimated recorded piece software.YET camera device pointed eye, costs almost nothing. cheap make every student can one, hence Eye Tracker.YET0 first o new kind eye tracking devices. mininal design, need:30cm plastic rulera tube strong glueYET0 (Clippy)USB endoscope camera 5.5 mm diameter LEDIf following one courses, received YET0. simple piece plastic, weighing two grams. design simple can print one 10 minutes every entry-level 3D printer (170 - 200 EUR).USB endoscope camera mass product China, can get usual online distributors. costs typically 6 9 Eur, delivery included. also 7mm version endoscope, wider Clippy needed, heavier. accidentally buy one longer wire, stiffer wire, screen attached. won’t much use.Yeti YET interface (intelligence). piece software analyses incoming video footage often interacts user. Yeti usually written Python, using library Pygame interaction user library OpenCV video analysis.using Yeti YET, first download YET Github repository","code":""},{"path":"intro.html","id":"the-eyeballing-exercise","chapter":"1 Introduction","heading":"1.6.2 The Eyeballing exercise","text":"Stroop task example interactive program. Interactive programs interface user react user input useful manner. ’s hard problem computers, hence programmers.Like machines, computers much better monotonic tasks. Programming interactive stop watch can much harder programming computer stoically perform procedure 60 times per second.following exercise, playing similar game @ref(dumb_computers). write script simple eye tracking device. eye tracking device composed ofa camera pointed towards eyeand program analyses incoming pictures produce estimate eye resting.script need ideas. get ideas, need sample data. first part exercise, produce sample images portraits eyeballs. taking portrait samples, produce five portraits lookingstraight ahead (centered)straight ahead (centered)(vertical)(vertical)left right (horizontal)left right (horizontal), get YET close possible eyeball, LEDs turned repeat sequence.Now, inspect pictures group. Start portraits. Describe visual features vertical horizontal gaze directions? turn eyeball pictures repeat visual analysis.","code":""},{"path":"intro.html","id":"dumb-pictures","chapter":"1 Introduction","heading":"1.6.3 Dumb pictures","text":"eye-balling eyeballs, lot messy, surprisingly effective, biological stuff going eyeball mind, unaware . example, immediately recognize eyeball .Let’s explore computers see:Connect YET, LEDs turned .Get YET close possible screen computer try keep still.Computers see images rectangular grid points, every point X Y coordinates geometric plane, color. difference geometry programming (0,0) upper left corner.computer screen, point tiny multi-color, dimmable LED, called pixel. magnifying glass hand take even closer view screen, see, every pixel actually composed three differently colored LEDs: Red, Green Blue. learn RGB frames 8.4.Sometimes, computer doesn’t need see color, brightness levels, points emit light scale 0 (black) 255 (white). called grayscale frame. simple form representing picture black--white mode, points either full brightness (0 1). called bitmap frame, composed binary pixel. computer jargon binary switch called bit.","code":""},{"path":"intro.html","id":"from-pixel-to-eye-tracking","chapter":"1 Introduction","heading":"1.6.4 From pixel to eye tracking","text":"Now basics, task design computer program takes grid pixels (also called frame) produces estimate direction eyeball pointed . , decompose complex task smaller parts. However, nasty user input involved, don’t describe actors, design sequence functions, first function takes frame last returns eyeball position horizontal vertical direction.functions can helpful:Frame.grab always first line.\nnew frame?\nHand new frame\nFrame.grab always first line.new frame?Hand new frameFrame.dim takes frame produces width height frame, e.g.\nGive height frame!\nGive width frame!\nFrame.dim takes frame produces width height frame, e.g.Give height frame!Give width frame!Frame.split splits frame two horizontal two vertical parts return parts\nSplit frame horizontally position width/2!\nFrame.split splits frame two horizontal two vertical parts return partsSplit frame horizontally position width/2!Frame.bitmap takes grayscale frame turns bitmap, using threshold.\nMake bitmap threshold value 127!\nFrame.bitmap takes grayscale frame turns bitmap, using threshold.Make bitmap threshold value 127!Frame.eye detects eye face returns enclosing frame.\neye detected?\nFrame detected eye!\nFrame.eye detects eye face returns enclosing frame.eye detected?Frame detected eye!Frame.avg_bright calculates average brightness value input frameFrame.avg_bright calculates average brightness value input frame","code":""},{"path":"intro.html","id":"into-the-batch","chapter":"1 Introduction","heading":"1.6.5 Into the batch","text":"-. left-right! found solution problem? can solution chapter 9. following code extracted Yeti2, simple program, detects horizontal position (left, center, right).code Yeti2 starts preamble, mostly Yetis. interesting part begins another fast loop. Remember Looper 1.5? principle . Looper doesn’t know next video frame arrives, every loop starts interrogation collect next frame. frame subsequently turned grayscale image, subsequent analysis purely based brightness information.long eye detected, Yeti2 applies highly specialized computer vision technique, called Haar cascade detect eye frame.function returns list detected eyes, empty zero length. list contains detected eyes, first detected eye selected Yeti2 changes status Detected. inspect code , notice Yeti2 never returns undetected state. means, continues measure eye position, even eye present frame. compromise keep program simple.eye detected, sub frame holding eye extracted undergose deeper analysis. see typical data processing chain, input every step analysis frame created earlier step. chain starts frame holding eye, horizontally split left right frame. , frames sum brightness computed (works like average, since two frames equal size). position eye ball determined comparing brightness left right frame. look left, sclera seen right frame, vice versa.Essential work value brightness ratio center position center_ratio adjusted situation.","code":"Detected = False\n\n# FAST LOOP\nwhile True:\n\n    # Capture frame-by-frame\n    ret, frame = video_capture.read()\n    if not ret:\n        print(\"Can't receive frame (stream end?). Exiting ...\")\n        break\n    \n    # FRAME PROCESSING\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)    if not Detected:\n        eyes = eyeCascade.detectMultiScale(\n            gray,\n            scaleFactor=1.1,\n            minNeighbors=5,\n            minSize=(200, 200))\n        # AUTOMATIC TRANSITIONAL\n        if len(eyes) > 0:\n            eye = eyes[0]\n            print(\"Eye detected\")\n            Detected = True\n        # once eye is detected, yeti stays there    # CONDITIONAL PROCESSING\n    if Detected:\n        center_ratio = .85\n        threshold = .05\n        (x, y, w, h) = eye\n        eye_frame = cv2.resize(frame[y:y+h,x:x+w], dim,interpolation = cv2.INTER_AREA)\n        left_frame = eye_frame[0:height, 0:int(width/2)]\n        right_frame = eye_frame[0:height, int(width/2):width]\n        left_sum = np.sum(left_frame)\n        right_sum = np.sum(right_frame)\n        LR_ratio = left_sum/right_sum\n        \n        if LR_ratio < center_ratio - threshold:\n            Position = \"right\"\n        if LR_ratio > center_ratio + threshold:\n            Position = \"left\"\n        else Position = \"center\""},{"path":"intro.html","id":"further-readings","chapter":"1 Introduction","heading":"1.6.5.1 Further readings","text":"OpenCV Getting Setting Pixels","code":""},{"path":"intro.html","id":"think-further","chapter":"1 Introduction","heading":"1.6.5.2 Think further","text":"Think another device build around YET. famous physicist Stephen Hawking used device registering eye blinks communicate. similar device used novel Butterfly divers bell writing novel.\nUse YET record pictures closed eye perform analysis visual features discern open eye closed eye, example distribution brightness. Propose sequence functions, take raw frame return True eye closed, False otherwise.\nDesign interactive program around blink detection, adding actors like @ref(dumb_computers).\nInspect Yeti6 done .\nThink another device build around YET. famous physicist Stephen Hawking used device registering eye blinks communicate. similar device used novel Butterfly divers bell writing novel.Use YET record pictures closed eye perform analysis visual features discern open eye closed eye, example distribution brightness. Propose sequence functions, take raw frame return True eye closed, False otherwise.Use YET record pictures closed eye perform analysis visual features discern open eye closed eye, example distribution brightness. Propose sequence functions, take raw frame return True eye closed, False otherwise.Design interactive program around blink detection, adding actors like @ref(dumb_computers).Design interactive program around blink detection, adding actors like @ref(dumb_computers).Inspect Yeti6 done .Inspect Yeti6 done .eyeball jumps object object visual field, makes saccades. Saccades extremely fast. average eyeball make full spins speed saccade, make 360 720 milliseconds (84 rpm). Think use YET measure speed--eyeball.eyeball jumps object object visual field, makes saccades. Saccades extremely fast. average eyeball make full spins speed saccade, make 360 720 milliseconds (84 rpm). Think use YET measure speed--eyeball.psychological experiments, reaction time frequently measured interval stimulus presentation keypress. Compared saccades, fingers sluggish. Combine results @ref(dumb_computers) 1.6 create Stroop task response measured eye tracking.psychological experiments, reaction time frequently measured interval stimulus presentation keypress. Compared saccades, fingers sluggish. Combine results @ref(dumb_computers) 1.6 create Stroop task response measured eye tracking.","code":""},{"path":"variables.html","id":"variables","chapter":"2 Variables, values and types","heading":"2 Variables, values and types","text":"chapter 1 Introduction, took closer look Stroop Task program. , encountered components computer program called variablesFor instance, learned variable COLORS collects combinations numbers red, green, blue color compound variable, called dictionary.However, can talk compound variables dictionaries , meet fundamental component computer program: values.examples , printed outputs 4, 5.0 Hello, World! values. Values can numbers, also words, even whole sentences. interior computer program, 4 Hello, World serve purpose, building blocks. Values classified different classes, data types: 4 -called integer \"Hello, World\" string, -called string individual letters. data type value determines operations can performed value, operations performed. can think operations arithmetic addition subtraction, also self-defined operations, called functions. learn functions later book.ever wonder class value belongs , Python interpreter can tell .learn four basic data types Section 2.4 Data types.find print function useful; makes output visible printing console programming environment whatever written inside two brackets (). Printing way make things visible, result simple calculation 2 + 2. example , print function included, computer perform calculation 2 + 2 internally, see result, 4. blame computer, saw chapter 1, computers incredibly dumb. computer supposed know addition making calculation, also supposed show result screen? Computers unfortunately gifted common sense - need tell precisely .","code":"col_white = (250, 250, 250)\ncol_black = (0, 0, 0)\ncol_gray = (220, 220, 220)\ncol_red = (250, 0, 0)\ncol_green = (0, 200, 0)\ncol_blue = (0, 0, 250)\nCOLORS   = {\"red\": col_red,\n            \"green\": col_green,\n            \"blue\": col_blue}\nWORDS    = (\"red\", \"green\", \"blue\")print(2 + 2)## 4print(20 / 4)## 5.0print(\"Hello, World!\")## Hello, World!print(type(4))## <class 'int'>print(type(\"Hello, World!\"))## <class 'str'>"},{"path":"variables.html","id":"variables-1","chapter":"2 Variables, values and types","heading":"2.1 Variables","text":"Computer programs usually required store information way later retrieval manipulation. Stroop Task program saw chapter 1, trial, need store color word computer picked. addition, want record reaction time subject. Otherwise, Stroop Task program utterly useless examining relation reaction times ()congruence words colors. words, Stroop task program useless manipulate values calculated 2 + 2. see, computer performs simple value manipulation get momentarily answer. times, computers efficient good. quickly forget values pass system. moment finish calculation, computer programs forget outcome calculation. even forget ever performed calculation (remind indeed ). variables come handy. Variables storage units computer’s memory. variable can store kind value. Unlike result simple value manipulations, 2 + 2, variables designated storage addresses computer’s memory. need way access variables computer’s memory hence, give name. can think variable’s name unique identification address computer’s memory. fact, value assignment, value stored certain position computer’s memory. position precisely defined location, much like longitude latitude coordinates describe physical location Global Positioning System (GPS). command value stored variable called assignment statement. common say “value assigned variable”.order variable value placed around equal sign = arbitrary. Variables always left side, values right side. Everything else produce error. mentioned , variables can store kind value. right side can complex expression, obviously value first sight.single equal sign, = 4 exclusivey reserved assignment statements. read program loud, practice sayinga assigned value 4A double equal expression, == 4 used comparing two values, “value ‘’ equal 4?” completely different assignment covered Section 2.3 Data types detail, Chapter 3.Programmers much freedom naming variables, strict rules exist, well conventions. good practice others throw syntax errors adhered . beginning, may think good practice guidelines superfluous, learn value start making complex programs.Heeding pays !Programmers give meaningful names variables order make code readable others . Without meaningful names, easily get lost reading code . Even code may appear nothing gargle-bargle.Programmers give meaningful names variables order make code readable others . Without meaningful names, easily get lost reading code . Even code may appear nothing gargle-bargle.first character variable must letter alphabet, either uppercase lowercase ASCII Unicode, underscore.first character variable must letter alphabet, either uppercase lowercase ASCII Unicode, underscore.rest variable name may consist letters (uppercase lowercase ASCII Unicode characters), underscores, digits (0-9).rest variable name may consist letters (uppercase lowercase ASCII Unicode characters), underscores, digits (0-9).Variable names case-sensitive. means variables myString mystring treated variable computer.Variable names case-sensitive. means variables myString mystring treated variable computer.may still get sytnax errors despite adhering rules named . Chances high tried use one Python’s keywords variable name. Python uses number keywords recognize structure program.keywords example. Python interpreter can tell complete list keywords known Python version:may still get sytnax errors despite adhering rules named . Chances high tried use one Python’s keywords variable name. Python uses number keywords recognize structure program.keywords example. Python interpreter can tell complete list keywords known Python version:","code":"a = 4\nb = \"This is a string\"\n\nprint(a)## 4print(b)## This is a stringa = 13*17/23\nprint(a)## 9.608695652173912import keyword\nprint(keyword.kwlist)## ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']"},{"path":"variables.html","id":"stroop-task-variables","chapter":"2 Variables, values and types","heading":"2.2 Use of variables in the Stroop Task","text":"Now read variables assigned values, let’s look variables used interactive Stroop program.first line code snippets Stroop Task program, empty list assigned variable RT. purpose list store reaction times Stroop experiment. learn lists Chapter 4. now suffices know lists yet another data type, capable containing values multiple data types time! may reckon ultimate structure storing information. variables time_when_presented time_when_reacted respectively store point time (using function time) certain event. time_when_presented records moment time stimulus presented time_when_reacted saves moment time subject reacts stimulus. reaction time subject calculated subtracting one stored point time saved variable this_reaction_time. Finally, subject’s reaction time appended RT, meaning this_reaction_time saved RT program proceeds next trial. disclaimer; code snippets obviously reduce mechanics Stroop Task program highlighted variable assignments. means code lacks actual dynamics program run . captures basic idea program records manipulates participant’s reaction time help variables.","code":"# a list for gathering the response times\nRT = []\n\n# remember when stimulus was presented\ntime_when_presented = time()\n\n# remember when the user has reacted\ntime_when_reacted = time()\n\n# calculate the response time\nthis_reaction_time = time_when_reacted - time_when_presented\nRT.append(this_reaction_time)"},{"path":"variables.html","id":"how-variables-are-used","chapter":"2 Variables, values and types","heading":"2.3 How Variables Are Used","text":"Variables essential component programs, numerous applications. section provides glimpse vast creative possibilities variables. worry, soon get hang start programming . One common way using variables storing output functions:learn detail functions Chapter 6. now good enough know function random.randint(0,10) randomly picks integer 0 10, returns chosen integer. Whatever number picked function stored variable number can easily retrieved used purposes elsewhere. piece information satisfy , simply type help(random) importing random interpreter give detailed description class random.variable’s assigned value can updated. means value can changed initial assignment. useful structuring program:comes handy want repeat part program certain condition fulfilled. instance, imagine taking measurements fixed number trials psychological experiment. example , n_trials n used creating counting mechanism desired number repeated measurements reached. Note old value n used update value n one execution cycle program n = n + 1. first execution part code snippet,n value 1 instead 0! yet fully getting hang , worry. learn use conditionals loop Chapter 3 Chapter 5, respectively. basic idea behind code snippet show updating variables can used create counting mechanism computer program.","code":"import random\na = random.randint(0,10)\nprint(a)## 2# determining the maximum number of trials\nn_trials = 3\n# setting a counting variable to 0\n# at the beginning of the program\nn = 0\n# adding 1 to n as long as n does not exceed n_trials\nwhile(n < n_trials):\n    # do something\n    n = n + 1"},{"path":"variables.html","id":"data-types","chapter":"2 Variables, values and types","heading":"2.4 Data types","text":"Earlier chapter, learned value belongs certain class data type. section introduce basic data types: integers, floats, strings, booleans. Apart basic data types, Python knows numerous specialized types. Earlier chapter, already encountered two specialized data types: dictionaries lists. Literally computer program contains values least basic types thus, seems reasonable say word two .","code":""},{"path":"variables.html","id":"numbers","chapter":"2 Variables, values and types","heading":"2.4.1 Numbers","text":"two main types numbers Python, integers floating point numbers, floats short. Integers whole numbers, 6 1234, floats numbers including decimal point, 2.4 45.768. wait, happens add float variable type integer? Let’s try!variable changed type int float! example implicit typecasting. Typecasting means changing type variable, can done explicitly implicitly. times want change type variable suit needs. , use explicit typecasting:discover one tricky thing typecasting floats integers. Python round value floats typecasting integers, simply cuts whatever decimal point. can become especially tricky typecasting implicitly monitored caution.","code":"number = 7\nprint(type(number))## <class 'int'>number = number + 3.5\nprint(type(number))## <class 'float'>number = 10.5\nint(number)## 1010## 10"},{"path":"variables.html","id":"strings","chapter":"2 Variables, values and types","heading":"2.4.2 Strings","text":"numbers integers floats, values \"17\" \"13.65\"? look like numbers, wrapped quotation marks like strings.strings! Python, strings can enclosed either single quotes ('), double quotes (\"), three (''' \"\"\"). string includes quote want indicate using quotation marks within string? Using quotation marks used defining string prematurely end string.Instead, using single quotes, can use double quotes triple quotes inside :Double quoted strings can single quotes triple quotes inside :Triple quoted strings can include either single double quotes. Strings basically sequence single characters tied together unlike variable names, strings may include spaces! usually used display text export information program. need export data program save data collected experiment somewhere hard disk.","code":"print(type(\"17\"))## <class 'str'>print(type(\"13.65\"))## <class 'str'>quote = \"Freud: \"The mind is like an iceberg, it floats with one-seventh of its bulk above water.\"\"## [1] \" Error: invalid syntax (<string>, line 1)\"quote = 'Carl Rogers: \"How can I provide a relationship which this person may use for his own personal growth?\"'quote = \"Ivan Pavlov's best known findings relate to the phenomenon of conditioning.\""},{"path":"variables.html","id":"booleans","chapter":"2 Variables, values and types","heading":"2.4.3 Booleans","text":"boolean expression expression either True False.True False special values type boolean; strings!boolean expression consists two operands, located left right relational comparative operator. six comparison operators Python:x == y # x equals yx != y # x equal yx > y  # x greater yx < y  # x smaller yx >= y # x greater equal yx <= y # x smaller equal yThese operators probably familiar , usage Python differs mathematical symbols know highschool. One common confusion surrounds equals (==) operator. Remember = reserved assignment operator == used comparisons. thing => =<.\nApart , boolean values can handled exactly value, , can assigned variables, printed .","code":"print(5 == (3+2))## Trueprint(5 == 6)## Falsej = \"hel\"\nprint(\"hello\" == j + \"lo\")## Trueprint(type(True))## <class 'bool'>print(type(False))## <class 'bool'>number_of_EC_required_for_BSA = 45\npassed_BSA = number_of_EC_required_for_BSA <= 50\nprint(passed_BSA)## True"},{"path":"variables.html","id":"object-variables-in-a-yeti","chapter":"2 Variables, values and types","heading":"2.5 Object variables in a Yeti","text":"Stroop program, variables use collect response times, one simple number time. data collected purpose subsequent data analysis. means (even implies) data remains unprocessed.situation Yeti different two ways:Video frames complex numbers ??. grid numbers, .e. compound.whole point Yeti deeply process incoming video data.Python, compound variables usually referred objects programming objects called object-orientation (OO). creation objects program looks similar storing result function variable. following line Yeti2 reads frame video device assigns variable Frame. function creates object way called constructor.Stroop program, variables created remain unchanged. variables change concerned measurement response times STATE variable, keeps track program flow. see program machine takes data input produces data output, Stroop task converts letter float number every two () seconds. interactive programs human wetware loop, usually sluggish. biggest problem motor system. world-class typist can hit keyboard rate 13 strokes per second. ASCII scheme, one letter worth 1 Byte (8 Bit). maximum data input rate keyboard-driven program 13 Bytes/second.Yeti program operates input stream YET, according next program many magnitudes larger.Yeti serious number crunching get raw video frame measures eyeball position. following code block shows data processing chain Yeti2, uses changes brightness distribution locate eye ball.many assignment operators typical data processing chains. particular algorithm, incoming data split left right frame, undergo brightness analysis separately, merged single number brightness distribution.remarkable chain starts whole lot data (one YET frame per 18ms), ends single floating point number. called data reduction mechanism. , , techniques Statistics Machine Learning data reduction mechanisms.purpose Yeti2 reduce data, user interface program video stream equal input. Even , output video stream improved version original beingenhanced focusing eyeinteractive, program reacts voluntary eye movementsaugmented, real view enhanced processed dataLet’s take look user interface Yeti2 assembled:, see chain assignment operators. Function cv2.putText takes frame capturing eye F_eye input produces output frame text overlay brightness distribution (F_out). function applied F_out, time adding guessed position result written back variable name. called updating variable reduces memory consumption program. tedious task putting together augmented display one text box time, updating avoids problem finding unique name every step.","code":"Frame = video_capture.read()width    = 640\nheight   = 480\nsubpixel = 3\nfps      = 30 # frames per second\ninput_rate = width * height * subpixel * fps\n\nprint(\"Yeti input data stream: \" + str(input_rate) + \" Bytes/second\")## Yeti input data stream: 27648000 Bytes/secondcenter_ratio = .85\nthreshold = .05\n(x, y, w, h) = eye\nF_eye = cv2.resize(Frame[y:y+h,x:x+w], dim,interpolation = cv2.INTER_AREA)\nF_left = F_eye[0:height, 0:int(width/2)]\nF_right = F_eye[0:height, int(width/2):width]\nbright_left = np.sum(F_left)\nbright_right = np.sum(F_right)\nbright_dist = bright_left/bright_rightF_out = cv2.putText(F_eye, f\"{bright_dist}\", (100, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,0,0))\nF_out = cv2.putText(F_out, f\"{Position}\", (200, 200), cv2.FONT_HERSHEY_SIMPLEX, 2,\n        font_col, thickness = 8)"},{"path":"variables.html","id":"common-errors","chapter":"2 Variables, values and types","heading":"2.6 Common errors","text":"Confusing assignment operator (=) comparative equals operator (==). first solely used assigning values variables inthe latter comparing two valuesUsually, confuse assignment operator equals operator, get syntax error.Forgetting typecast data types incorporating stringsOften, want export arithmetic result (participant’s reaction time Stroop Task program) non-string data program, simply want print screen. usually done first converting data type string writing external file (good old plain text files) using print command write console. Quite often people forget explicit typecasting required incorporating non-string values sequence strings.Unintentionally cutting decimals typecasting integers.Obviously, mean reaction time exactly 3 unrealistic 3.749, 2.998, 3.0147 individual trial reaction times. may feel inclined typecast anyway shorten numerical string expression, remember typecasting float integer results loss information decimal point. Besides, usually better ways rounding floating points; consider round method instance.Forgetting reassign updated value variableRemember assign new value mutated variable either new variable original variable name; computer otherwise ignore variable mutation keep variable’s old value memory.","code":"myString = \"This is an assignment statement\"17+3 == 21## False17+3 = 21## [1] \"Error: can't assign to operator (<string>, line 1)\"myGrade = 8\nprint(\"I got an \" + myGrade + \" on the last exam!\")## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: must be str, not int\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>myGrade = 8\nprint(\"I got an \" + str(myGrade) + \" on the last exam!\")## I got an 8 on the last exam!import numpy\nRT = [3.749,2.998,3.0147]\nmean_RT = numpy.mean(RT)\nprint(\"The subject had a mean reaction time of \" + str(int(mean_RT)) + \" seconds.\")## The subject had a mean reaction time of 3 seconds.import numpy\nRT = [3.749,2.998,3.0147]\nmean_RT = numpy.mean(RT)\nprint(\"The subject had a mean reaction time of \" + str(round(mean_RT, 3)) + \" seconds.\")## The subject had a mean reaction time of 3.254 seconds.count = 1\ncount + 1## 2print(count)## 1count = 1\ncount = count + 1\nprint(count)## 2"},{"path":"variables.html","id":"debugging","chapter":"2 Variables, values and types","heading":"2.7 Debugging","text":"Despite efforts skill, programmers encounter programming errors daily (hourly) basis. , programming beginners experts different. fact, debugging challenging instructive task .Apart general good debugging practices introduced chapter 9 Debugging, tricks especially useful tracing errors originate variables program.Checking equals == assignment = operators good start tracking bugs suspected originate variables. can either scan code top bottom manually use search function programming environment. Use Cltr + F search expression code (case either = ==, name variable expect culprit). , instance equals == = assignment operator, variable , ask whether used right operator intended job. Confusing equals assignment operator usually results syntax error, syntax error necessarily need originate confusing operators. fact, syntax errors undoubtly generic errors programming.Checking equals == assignment = operators good start tracking bugs suspected originate variables. can either scan code top bottom manually use search function programming environment. Use Cltr + F search expression code (case either = ==, name variable expect culprit). , instance equals == = assignment operator, variable , ask whether used right operator intended job. Confusing equals assignment operator usually results syntax error, syntax error necessarily need originate confusing operators. fact, syntax errors undoubtly generic errors programming.positive bug caused confusing equals assignment operator, take closer look operations perform variables (comparing variables performing arithmetic calculations). Operations another potential source bugs.positive bug caused confusing equals assignment operator, take closer look operations perform variables (comparing variables performing arithmetic calculations). Operations another potential source bugs.example , evident goes wrong. Strings integers added two numbers summed. type error thrown. However, complex programs often less evident bug originates . Therefore, useful check data type variables multiple locations program. knows, may unknowingly converted variable another type somewhere code later moment, causes program throw error. Use functions type() print() display data type variables different places code hit run!Performing operations variables may still unexpected results, even type errors involved. Arithmetic (+, -, *, /) Boolean operators follow rules precedence. Arithmetic operators follow rules precedence learned highschool mathematics. arithmetic operators also precede Boolean operator, meaning code snippet 1 + 1 evaluated compared 2.debugging strategy, useful change precedence operators help brackets (). bug may originate false assumption operator precedences. Using brackets, can make sure operations executed exact order intended.neither confused equals assignment operator, made type error, false assumptions operator precedences, last resort mentally follow flow program check whether variables assigned expected value times. instance, code snippet , may expect result 1 since added 2 initial value 2 / 2 1.However, never assigned new value 2 0 / 2 obviously 0. easy overlook mistake scanning code. Therefore, checking values assigned variables read program helpful. instance adjust code puzzled result 2, like sowhich prints first value , b result / b console.","code":"a = 1\nb = \"1\"\n\nprint(a + b)a = 1\nb = \"1\"\n\nprint(type(a))## <class 'int'>print(type(b))## <class 'str'>print(1 + 1 == 2)## Truea = 0\nb = 2\n\na + 2## 2print(a / b)## 0.0a = 0\nb = 2\n\na + 2## 2print(a, b, a / b)## 0 2 0.0"},{"path":"variables.html","id":"exercises-1","chapter":"2 Variables, values and types","heading":"2.8 Exercises","text":"","code":""},{"path":"variables.html","id":"exercise-1.-operators","chapter":"2 Variables, values and types","heading":"2.8.1 Exercise 1. Operators","text":"output following code snippets?","code":"x = 2\ny = 1.0\nprint(x + y)x = 4.0\ny = x + 1\nprint(x + y)x = 1\ny = \"1.0\"\nprint(x + y)x = 4\ny = 4.0\nprint(x == y)x = 12\ny = x / 2\nprint(y >= 5)"},{"path":"variables.html","id":"exercise-2.-values","chapter":"2 Variables, values and types","heading":"2.8.2 Exercise 2. Values","text":"statements values true?Values storage units computer’s memory thus, persistent throughout computer programEach value exclusively belongs one data typeThere four basic data types occur virtually computer program: strings, integers, floats dictionariesVariables can assigned type valueAny operation (e.g. subtraction) can performed two pairs values","code":""},{"path":"variables.html","id":"exercise-3.-mini-programs","chapter":"2 Variables, values and types","heading":"2.8.3 Exercise 3. Mini programs","text":"output following mini programs?","code":"x = \"1.0\"\ny = \"1\"\nprint(x + y)x = 5\ny = 2\nprint((x / y) == 2.5)x = 1\nx = x + 1\nx = x - 2\nprint(x)"},{"path":"variables.html","id":"exercise-4.-debugging","chapter":"2 Variables, values and types","heading":"2.8.4 Exercise 4. Debugging","text":"goes wrong following code snippets?letter x may repeat multiple assignment statementsVariable declarations must ordered descending order, value 2 assigned 1An illegal variable name usedA wrong arithmetic equation printed, 3 equal \"3\"Strings integers comparable using boolean operatorsThe assignment operator used instead comparative operatorVariables called print statementsThe name variable needs typecasted StringThe content inside brackets print statement lacks quotation marks","code":"x = 1\n2x = 2\nprint(x + 2x)x = 3\ny = \"3\"\nprint(x = y)name = \"Colin\"\nprint(This is + name)"},{"path":"variables.html","id":"exercise-5.-string-concatenation","chapter":"2 Variables, values and types","heading":"2.8.5 Exercise 5. String concatenation","text":"Consider three blocks code .output respective print statement end block?Describe words string concatenation .error hidden code. Explain going wrong adjust code runs without throwing errors.Want know string concatenation? following website provides gentle introduction topic: Python Beginners: String concatenation formatting Python","code":"myString = \"The statement 'Veni, vidi, vici.'\"\ns1 = \" was coined by Gaius Julius Caesar.\"\nmyString = myString + s1\nprint(myString)\n\n\nmyString = \"The statement 'Veni, vidi, vici.'\"\ns1 = \" was coined by Gaius Julius Caesar.\"\ns2 = \", 'I came, I saw, I conquered.',\"\nmyString = myString + s2 + s1\nprint(myString)\n\n\nmyString = \"The statement 'Veni, vidi, vici.'\"\ns1 = \" was coined by Gaius Julius Caesar,\"\ns2 = \" supposedly around \"\nyear = 47\ns3 = \" BC.\"\nmyString = myString + s1 + s2 + year + s3\nprint(myString)"},{"path":"variables.html","id":"exercise-6.-variable-names","chapter":"2 Variables, values and types","heading":"2.8.6 Exercise 6. Variable names","text":"following variable names indicate whether name legal . illegal variable names, point makes name violate rules /conventions.","code":"Reg       = \"What have the Romans ever given us?\"\nman1      = \"The aqueduct?\"\n2ndMan    = \"The sanitation\"\nm@n3      = \"And the roads\"\nman_4     = \"Irrigation\"\nman 5     = \"Medicine\"\nSixthMan  = \"Education\"\nman_no._7 = \"And the wine!\"\n8thMan    = \"Public votes\"\nno9atReg  = \"Public order; it's finally safe to walk in the streets at night.\"\nreg       = \"\"\"All right. But apart from sanitation,\n            medicine, education, wine, public order,\n            irrigation, roads, a fresh water system,\n            and public health;\n            what have the Romans ever done for us?\"\"\""},{"path":"variables.html","id":"exercise-7.-stroop-task-welcome-message","chapter":"2 Variables, values and types","heading":"2.8.7 Exercise 7. Stroop task welcome message","text":"exercise add welcome message starting screen Stroop Task program.Open file stroop_modifiedCh1Ex3.py. Run .Make two new variables, msgColor msgText. Choose color welcome message want.Read try understand code written lines 134-137. Try formulate words line code .Uncomment lines 134-137. Hint: Python, commented line starts #. Commented lines executed.Hit Run file see first modification Stroop task algorithm action.","code":""},{"path":"variables.html","id":"exercise-8.-printing","chapter":"2 Variables, values and types","heading":"2.8.8 Exercise 8. Printing","text":"following code prints part Methods section. Copy run .first time run script, get error. Initialize variables condition1, condition2, condition3, condition4 solve error. Fill semantically syntactically correct values four condition variables. example, context given Method excerpt, make sense say one four conditions easy-locationA-limited, right?filled blank variable declarations, get curious output number trials per person. Adjust code correct number trails per person printed. Explain happened words.52.0 participants looks bit ugly printed part text. Adjust code way full integers printed console.","code":"participants = 52.0\ntrials = \"200\"\nexperimental_sessions = 3\ntrials_pp = trials * experimental_sessions\nconditions = 4\n\n\n# to be implemented by you\ncondition1 = \ncondition2 = \ncondition3 = \ncondition4 =\n\nprint(\"In total,\", participants, \"participants participated in the study.\")\nprint(\"A 2x2 factorial between-subjects design was employed.\")\nprint(\"The study examined the interaction of two independent variables: \")\nprint(\"task difficulty (easy, difficult) and time (limited, unlimited).\")\nprint(conditions, \"conditions were devised, plus a control condition.\")\nprint(\"The conditions were:\",condition1,condition2,condition3,condition4)\nprint(\"Participants were tested in\", experimental_sessions, \"experimental sessions.\")\nprint(\"Each session consisted of\",trials,\"trials.\")\nprint(\"In total, each partcipant thus completed\", trials_pp, \"trials.\")"},{"path":"variables.html","id":"exercise-9.-using-python-as-a-calculator","chapter":"2 Variables, values and types","heading":"2.8.9 Exercise 9. Using Python as a calculator","text":"Make python script Ch1Ex5.py implement following pseudo code:assign value 37 variable n1assign value 456 n2calculate 1027 modulo n1 assign result n3divide n2 n3add 4 n2calculate n2 modulo 5 assign result n4subtract 17 n4calculate 65 modulo n4 divide result 2What resulting value n4?","code":""},{"path":"variables.html","id":"exercise-10.-a-boolean-puzzle","chapter":"2 Variables, values and types","heading":"2.8.10 Exercise 10. A Boolean puzzle","text":"Fill blank spots (indicated question mark ?) following code way True Boolean values returned. can use Python interpreter calculations.","code":"n1 = 238\nn2 = 17\n\nprint(n1 ? n2)\nprint(n1 / ? == 14)\nprint(n1 * ? == n2)\nprint(n1 + ? == n2 - ? and n1 + ? == 972%243 and n2 - ? == 0)\nprint(n2 * ? == n1*47)\nprint(n1 / ? == n2 / ? * ?)"},{"path":"variables.html","id":"think-further-1","chapter":"2 Variables, values and types","heading":"2.9 Think Further","text":"information exercise Variables Data Types may want consult following resources:\nDowney, . (2012). Think Python. O’Reilly Media, Inc.. Chapter 2. Variables, expressions statements\nOfficial Python Tutorial, parts 3.1.1 Numbers 3.1.2 Strings\nLearnpython ``Variables Types’’ interactive tutorial\nSwaroop, C. H. (2003). Byte Python. Chapter 6 ``Basics’’\ninformation exercise Variables Data Types may want consult following resources:Downey, . (2012). Think Python. O’Reilly Media, Inc.. Chapter 2. Variables, expressions statementsOfficial Python Tutorial, parts 3.1.1 Numbers 3.1.2 StringsLearnpython ``Variables Types’’ interactive tutorialSwaroop, C. H. (2003). Byte Python. Chapter 6 ``Basics’’statistical techniques data reduction mechanism, take lot data reduce numbers? Take three statistical techniques top head make check.statistical techniques data reduction mechanism, take lot data reduce numbers? Take three statistical techniques top head make check.Think brain. use data reduction mechanisms?Think brain. use data reduction mechanisms?","code":""},{"path":"conditionals.html","id":"conditionals","chapter":"3 Conditionals","heading":"3 Conditionals","text":"","code":"if 1 == 1:\n  print('Hello World')## Hello World"},{"path":"conditionals.html","id":"boolean-logic","chapter":"3 Conditionals","heading":"3.1 Boolean logic","text":"Chapter 2 Variables, read simple Boolean expressions produce Boolean values (True, False) help comparative operators (==,!=,>,<,>=,<=). chapter, first take closer look Boolean expressions work towards introducing main actor regulating flow computer program, conditionals. chapter 1 Introduction took closer look Stroop Task program. saw program shifts different stages Stroop experiment, among preparing trial waiting participant’s response. experimental stages mirrored different states Stroop Task program. simple lamp, example, can regarded two possible states, namely either switched . Stroop Task program knows states simply switched , just simple lamp, needs kind switch transit one state another. conditionals come handy see end chapter. first things first, let’s take look following two examples:, , three logical operators used Python. allow us build complex Boolean expressions simpler ones. Sometimes operators confuse people used differently informal language. Therefore, important understand formally mean Python (math programming languages). following truth table displays operators exactly mean two variables b combinations values:exists set rules working Boolean values, much like highschool mathematical algebra. First , logical operators , , differ priority. highschool, learned given formula + b * c, first multiply b c adding . saying * higher precedence +. highest lowest precedence ranking three logical operators : , , . addition, six comparative operators (==,!=,>,<,>=,<=) precede logical operators.mathematics, brackets can used change order operations.Also notice thatis asFinally, Python code frequently encounter numerical values part Boolean expressions, following:, numerical expression evaluated context Boolean operator converted Boolean. happens, zero becomes False value becomes True, including negative values :may expected, whole situation implicit typecasts Boolean even worse, typecast depends order.Certainly, reasons, Python behaves way, far intuitive (breaking law commutivity operator!). Therefore one always use explicit Boolean expressions, following:","code":"print(10 > 5 and 5 > 2)## Trueprint(True or False)## Trueprint(True and not False)## Trueprint(not True and False)## Falseprint(not True or 1 == 1)## Trueprint(not True and False)## Falseprint(not (True and False))## Truetrial = 3\nmax_trials = 6\ncorrect = True\n\nprint((max_trials - trial) and correct)## Trueprint(-2 and True)## Trueprint(True and 2)## 2trial = 3\nmax_trials = 6\ncorrect = True\n\nprint((max_trials - trial) > 0  and correct)## True"},{"path":"conditionals.html","id":"if-then","chapter":"3 Conditionals","heading":"3.2 if this is true, then do this","text":"Boolean values essential regulating flow computer program provide conditions certain blocks code executed. simplest form conditional statement.can read statements asIf whatever written within curved brackets equals True,\n, , intended (intendation, intention!) code within statement evaluated.statement consists header body. header begins keyword , followed Boolean expression (condition) ends colon (:). brackets around condition optional, recommended facilitate readability. given condition head met, program read execute code written statement’s body. Note Python requires statements written body statement indended consistently (commonly four spaces). intended statements called block first unintended statement designates end block. usefulness intendation may first apparent , trust , facilitates reading complex programs enormously.","code":"a = 0\nif (a < 0):\n    print(\"a is smaller than 0\")\nif (a >= 0):\n    print(\"a is larger than, or equal to 0\")## a is larger than, or equal to 0"},{"path":"conditionals.html","id":"else-do-that","chapter":"3 Conditionals","heading":"3.3 else do that","text":"Actually, can simplify code using else clause:, take great care: conditions < 0 >= 0 special :mutually exclusive; one can true timecomplete; third option.else clauses optional, often simplify code. dealing two complete, mutually exclusive conditions, using /else clause way go. two choices, can either use nested conditionals ... elif ... else:indentation makes structure program visible. However, time, nested conditionals complicate code unecessarily, making difficult read. commonly regarded good practice keep usage nested conditionals minimum., implement two execution branches, without resorting nested conditionals? Let’s pretend incredibly important program make difference case larger 0, compared equals 0.elif statement (short else statement) allows include two alternative conditions. theory, can build endless chain alternative conditions using elif. Whether useful , , course, different question. Whenever elif included train conditions, whole structure called chained conditional. Note using else clause chain conditionals, always marks end chain. Furthermore, condition checked order. first False, next checked, . Note first True branch executed, even one condition True. nothing like “true” Boolean logic.Alternatively, nesting can often circumvented combining simple Boolean expressions using logical operators:","code":"a = 0\nif (a < 0):\n    print(\"a is smaller than 0\")\nelse:\n    print(\"a is larger than, or equal to 0\")## a is larger than, or equal to 0a = 0\nif (a < 0):\n    print(\"a is smaller than 0\")\nelse:\n    if (a == 0):\n        print(\"a equals 0\")\n    else:\n        print(\"a is larger than 0\")## a equals 0a = 0\nif (a < 0):\n    print(\"a is smaller than 0\")\nelif (a == 0):\n    print(\"a equals 0\")\nelse:\n    print(\"a is larger than 0\")## a equals 0a = 1\nif (a >= 0):\n    print(\"a is greater than or equals 0\")\nelif (a == 1):\n    print(\"a equals 1\")\nelse:\n    print(\"a is smaller than 0\")## a is greater than or equals 0a = 5\nif (a > -5):\n    if (a >= 0):\n        print(\"a is a positive digit\")a = 5\nif (a > -5 and a >= 0):\n    print(\"a is a positive digit\")"},{"path":"conditionals.html","id":"bringing-interaction-to-life-conditional-state-transitions","chapter":"3 Conditionals","heading":"3.4 Bringing interaction to life: Conditional state transitions","text":"programming interactive software, Stroop experiment, conditionals essential control flow program. controlling flow, mean program changes states reaction input user. Without programmer’s intervention, program executed top bottom. can imagine Stroop Task program needs flexible , depending actions participant. Take closer look Stroop Task program transits welcome screen first trial:plain English, telling program switch state \"welcome\" state \"prepare_next_trial\" upon pressing SPACE key. see action, run Stroop Task program, watch closely printed console. see whenever program transits new state, state program printed console.","code":"STATE = \"welcome\"    \n\nif STATE == \"welcome\":\n    if event.type == KEYDOWN and event.key == K_SPACE:\n        STATE = \"prepare_next_trial\"\n        print(STATE)"},{"path":"conditionals.html","id":"transition-tables","chapter":"3 Conditionals","heading":"3.4.1 Transition tables","text":"previous section, saw conditionals regulate flow computer program. Depending specific user actions, state program transits another state. first encounter code interactive program Stroop Task program, writing possible state transitions transition table helps understand structure program. transition table lists states table documents program transits one state another. empty transition table Stroop Task program shown .taking close look Stroop Task program transits one state another, transition table can filled . changing state part Stroop Task program displayed , together completed transition table Stroop Task program.transition state present_trial state wait_for_response occurs automatically preparations trial finished. Generally, distinguish two types transitions, interactive changes (ITC) automatic changes (ATC). input user required interactive state transitions, program changes one state another automatic transitions. generally good idea separate ITCs ATCs code make structure program apparent.Apart understanding another’s code, transition tables also useful conceive program. serve interaction skeleton gradually add functionality develop program.","code":"KEYS     = {\"red\": K_b,\n            \"green\": K_n,\n            \"blue\": K_m}\n            \n# Changing states\nfor event in pygame.event.get():                        \n    if STATE == \"welcome\":\n        if event.type == KEYDOWN and event.key == K_SPACE:\n            STATE = \"present_trial\"\n            print(STATE)\n                    \n    if STATE == \"present_trial\":\n        trial_number = trial_number + 1\n        this_word  = pick_color()\n        this_color = pick_color()\n        time_when_presented = time()\n        STATE = \"wait_for_response\"\n        print(STATE)\n                    \n    if STATE == \"wait_for_response\":\n        if event.type == KEYDOWN and event.key in KEYS.values():\n            time_when_reacted = time()\n            this_reaction_time = time_when_reacted - time_when_presented\n            this_correctness = (event.key == KEYS[this_color])\n            STATE = \"feedback\"\n            print(STATE)\n\n                \n    if STATE == \"feedback\":\n        if event.type == KEYDOWN and event.key == K_SPACE:\n            if trial_number < 20:\n                STATE = \"present_trial\"\n            else:\n                STATE = \"goodbye\"\n            print(STATE)\n            \n    if event.type == QUIT:\n        STATE = \"quit\""},{"path":"conditionals.html","id":"state-charts","chapter":"3 Conditionals","heading":"3.4.2 State charts","text":"State charts another tool representing interaction program. especially useful developing programs. State charts serve blueprint. depict basic structure program gradually add functionality. helps keep basic functionality sight developing. can easily get lost small, optional features basic structure program still unfinished. see state chart interaction Stroop Task program. States shown squares conditions diamonds. Arrows indicate flow program, labels give information state transition changes. Note state transition present_trial wait_for_response label. look code Stroop Task program, notice transition states automatic condition fulfilled.","code":""},{"path":"conditionals.html","id":"common-errors-1","chapter":"3 Conditionals","heading":"3.5 Common errors","text":"Confusing assignment operator (=) comparative equals operator (==).Yes, confusing assignment operator comparative equals operator re-occuring issue. human beings just easy type = actually mean == Python. psychologist, go figure.common syntax error involving conditionals probably forgetting colon end head statement.Whenever encounter syntax error conditionals, first check whether forgot colon.Exclusively using clauses chain conditionals. tricky one consequences may immediately apparent. Plus, error necessarily thrown. Still, program somehow expect . truth, exclusively using clauses wrong ; chances high intended use chain /elif clauses instead. Let’s take look following two code snippets illustrate difference chain clauses chain /elif clauses.can see, first code snippet, first True conditional branch executed, although 6 obviously divisible 2, also 3 6. second code snippet, however, True conditions executed consecutively. ?\nWell, first code snippet dealing one single statement conditional several subclauses ( elif else clauses), second code snippet strictly speaking consists three individual statements. three conditionals independent , executed independently . first code snippet read “modulo 2 equals 0 (saying ‘divisible 2’), print ; however, () divisible 2, look different True condition”. contrast, second code snippet reads “divisible 2, print . Full stop. divisible 3, print . Full stop. divisible 6, print , else print ”. chain clauses individual clauses disconnected, read summation individual clauses rather one coherent statement.may ask included Common errors section. , using exclusively clauses necessarily “wrong”. problem exclusively using clauses may job beginning programming career, source complex errors later stage. Remember use chains /elif/else clauses whenever want need make sure one True condition executed time.Another common error arises using tabs spaces interchangably indent code. honest, Python compiler may complain immediately mix tabs spaces. However, good reasons want anyway:Usually human reader even difficulty computer discerning block structures mixing tabs spaces. makes subsequent programming efforts quite error-prone activity. example, likely make indentation errors use tabs spaces carelessly. believe , Python compiler throw error !semantics tabs well defined computer world. result, tabs may displayed completely differently different types systems editors. means safely transfer code without risking destroy program’s structure.information indentation Python can found .","code":"a = 5\nif (a = 5):\n    print(\"Yes, a is indeed equal to 5!\")\nprint(\"Error: invalid syntax (<string>, line 2)\")## [1] \"Error: invalid syntax (<string>, line 2)\"if (1 == 1)\n    print(\"Hello, World!\")\nprint(\"Error: invalid syntax (<string>, line 2)\")## [1] \"Error: invalid syntax (<string>, line 2)\"if (1 == 1):\n    print(\"Hello, World!\")a = 6\nif (a % 2 == 0):\n    print(\"a is divisible by 2\")\nelif (a % 3 == 0):\n    print(\"a is divisible by 3\")\nelif (a % 6 == 0):\n    print(\"a is divisible by 6\")\nelse:\n    print(\"a is not divisible by 2, 3 or 6\")## a is divisible by 2a = 6\nif (a % 2 == 0):\n    print(\"a is divisible by 2\")## a is divisible by 2if (a % 3 == 0):\n    print(\"a is divisible by 3\")## a is divisible by 3if (a % 6 == 0):\n    print(\"a is divisible by 6\")\nelse:\n    print(\"a is not divisible by 2, 3 or 6\")## a is divisible by 6"},{"path":"conditionals.html","id":"debugging-1","chapter":"3 Conditionals","heading":"3.6 Debugging","text":"addition general good debugging practices summarized chapter Debugging, strategies especially useful dealing errors originating conditionals program., checking assignment = equals == operators good starting point encounter error suspect originate conditionals. Using assignment = operator equals == operator needed throw syntax error vice versa. busy checking assignment equals operators, also check whether forgot colons : end first line statements. also throw syntax error., checking assignment = equals == operators good starting point encounter error suspect originate conditionals. Using assignment = operator equals == operator needed throw syntax error vice versa. busy checking assignment equals operators, also check whether forgot colons : end first line statements. also throw syntax error.Take good look conditions statements. can check variety conditions interactively Python console outside program. Check whether Boolean expressions conditions indeed evaluate expect . immediately know True + 1 == False + 2 evaluates ? still check conditions evaluate hundred percent sure. countless reasons condition may evaluate intended. variables include condition may unexpected values subclauses condition may evaluate different order intended. take look variables use conditions assigned respective values. assigned unexpected values, look upwards program’s flow. Also check precedence operators use several rather single one conditions. Use brackets () enforce certain operator order, necessary.Take good look conditions statements. can check variety conditions interactively Python console outside program. Check whether Boolean expressions conditions indeed evaluate expect . immediately know True + 1 == False + 2 evaluates ? still check conditions evaluate hundred percent sure. countless reasons condition may evaluate intended. variables include condition may unexpected values subclauses condition may evaluate different order intended. take look variables use conditions assigned respective values. assigned unexpected values, look upwards program’s flow. Also check precedence operators use several rather single one conditions. Use brackets () enforce certain operator order, necessary.also consider simplifying conditionals. complex conditionals, prone making mistakes. Simplifying deeply nested conditionals can solve programming errors otherwise difficult track .also consider simplifying conditionals. complex conditionals, prone making mistakes. Simplifying deeply nested conditionals can solve programming errors otherwise difficult track .","code":""},{"path":"conditionals.html","id":"exercises-2","chapter":"3 Conditionals","heading":"3.7 Exercises","text":"","code":""},{"path":"conditionals.html","id":"exercise-1.-boolean-logic","chapter":"3 Conditionals","heading":"3.7.1 Exercise 1. Boolean logic","text":"output following code snippets?","code":"a = True\nb = False\n\nprint(a and b)a = True\nb = False\nprint(not a and b)a = True\nb = False\nprint((not a) or b)a = True\nb = False\n\nprint(not (a and b))a = True\nb = False\n\nprint(not (a or b))a = 1\nb = 2\nc = 4\n\nprint(a >= b and c > a + b)a = 1\nb = 2\nc = 3\n\nprint(b % a >= c - (a + b))"},{"path":"conditionals.html","id":"exercise-2.-state-charts","chapter":"3 Conditionals","heading":"3.7.2 Exercise 2. State charts","text":"state chart visualizes interaction program. code snippets matches state chart?","code":"# Variables\nSTATE = \"A\"\nnumber_of_trials = 0\n\nwhile True:\n  #ITC\n  for event in pygame.event.get():\n      if STATE == \"A\":\n          number_of_trials = number_of_trials + 1\n          if event.type==KEYDOWN and event.key == K_SPACE:\n              STATE = \"C\"\n      elif STATE == \"C\":\n          if event.type==KEYDOWN and event.key == K_A or event.key == K_D:\n              arrival_at_B = time()\n              STATE = \"B\"\n            \n  #ATC\n  if STATE == \"B\":\n      if time() - arrival_at_B > 3:\n          STATE = \"number_of_trials\"\n  elif STATE == \"number_of_trials\":\n      if number_of_trials < 15:\n          STATE = \"A\"\n      else:\n          pygame.quit()\n          sys.exit()# Variables\nSTATE = \"A\"\nnumber_of_trials = 0\n\nwhile True:\n  #ITC\n  for event in pygame.event.get():\n      if STATE == \"A\":\n          number_of_trials = number_of_trials + 1\n          if event.type==KEYDOWN and event.key == K_SPACE:\n              STATE = \"C\"\n      elif STATE == \"C\":\n          if event.type==KEYDOWN and event.key == K_A and event.key == K_D:\n              arrival_at_B = time()\n              STATE = \"B\"\n          else:\n              arrival_at_B = time()\n              STATE = \"B\"\n            \n  #ATC\n  if STATE == \"B\":\n      if time() - arrival_at_B > 3:\n          if number_of_trials < 15:\n              STATE = \"A\"\n          else:\n              pygame.quit()\n              sys.exit()# Variables\nSTATE = \"A\"\nnumber_of_trials = 0\n\nwhile True:\n  #ITC\n  for event in pygame.event.get():\n      if STATE == \"A\":\n          number_of_trials = number_of_trials + 1\n          if event.type==KEYDOWN and event.key == K_SPACE:\n              STATE = \"C\"\n      elif STATE == \"C\":\n          if event.type==KEYDOWN and event.key == K_A or event.key == K_D:\n              arrival_at_B = time()\n              STATE = \"B\"\n            \n  #ATC\n  if STATE == \"B\":\n      if time() - arrival_at_B > 3:\n          if number_of_trials < 15:\n              STATE = \"A\"\n          else:\n              pygame.quit()\n              sys.exit()"},{"path":"conditionals.html","id":"exercise-3.-transition-tables","chapter":"3 Conditionals","heading":"3.7.3 Exercise 3. Transition tables","text":"following code snippet, make transition table.","code":"STATE = \"A\"\n\nwhile True:\n    #ITC\n    for event in pygame.event.get():                        \n        if STATE == \"A\":\n            count = 0\n            if event.type == KEYDOWN and event.key == K_w:\n                STATE = \"B\"\n                print(STATE)\n        elif STATE == \"B\":\n            count = count + 1\n            if event.type == KEYDOWN and event.key == K_a:\n                timer = time()\n                STATE = \"C\"\n                print(STATE)\n        elif STATE == \"D\":\n            if event.type == KEYDOWN and event.key == K_SPACE:\n                if count < 10:\n                    STATE = \"B\"\n                else:\n                    STATE = \"quit\"\n                print(STATE)\n\n    #ATC\n    if STATE == \"C\":\n        present_picture()\n        if time() - timer > 3:\n            STATE = \"D\"\n        print(STATE)\n    elif STATE == \"quit\":\n        pygame.quit()\n        sys.exit()"},{"path":"conditionals.html","id":"exercise-4.-mini-programs","chapter":"3 Conditionals","heading":"3.7.4 Exercise 4. Mini programs","text":"output following mini programs?0NothingA TypeError, numerical Boolean values comparedx divisible 4x divisible 3x divisible 4x divisible 3A SyntaxError, need use brackets mix different operator types one conditionNothing2","code":"x = 5\ny = 0\n\nif x >= 5 and y != False:\n    print(y/x)\nx = 12\n\nif x%3 == 0:\n    print(\"x is divisible by 3\")\nelif x%4 == 0:\n    print(\"x is divisible by 4\")x = 2\ny = 0\n\nif y + 1 == x or not x * 1 <= y:\n   print(x + y)"},{"path":"conditionals.html","id":"exercise-5.-following-the-control-flow","chapter":"3 Conditionals","heading":"3.7.5 Exercise 5. Following the control flow","text":"Read following program code try follow control flow. Write content print statement. Check answers help python editor. Hint: spaces also add length string (measured len() method)!","code":"myString = \"Hello, World!\"\nif len(myString) >= 13 or \"ello\" in myString:\n    myString = \"Hi, programming aspirant!\"\nelif len(myString) <= 12 and \"ello\" in myString:\n    myString = \"Hello, from the other side.\"\nprint(myString)\n\nif \"Hi\" in myString:\n    if len(myString) < 25:\n        myString = \"Wow, my computer seems to answer!\"\n    elif len(myString) > 25:\n        myString = myString + \" -- Your computer\"\n    else:\n        myString = myString + \" How are you?\"\nelse:\n    if len(myString) <= 29:\n        myString = \"How are you, my computer?\"\n    elif len(myString) == 27 and \"Hello\" in myString:\n        myString = myString + \" I must have called a thousand times.\"\n    else:\n        myString = myString + \" -- Adele\"\nprint(myString)\n\nif \"computer\" in myString or len(myString) == 38 or \"HI\" in myString:\n    myString = myString + \" I myself am doing fine.\"\nelse:\n    myString = myString + \" I am doing just fine.\"\nprint(myString)"},{"path":"conditionals.html","id":"exercise-6.-indentation","chapter":"3 Conditionals","heading":"3.7.6 Exercise 6. Indentation","text":"Copy following piece code run . Correct indentation errors code runs error-free.","code":"a = 4\nif a < 20 and a > 0:\n    if a > 0 and a < 15:\n    a = a + 3\n    else:\n       a = a - 3\n        print(\"This is a dead end statement.\")\nelif a > 20:\nprint(\"This should only be printed if a exceeds 20!\")\nelse:\n    a = 17"},{"path":"conditionals.html","id":"exercise-7.-pseudo-code-conditionals","chapter":"3 Conditionals","heading":"3.7.7 Exercise 7. Pseudo code conditionals","text":"Translate following common language sentences pseudo code conditionals inIf rains tomorrow, take umbrella .Pseudo code programming language-independent informal simplified description essential operating principles computer program. adheres structural conventions normal programming language, rather meant human reader machine reading. Pseudo code commonly used sketching structure computer program actual code writing takes place. can find detailed description pseudo code examples written pseudo code .rain tomorrow, either go swimming, Jan time join , go hiking. Otherwise stay home read.condition participant 18 years older history alcohol abuse, may participate study.streets wet, chance high rained.participant turns eligible participate brief experiment. Otherwise kindly explain meet criteria participate. eligible participant assigned condition , lead room 001. assigned condition B, lead room 002.","code":"if rain\n    set umbrella to True"},{"path":"conditionals.html","id":"exercise-8.-modify-stroop-task","chapter":"3 Conditionals","heading":"3.7.8 Exercise 8. Modify Stroop Task","text":"Add conditional interactive Stroop experiment case participant’s reaction time exceeds 5 milliseconds, “Come , can faster!” printed screenHints:First think program need make changes print messageFirst think program need make changes print messageFormulate statement mutate existing statements fit needsFormulate statement mutate existing statements fit needsUse existing program code template drawing messageUse existing program code template drawing message","code":""},{"path":"conditionals.html","id":"exercise-9.-simplify-nested-conditionals","chapter":"3 Conditionals","heading":"3.7.9 Exercise 9. Simplify nested conditionals","text":"research project, want examine extent gender affects influence coffee person’s performance vigilance task. perform matching sampling. females grouped together, males form one condition.code represents decision tree matches candidate participant basis personal details either condition (females) condition B (males). addition, decision tree raises warning candidate meet least one requirements participation., code quite complex, including lot redundant lines unneccessary nested conditionals. First, read code carefully figure requirements candidate participant meet order participate study. , simplify code maintaining functionality.","code":"### participant details ###\nage = 20\ngender = \"Male\"\nstudy = \"Psychology\"\nspeaks_Dutch = True\ncoffee = True\ncondition = \"not eligible for the experiment\"\n\nif age >= 18:\n    \n    if gender == \"Female\":\n        if study == \"Communication Sciences\":\n            if speaks_Dutch == True:\n                if coffee == True:\n                    condition = \"A\"\n                elif coffee == False:\n                    print(\"Participant is not eligible to take part in the experiment.\")                   \n            elif speaks_Dutch == False:\n                print(\"Participant is not eligible to take part in the experiment.\")\n                \n        elif study == \"Psychology\":\n            if speaks_Dutch == True:\n                if coffee == True:\n                    condition = \"A\"\n                elif coffee == False:\n                    print(\"Participant is not eligible to take part in the experiment.\")                   \n            elif speaks_Dutch == False:\n                print(\"Participant is not eligible to take part in the experiment.\")\n        \n        elif study != \"Communication Sciences\" and study != \"Psychology\":\n             print(\"Participant is not eligible to take part in the experiment.\")\n                    \n    elif gender == \"Male\":\n        if study == \"Communication Sciences\":\n            if speaks_Dutch == True:\n                if coffee == True:\n                    condition = \"B\"\n                elif coffee == False:\n                    print(\"Participant is not eligible to take part in the experiment.\")                   \n            elif speaks_Dutch == False:\n                print(\"Participant is not eligible to take part in the experiment.\")\n                \n        elif study == \"Psychology\":\n            if speaks_Dutch == True:\n                if coffee == True:\n                    condition = \"B\"\n                elif coffee == False:\n                    print(\"Participant is not eligible to take part in the experiment.\")                   \n            elif speaks_Dutch == False:\n                print(\"Participant is not eligible to take part in the experiment.\")\n                \n        elif study != \"Communication Sciences\" and study != \"Psychology\":\n            print(\"Participant is not eligible to take part in the experiment.\")\nelse:\n    print(\"Participant is not eligible to take part in the experiment.\")"},{"path":"conditionals.html","id":"exercise-10.-flow-chart-conditionals","chapter":"3 Conditionals","heading":"3.7.10 Exercise 10. Flow chart conditionals","text":"Turn following flow chart python script run . Given initial value n -1, final value n?","code":""},{"path":"conditionals.html","id":"think-further-2","chapter":"3 Conditionals","heading":"3.8 Think Further","text":"complete list operator precedences Python feel free consult following summary: Official Python Documentation: 5.15 Operator precedenceFor alternative explanation contents chapter, consult Byte Python: Chapter 6. Operators Expressions Chapter 7. Control FlowFor detail Conditionals, Boolean algebra related topics, invited take look Think Like Computer Scientist: Learning Python 3: 5. Conditionals","code":""},{"path":"lists.html","id":"lists","chapter":"4 Lists","heading":"4 Lists","text":"chapter 2 Variables, encountered four basic data types Python programming language: integers, floats, Strings Booleans. also learned apart four basic data types, Python knows numerous specialized types. Now time encounter one group specialized data types: collections. learn three types collections, lists, tuples, dictionaries chapter. Together, make toolbox storing information computer program.","code":"message = [\"Hello,\"]\nmessage.append(\"world\")\nprint(\" \".join(message))## Hello, world"},{"path":"lists.html","id":"lists-1","chapter":"4 Lists","heading":"4.1 Lists","text":"Lists one type collection. easiest way creating list surrounding values cornered brackets [] separating values list commas ,. values make list called items elements. Lists can contain type value variable. follows lists can also contain lists! list contains another list called list lists, nested list (may also think phenomenon listception, ever watched Christopher Nolan’s Inception (2010)).special type list -called empty list. empty list list elements. Empty lists denoted [].sense, lists similar Strings. Strings basically ordered collections characters. example, word Hello ordered collection five characters: H,e, l, l, o.\ncontrast Strings, however, elements lists can type. Ordered collections strings lists also called sequences.Lists ordered collections values. However, list ordered nothing humans may inclinded order elements list. example, may want order list three elements \"\", \"B\", \"C\" according alphabetic order: = [\"\", \"B\", \"C\"]. However, lists, value element irrelevant position list. Lists ordered grasp underlying semantics elements according come order. fact, element values arbitrary list. Instead, lists called ordered allocate certain position memory element. list element occupies unique position memory. Elements list accessed querying list specified positions, -called indices. Accessing list specified index, value located position memory returned. index operator [] used access list elements specified indices, like soThe expression inside brackets index operator (case integers 0 1) specifies index -selected element. element inside list unique index, integer describing element’s position list. One major cause errors surrounding lists indices start 0, 1, might expect. , us feels natural start counting 1. can see , means first element list accessed indexing 0.indices start 0, instead 1? might already expect, computers store information memory. list serves pointer, reference memory location. expression list[] refers memory position -steps away starting element. means index used offset. first element list located exactly position list refers (means offset 0). Hence, first element list located index 0.","code":"a = [10, 5, 15, 25]\nb = [\"eggs\", \"bacon\", \"cheese\"]\nc = [4, \"hello\", 7.3, False]a = 2\nb = [a, 2*a]\nc = [b, 6]\nprint(c)## [[2, 4], 6]a = []a = [1, 2, 3]\nprint(a[0])## 1print(a[1])## 2a = [\"Hello\", \"World\", \"!\"]\nprint(a[0])## Helloprint(a[2])## !"},{"path":"lists.html","id":"lists-are-mutable","chapter":"4 Lists","heading":"4.1.1 Lists are mutable","text":"contrast Strings, lists mutable sequences. means even variable assigned list value, specific elements list can changed without reassigning completely new list! can use index operator mutate specific list items.Using index operator, can also access (change!) several elements time using -called list slices:indices around : colon indicate starting ending index selected list slice. Note list slice always include element located starting index, exclude element located ending index. include 2 second list slice thus need access [0:3], simplified [:3]. latter meaning “every element , excluding index 3”.Note statement [0:2] = d mutates elements, 1 \"\" single new item \"d\". means statement change elements , also ’s total number elements!starting ending index specified, : expression selects elements list can used cloning lists.watch , use index operator add new elements list. , need access new index, index yet claimed existing list element. Trying access index outside current range indices produce index range error.Luckily, ways adding elements list.append method adds specified element end given list. can use extend method add multiple values another list (type collection) list.Note difference appending list extending list another list.example, extending b causes elements stored b appended sequentially, constituting new element . contrast, whole list b regarded element b appended .\nlists mutable, can sequentially fill elements, one one. handy storing values generate throughout program.###word class specific functions\nnow, seen examples class-specific functions, append() lists join() strings. Even though detailed explanation functions (also called methods) postponed Chapter 6, quick introduction terminology objects, classes, class-specific functions help make lists collections. now, can see functions pieces reusable code specify input values.create variable assign value , say [4,5], can think creating object (.e. instance) Python class list. list class programmed developers Python language, built-Python class, integers strings. Classes blueprints, specification build certain objects. Engineers use blueprints build cars, buildings, bridges . Chefs use recipes put together meals. Python classes specify objects certain type programmed internally create one . class built-methods can used object created using class’ blueprint. basically whenever surround number values cornered brackets. create list according blueprint Python class list. useful list inherits functions blueprint. means without effort part lists variety functionality disposal. can immediately use range built-methods append() method.append() method adds value specified brackets end list. Typing help(list) console give complete list built-functions class list .take-home message excursion object-orientation? Well, make use built-class functions much can! provide tremendous amount functionality likely going need want, written neat code makes efficient use, !interested reader can find information Python classes .","code":"shoppinglist = [\"appels\", \"bananas\", \"tomatoes\"]\nshoppinglist[2] = \"peaches\"\nprint(\"Updated shopping list: \" + \", \".join(shoppinglist))## Updated shopping list: appels, bananas, peachesa = [1,2]\na[0] = 10\nprint(a)## [10, 2]a = [1, \"a\", 2, \"b\", 3, \"c\"]\nprint(a[1:4])## ['a', 2, 'b']print(a[0:2])## [1, 'a']a[0:2] = \"d\"\nprint(a)## ['d', 2, 'b', 3, 'c']a = [1, \"a\", 2, \"b\", 3, \"c\"]\naCopy = a[:]\nprint(aCopy)## [1, 'a', 2, 'b', 3, 'c']a = [1,2]\na[2] = 10## Error in py_call_impl(callable, dots$args, dots$keywords): IndexError: list assignment index out of range\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>print(a)## [1, 2]a = []\na.append(1)\nprint(a)## [1]a.append(2)\nprint(a)## [1, 2]a = [1,2]\nb = [3,4]\n\na.extend(b)\nprint(a)## [1, 2, 3, 4]a = [1,2]\nb = [3,4]\n\na.append(b)\nprint(a)## [1, 2, [3, 4]]a = [4,5]\na.append(6)\nprint(a)## [4, 5, 6]"},{"path":"lists.html","id":"tuples","chapter":"4 Lists","heading":"4.2 Tuples","text":"Much like lists, tuples ordered collections values, less exentensive functionality unique characteristic immutable. created tuple memory, change elements.Tuples usually used assume collection values change course program. records related information, chunked together can use single entity.\nStroop Task program instance, saw tuples used chunk together RGB combinations make color. Pygame module used tuples generate color Stroop Task.Tuples immutable. However, really need change contents already existing tuple, can always assign new value variable holds tuple value.Note trailing comma second line (\"Law recency\",). Without comma end parentheses, Python treats content one-element tuple (\"Law recency\") belonging data type element (case str). result, type error thrown try concatenate thorndike tuple (\"Law recency\").Python powerful tuple assignment feature allows tuple variable names left assignment operator = assigned tuple values, like soThe brackets () optional tuple assignment. Using tuple assignment, can easily perform several variable assignments just one line!","code":"thorndike = (\"Edward\", \"Lee\", \"Thorndike\", 1874, \"Law of effect\", \"Law of exercise\")\nthorndike[4] = \"Law of recency\"## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: 'tuple' object does not support item assignment\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>thorndike = (\"Edward\", \"Lee\", \"Thorndike\", 1874, \"Law of effect\", \"Law of exercise\")\nthorndike = thorndike[:] + (\"Law of recency\",)\nprint(thorndike)## ('Edward', 'Lee', 'Thorndike', 1874, 'Law of effect', 'Law of exercise', 'Law of recency')thorndike = (\"Edward\", \"Lee\", \"Thorndike\", 1874, \"Law of effect\", \"Law of exercise\")\nthorndike = thorndike[:] + (\"Law of recency\")## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: can only concatenate tuple (not \"str\") to tuple\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>thorndike = (\"Edward\", \"Lee\", \"Thorndike\", 1874)\n(name, middle_name, surname, born) = thorndike\nprint(name)## Edwarda, b = \"Hello\", \"World\"\nprint(a)## Hello"},{"path":"lists.html","id":"dictionaries","chapter":"4 Lists","heading":"4.3 Dictionaries","text":"Dictonaries share similarities real-life address books can find person’s contact details looking name.Dictionaries associate keys (e.g. name) values (e.g. contact details). key:value pairs dictionary separated commas. pair contains key value separated colon :. key:value pairs always one--one mappings. means map key several values, like soAs can see, first mapping key \"studyadviser-PSY\" \"studyadviser-psy[]utwente.nl\" overwritten second mapping key \"Cubicus, room C116\". total, address_book now contains single key:value pair. lists tuples, values arbitrary dictionaries. means map key several values, can map value multiple keys.Dictionaries require keys immutable unique. , two keys named \"studyadviser-PSY\" address_book. also means certain data types unsuitable dictionary keys, like lists.Whenever try use mutable object (like lists) key, TypeError thrown. lists mutable (can update elements), unhashable. Without going details hash functions , hash another representation object. transformation object’s length sequence bytes fixed length sequence. Hash functions used cryptographic algorithms, digital signatures, manipulation detection, password storage . Hash functions constructed calculating object’s hash representation simple, retrieving original object difficult without knowing function used hash object first place. can imagine things start get messy object can change hash calculated. hash momentary snapshot object. impossible retrieve “latest version” changable object hash representation, even know hash function. Dictionaries also mutable (thus, unhashable) used keys, way.Dictionaries unordered collections. Dictionaries sequential representation elements. Unlike sequences, lists tuples, elements dictionary accessed using indices. Values stored dictionary can accessed changed respective keys, like soApart updating existing dictionary entries, can obviously also add remove entries dictionary. Use del statement remove dictionary entries.","code":"address_book = {\"studyadviser-PSY\": \"studyadviser-psy[at]utwente.nl\",\n                \"studentservices\" : \"studentservices[at]utwente.nl\",\n                \"ICT-helpdesk\"   : \"servicedesk-ict[at]utwente.nl\"\n                }\n\nprint(address_book[\"studyadviser-PSY\"])## studyadviser-psy[at]utwente.nladdress_book = {\"studyadviser-PSY\": \"studyadviser-psy[at]utwente.nl\",\n                \"studyadviser-PSY\": \"Cubicus, room C116\"\n                }\n                \nprint(address_book[\"studyadviser-PSY\"])## Cubicus, room C116print(\"Number of key:value pairs in address_book: %d\" % len(address_book.keys()))## Number of key:value pairs in address_book: 1address_book = {\"studyadviser-PSY\": \"studyadviser-psy[at]utwente.nl\",\n                \"studyadviser-PSY_email\": \"studyadviser-psy[at]utwente.nl\"\n                }\n                \nprint(\"Number of key:value pairs in address_book: %d\" % len(address_book.keys()))## Number of key:value pairs in address_book: 2d = {['a']: 'b'}## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: unhashable type: 'list'\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>address_book = {\"studyadviser-PSY\": \"studyadviser-psy[at]utwente.nl\",\n                \"studentservices\" : \"studentservices[at]utwente.nl\",\n                \"ICT-helpdesk\"   : \"servicedesk-ict[at]utwente.nl\"\n                }\n                \naddress_book[\"studentservices\"] = (\"studentservices[at]utwente.nl\", \"0534892124\")\nprint(\"The telephone number of the student services is\", str(address_book[\"studentservices\"][1]))## The telephone number of the student services is 0534892124address_book = {\"studyadviser-PSY\": \"studyadviser-psy@utwente.nl \",\n                \"studentservices\" : \"studentservices@utwente.nl\",\n                \"ICT-helpdesk\"   : \"servicedesk-ict@utwente.nl\"\n                }\n                \naddress_book[\"studentUnion\"] = \"studentunion@union.utwente.nl\"\nprint(address_book)\n                ## {'studyadviser-PSY': 'studyadviser-psy@utwente.nl ', 'studentservices': 'studentservices@utwente.nl', 'ICT-helpdesk': 'servicedesk-ict@utwente.nl', 'studentUnion': 'studentunion@union.utwente.nl'}del address_book[\"ICT-helpdesk\"]\nprint(address_book)## {'studyadviser-PSY': 'studyadviser-psy@utwente.nl ', 'studentservices': 'studentservices@utwente.nl', 'studentUnion': 'studentunion@union.utwente.nl'}"},{"path":"lists.html","id":"putting-collections-to-use","chapter":"4 Lists","heading":"4.4 Putting collections to use","text":"Lists, tuples dictionaries readily used interactive programs, Stroop Task program. Collections help structure user input subsequent storage user input computer memory. Structuring user input makes later retrieval information easier. see code snippet Stroop Task program.Note variable RT used keep track user’s reaction times throughout trials. variable this_reaction_time overwritten trial. means, end program, trials completed, this_reaction_time contains last value assigned 20th trial. reaction times long erased computer memory. wait, want calculate user’s mean reaction time experiment finished? order , need way saving reaction times trial trial. need persist last trial completed. exactly collections step picture. Collections capable storing multiple values time can mutated iteratively (one reaction time per trial). Hence, append calculated reaction time list trial.end, programmer still need decide proceed collected reaction times. want print mean screen, export program, combine data gathered experimental subjects? . Using collections, least user’s reaction times disposal, even completed experiment.","code":"KEYS     = {\"red\": K_b,\n            \"green\": K_n,\n            \"blue\": K_m}\nRT = []\ntrial_number = 0    \n    \nwhile True:\n    pygame.display.get_surface().fill(BACKGR_COL)        \n\n    # Changing states\n    for event in pygame.event.get():                        \n        if STATE == \"welcome\":\n             if event.type == KEYDOWN and event.key == K_SPACE:\n                 STATE = \"present_trial\"\n                 print(STATE)\n                    \n        if STATE == \"present_trial\":\n             trial_number = trial_number + 1\n             this_word  = pick_color()\n             this_color = pick_color()\n             time_when_presented = time()\n             STATE = \"wait_for_response\"\n             print(STATE)\n                    \n        if STATE == \"wait_for_response\":\n            if event.type == KEYDOWN and event.key in KEYS.values():\n                time_when_reacted = time()\n                this_reaction_time = time_when_reacted - time_when_presented\n                RT.append(this_reaction_time)\n                this_correctness = (event.key == KEYS[this_color])\n                STATE = \"feedback\"\n                print(STATE)\n\n                \n        if STATE == \"feedback\":\n            if event.type == KEYDOWN and event.key == K_SPACE:\n                if trial_number < 20:\n                    STATE = \"present_trial\"\n                else:\n                    STATE = \"goodbye\"\n                print(STATE)\n            \n        if event.type == QUIT:\n            STATE = \"quit\""},{"path":"lists.html","id":"common-errors-2","chapter":"4 Lists","heading":"4.5 Common errors","text":"far occurring errors involving lists index range errors. think fair say make large amount programming errors. index range error thrown try access index exist sequence.usually encounter error result confusing starting index 0 1. intuition, list four elements, last element stored index 3, index 4. helps keep mind indices sequences always range one shorter number elements list. list four elements, positive index range 0 4 minus 1, thus 3.Another common mistake surrounding collections concerns immutability tuples. particular, trying change content tuple result TypeError. Tuples immutable, meaning change content initialization. can, however, re-assign variable name existing tuple new tuple containing different values.Concerning dictionaries, probably escape one another KeyError. KeyError thrown try access key exist dictionary.likely occur try use indices access entries dictionaryDictionaries unordered type collection encountered chapter. occurs now one assumes dictionary can treated common types collections, lists tuples.","code":"shoppinglist = [\"milk\", \"eggs\", \"bread\", \"appels\"]\nprint shoppinglist[4]## [1] \"Error: Missing parentheses in call to 'print'. Did you mean print(shoppinglist[4])? (<string>, line 2)\"shoppinglist = [\"milk\", \"eggs\", \"bread\", \"appels\"]\nprint(shoppinglist[3])## appelsa = (1,2,4)\nb[2] = 3## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: 'str' object does not support item assignment\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>a = (1,2,4)\nprint(a)## (1, 2, 4)b = (1,2,3)\nprint(b)## (1, 2, 3)d = {}\nprint(d['a'])## Error in py_call_impl(callable, dots$args, dots$keywords): KeyError: 'a'\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>d = {'a': 1}\nprint(d[0])## Error in py_call_impl(callable, dots$args, dots$keywords): KeyError: 0\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>"},{"path":"lists.html","id":"debugging-2","chapter":"4 Lists","heading":"4.6 Debugging","text":"tips tricks debug errors potentially originate collections.Regularly checking length collections can helpful confirm code indeed expect . Take example RT, list made keep track participant’s reaction times throughout Stroop Task program. end experiment, expect list contain 20 elements, given RT initialized empty list experiment 20 trials. checking length RT, can immediately see whether code indeed stored one reaction time per trial. RT length 20 experiment. can check length collection using len() method, like soDictionaries useful built-method represents keys list.comes handy keep getting KeyError convinced dictionary contain certain key.can use check whether candidate key among keys dictionaryIn case, typing error culprit. Instead '', '' whitespace set first key d.Alternatively, can use simple conditional constructions make sure overwrite existing keysFinally, know output list produced keys() method can confusing times. possible Python interpreter returns different list keys code snippet d.keys() produces another system. dictionaries stored internally computer memory. well hash functions utilized efficiency reasons. result, order keys dictionary unspecified (use index operator access elements dictionary). practice, means '' necessarily first element list produced d.keys(). Rest assured, practice, peculiarity rather insignificant.","code":"a = [3, 4]\nprint(len(a))## 2d = {'a': 1,\n     'b': 2}\n     \nprint(d.keys())## dict_keys(['a', 'b'])d = {'a ': 1,\n     'b': 2}\n     \nprint(d['a'])## Error in py_call_impl(callable, dots$args, dots$keywords): KeyError: 'a'\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>d = {'a ': 1,\n     'b': 2}\n     \nprint('a' in d.keys())## Falsed = {'a': 1,\n     'b': 2}\n\nif 'a' not in d.keys():\n    d['a'] = 0\n\nprint(d)## {'a': 1, 'b': 2}"},{"path":"lists.html","id":"exercises-3","chapter":"4 Lists","heading":"4.7 Exercises","text":"","code":""},{"path":"lists.html","id":"exercise-1.-indexing","chapter":"4 Lists","heading":"4.7.1 Exercise 1. Indexing","text":"output following code snippets?","code":"a = [6, 7]\nb = [4, 5]\nb.append(a)\n\nprint(b)d = {1: 'a',\n    'a': 1}\n    \nprint(d[1])a = [1]\nb = ('a', 2)\na.extend(b)\n\nprint(a[1])a, b = (['a', 'd'], ['b', 'c'])\n\nprint(b[0])a = [1, 2, 3]\n\nprint(a[-1])a = (1, 2, [3, 4], 5)\n\nprint(a[2][1])"},{"path":"lists.html","id":"exercise-2.-debugging","chapter":"4 Lists","heading":"4.7.2 Exercise 2. Debugging","text":"following code snippets throw error? anything goes wrong, go wrong?error thrown, bare assigned values 'Sigmund' 'Freud' respectively, (1856, 1939) persist computer memory.ValueError thrown. many values right side equals sign = unpack.NameError thrown. variables b assigned yet can therefore compared values.Nothing goes wrong, output 4 4 located index 3 b appended .TypeError thrown. b appended lists tuples elements.IndexError thrown. appending b, three elements. 3 valid index.TypeError thrown tuples immutable support item assignment.error thrown, 3 appended [1, 2].AttributeError thrown, tuples append method.error thrown, list keys contains one element, ('', 'b').TypeError thrown. Tuples hashed changable therefore unsuitable dictionary keys.error thrown. means tuple assignment, dictionary two keys, b.","code":"a, b = 'Sigmund', 'Freud', (1856, 1939)a = [1, 2]\nb = (3, 4)\n\na.append(b)\nprint(a[3])a = ('a', [1, 2])\n\na[1].append(3)a = {('a', 'b'): 3}\n\nprint(a.keys())"},{"path":"lists.html","id":"exercise-3.-mini-programs-1","chapter":"4 Lists","heading":"4.7.3 Exercise 3. Mini programs","text":"output following mini programs?[]0A KeyError empty keys.[1, 2]2[3, 4]TrueFalseA TypeError thrown operator used tuples.121 2","code":"a = {}\n\nprint(a.keys())a = []\nb = ([1, 2], [3, 4], [5, 6])\n\na.extend(b)\nprint(a[1])a = ('a', ('b', 'c'))\n\nprint('b' in a)a = [{'a': 1 }, {'a': 2}]\n\nif 'a' in a[0]:\n    print(a[0]['a'])\nelif 'a' in a[1]:\n    print(a[1]['a'])\n  "},{"path":"lists.html","id":"exercise-4.-shopping-list","chapter":"4 Lists","heading":"4.7.4 Exercise 4. Shopping list","text":"shopping list subject several changes since written. Standing supermarket, want know contents final shopping list. groceries buy?can check answer afterwards running code.","code":"shoppinglist = [\"bread\",\"cheese\",\"jam\",\"milk\",\"oatmeal\",\"blueberries\",\"oranges\",\"apples\"]\nshoppinglist[0] = \"buns\"\nshoppinglist = shoppinglist + [\"chocolate\"]\ndel shoppinglist[2]\n\nshoppinglist_mum = [\"eggs\",\"yoghurt\",\"potatoes\",\"salmon\"]\nshoppinglist += shoppinglist_mum\ndel shoppinglist[10]\n\ningredients_muffins = [\"icing sugar\",\"whipping cream\",\"lemons\",\"flower\",\"vanilla sugar\",\"eggs\",\"mandarines\",\"baking powder\",\"sugar\",\"margarine\"]\n\nshoppinglist.append(ingredients_muffins)\ndel shoppinglist[11][6]\nshoppinglist[8:11] = [shoppinglist[8:11]]\n\ndel ingredients_muffins[7]"},{"path":"lists.html","id":"exercise-5.-dictionaries","chapter":"4 Lists","heading":"4.7.5 Exercise 5. Dictionaries","text":"Using dictionary famous psychologists changes made dictionary:Try understand changes made original dictionary writing content following print statementsAfterwards, may check answers running code. Pay attention answers match exactly.","code":"famous_psychologists = {\"Freud\":(\"Sigmund\", \"Freud\", (1856,1939), \"Psychoanalysis\"),\n                        \"Piaget\":(\"Jean\", \"Piaget\", (1896,1980), \"Theory of Cognitive Development\"),\n                        \"Skinner\":((\"Burrhus\", \"Frederic\"), \"Skinner\", (1904,1990), \"Operant Conditioning\"),\n                        }\n                      \nerikson = (\"Erik\", \"Erikson\", (1902,1994), \"Theory of Psychological Development\")\nfamous_psychologists[\"Erikson\"] = erikson\n\nmore_on_Skinner = {\"Schedules of Reinforcement\":(\"positive reinforcement\", \"negative reinforcement\", \"extinction\"),\n                   \"Skinner Box\":(\"pigeon\",\"lever\",\"food\"),\n                  }\nfamous_psychologists[\"Skinner\"] = famous_psychologists[\"Skinner\"][:3] + (\"Behaviorism\",) +         (famous_psychologists[\"Skinner\"][3],) + (more_on_Skinner,)print(famous_psychologists[\"Erikson\"][:3])\nprint(famous_psychologists[\"Piaget\"][3:])\nprint(famous_psychologists[\"Freud\"][2][0])\nprint(famous_psychologists[\"Skinner\"][0][1])\nprint(famous_psychologists[\"Skinner\"][5].keys()[1])\n\nword = famous_psychologists[\"Skinner\"][5].keys()[0]\nprint(famous_psychologists[\"Skinner\"][5][word][0])"},{"path":"lists.html","id":"exercise-6.-element-selection","chapter":"4 Lists","heading":"4.7.6 Exercise 6. Element selection","text":"following data structures, give code can access specified element.milk shoppingListminced beef shoppingListThe study Jan gradesThe age Sophia gradesThe name participant 6 gradesJudith’s grade third partial exam gradesThe grade participant 5 first partial exam gradesThe maximum grade achieved second partial exam","code":"dinner = [\"minced beef\", \"tomatoes\", \"pasta\", \"onions\", \"pasta sauce\", \"courgette\"]\nshoppingList = [dinner, \"bread\", \"milk\", \"cornflakes\", \"cheese\"]grades = {\"p1\": (\"Judith\",21,\"female\",\"B-PSY\",(5.6,7.7,7.3)),\n          \"p2\": (\"Menno\",19,\"male\",\"B-CREATE\",(8.6,6.9,7.4)),\n          \"p3\": (\"Jan\",19,\"male\",\"B-CREATE\",(3.9,4.5,8.9)),\n          \"p4\": (\"Eva\",20,\"female\",\"B-MATH\",(8.0,7.0,9.1)),\n          \"p5\": (\"Sophia\",22,\"female\",\"M-PSY\",(4.9,6.7,7.6)),\n          \"p6\": (\"Jeroen\",25,\"male\",\"M-BME\",(8.5,8.5,8.5)),\n          \"p7\": (\"Max\",18,\"male\",\"B-IBA\",(7.9,2.0,6.5))\n         }"},{"path":"lists.html","id":"exercise-7.-adjust-a-dictionary-data-set","chapter":"4 Lists","heading":"4.7.7 Exercise 7. Adjust a dictionary data set","text":"data set originates (fictive) language course given University Twente. course, following information stored participants: age, gender, nationality, study programme, lesson, whether participant present (True indicates presence lesson False absence), paricipant’s score final exam.lecturer perform last minute changes data set handing statistical examination. Perform following changes data set accessing relevant elements.taking resit, participant 1 participant 7 pass course. Participant 1 scored 6.1 resit participant 7 7.4.Participant 5 forgot put age gender registration form. Participant 5 female 23 years old.docent forgot sign presence participant 4 two lessons. Participant 4 present lessons.course, participant 2 changed study programme B-Psychology B-Health Sciences.final examination, revealed participant 4 cheated exam. examination board decided void student’s achievements exam. case, additional note expelled added student’s record, indicating student’s misbehaviour.","code":"dataset = {'p1':[21,\"Female\",\"Dutch\",\"B-Psychology\",[True,False,True,False,False],5.2],\n           'p2':[20,\"Female\",\"Dutch\",\"B-Psychology\",[True,True,True,False,True],8.4],\n           'p3':[21,\"Female\",\"Dutch\",\"B-Applied_Mathematics\",[False,True,True,False,True],7.8],\n           'p4':[23,\"Male\", \"German\",\"B-Communication_Science\",[True,True,\"n/a\",\"n/a\",True],8.8],\n           'p5':[\"n/a\",\"n/a\",\"Dutch\",\"M-Business_Administration\",[False,False,True,True,True],7.6],\n           'p6':[19,\"Male\",\"Swedish\",\"B-Computer_Science\",[True,False,False,True,False],7.5],\n           'p7':[19,\"Male\",\"German\",\"B-Communication_Science\",[True,True,False,True,True],5.4]\n           }"},{"path":"lists.html","id":"exercise-8.-a-dictionary-data-set","chapter":"4 Lists","heading":"4.7.8 Exercise 8. A dictionary data set","text":"Fill participant information given table Python dictionary following structure:Using Python accessing relevant elements datasetCalculate average age participantsCalculate standard deviation age variableCalculate maximum minimum age variableHint: Libraries provide built-methods beyond repertoire standard Python language. instance, NumPy provides kinds methods statistical operations Python. can import library typing import (library name) make use library-specific methods like (library name).(method). Take look documentation NumPy library.","code":"participants = {participant_no:(gender, age, nationality, profession)}"},{"path":"lists.html","id":"exercise-9.-stroop-extension","chapter":"4 Lists","heading":"4.7.9 Exercise 9. Stroop extension","text":"exercise implement conditional execution interactive Stroop program. Imagine want examine whether number colors influences reaction time participants Stroop experiment. particular, gathered ten participants randomly assigned either three five word version Stroop task. table summarizes participant assigned condition.exercise, modified version Stroop task given. ch4ex6Stroop.py, rudimentary implementation user console input provided. two additional STATES, user enters participant number entered number stored rest program run. modified script function pickColor5(), implements random selection words colors five-color version.order implement comparative Stroop version program (three vs. five colors) program, consider following steps:Open ch4ex6Stroop.py scan changes original code. Try understand changes performed code.Incorporate information contained table condition assignment ten participants. data structure use storing information?Prepare code Stroop task versions, version three words, three colors, three buttons five-word version. Choose two additional colors.Think places program need adapted need adaptation depending condition.","code":""},{"path":"lists.html","id":"think-further-3","chapter":"4 Lists","heading":"4.8 Think further","text":"detailed information lists beyond scope chapter, advised take look Wentworth, P., Elkner, J., Downey, . B., & Meyer, C. (2015). think like computer scientist: Learning Python 3. Chapter 11. ListsFor information dictionaries, including explanation useful built-functions dictionary class, invited take look Wentworth, P., Elkner, J., Downey, . B., & Meyer, C. (2015). think like computer scientist: Learning Python 3. Chapter 20. dictionariesMore information tuples can found Wentworth, P., Elkner, J., Downey, . B., & Meyer, C. (2015). think like computer scientist: Learning Python 3. Chapter 9. Tuples","code":""},{"path":"loops.html","id":"loops","chapter":"5 Loops","heading":"5 Loops","text":"much unlike human beings, computers good executing repetitive tasks without making errors. just happens boring, repetitive tasks inescapable part many exciting things. Take psychological research example. conducting psychological research, may come theory human beings, things work humans, maybe human operator machine. , alternatively, may research question, question things work, human beings function, make mistakes make. Now, psychologists find answer scientific questions? Right, psychologists conduct empirical research.Let’s say, research question try answer question setting empirical experiment. invite others participate research. repeat experimental procedure every participant. Depending kind research conducted, repeat qualitative inspection generated data participant. depending statistical tool use, may end filling data every participant hand statistical software. Now, good news. Programming can help unbore (yes, word) boring repetitive bits exciting research.root boring tasks often lies repetition. repeat experimental procedure, repeat quality checks data participant, perform data cleaning single row data frame, . Human beings tend make mistakes repeat task . time, exactly strength computers lies. Computers make mistakes repeat task. computer makes mistake, falsely instructed first place.Chapter 5 introduces mechanism lies heart computer’s paramount strength, repetition; called computer jargon: loops. Python language number features make easier programmer make computer execute boring, repetitive tasks .","code":"for i in range(2):\n    print(\"Hello, World!\")## Hello, World!\n## Hello, World!"},{"path":"loops.html","id":"the-for-loop","chapter":"5 Loops","heading":"5.1 The for loop","text":"loop one possibility create repetition computer program. computer science, repeated execution set statements called iteration. loop iterates sequence objects. Remember chapter 4 Lists, lists strings sequences. ordered collections elements, strings sequences characters lists can contain kind object. mean loop iterate sequence? means visits element sequence one one, ordered fashion.Regarding syntax loops; loop begins keyword, followed -called loop variable. example , variable letter serves loop variable. keyword, encountered chapter 4 follows loop variable. sequence can (amongst things) list string included. Finally, colon : demarcates end statement. Semantically, statement example says nothing else butFor letter exists word “Hello”iteration loop, loop variable takes value next element sequence. means first iteration, loop variable letter value H, second iteration, value e, third iteration, value l, . loop variable ceases take new value assigned last element designated sequence, case theo \"Hello\".Syntactically, statement, -called loop body follows. body loop specifies statements executed iteration. example , printing current value loop variable letter executed iteration loop.body loop needs indented. end loop demarcated indentation. value last element sequence assigned loop variable, body loop executed, loop terminates. execution computer program continued first line loop body, indentation (rather lack thereof) demarcates line, like soHere, print(\"Hello\") constitutes first line loop.Instead including manually defined sequence statement, string \"Hello\", can use range method create list integers. example, may want repeat certain block statements twice. However, block statements may involve suitable sequence can make loop iterate. cases, can use range method create looping mechanism, like soUnless specified otherwise, range method initiates list contains integer starting 0 , excluding specified integer brackets ().example , loop variable thus two values loop terminates, 0 1. total, statement print(\"Hello, World\") therefore executed twice.Read documentation range method information customize sequence integers produces.summary, follows least two ways iterating ordered sequences objects, lists strings, using loops. first strategy, assign element sequence iteratively loop variable, like soFollowing second strategy, access elements sequence indices, like soWhich way iterating ordered sequences prefer . Sometimes, problem try solve code require one way, sometimes . However, constructing loops, remember access elements unordered collection dictionaries using index operator.need think another way iterate contents dictionary. use keys() method iterate dictionary’s keys, values() method values respectively, like soAlternatively, items() method can used iterate key-value pairs contained dictionary.usual, iteration strategy use depends try achieve. one golden solution fits problems.","code":"for letter in \"Hello\":\n    print(letter)## H\n## e\n## l\n## l\n## ofor letter in \"Hello\":\n    print(letter)\n\nprint(\"World\")for i in range(2):\n    print(\"Hello, World!\")## Hello, World!\n## Hello, World!print(range(2))## range(0, 2)help(range)a = ['a', 'b']\nfor i in a:\n    print(i)## a\n## bfor i in range(len(a)):\n    print(a[i])## a\n## bd = {'a': 1,\n     'b': 2}\nfor i in range(len(d)):\n    print(d[i])## Error in py_call_impl(callable, dots$args, dots$keywords): KeyError: 0\n## \n## Detailed traceback:\n##   File \"<string>\", line 2, in <module>for i in d.keys():\n    print(i)\n  ## a\n## bfor j in d.values():\n    print(j)## 1\n## 2for z in d.items():\n    print(z)## ('a', 1)\n## ('b', 2)"},{"path":"loops.html","id":"the-while-loop","chapter":"5 Loops","heading":"5.2 The while loop","text":"loop centered around condition formulated first line loop, statement. allows repeatedly execute number body statements long condition statement remains True. time, means body loop never executed loop condition False initial execution.strategy behind loops body loop changes one (loop) variables loop condition eventually becomes False. Otherwise, loop continue forever speak infinte loop. Infinite loops can manoeuver program dead end started unintentionally.Note basic structure Stroop Task program large loop. Unless required number trials executed user manually closes program, keep running matter .","code":"a = 0\nb = 1\n\nwhile b < 5:\n    a += b\n    b += b\n    print(\"Current sum is:\", a, \"current value is:\", b)## Current sum is: 1 current value is: 2\n## Current sum is: 3 current value is: 4\n## Current sum is: 7 current value is: 8print(\"This is the first line of code after the loop, the sum is:\", a)\n    ## This is the first line of code after the loop, the sum is: 7a = 0\nb = 5\n\nwhile b < 5:\n    a += b\n    b += b\n    print(\"Current sum is:\", a, \"current value is:\", b)\n\nprint(\"This is the first line of code after the loop, the sum is:\", a)## This is the first line of code after the loop, the sum is: 0"},{"path":"loops.html","id":"for-or-while","chapter":"5 Loops","heading":"5.2.1 for or while?","text":"times, may confusing whether either loop suit needs best. unsure kind loop use, ask following:know advance many times need loop body executed? Problems like “searching collection specified element” “executing code specified number times” suggest loop suit needs best.require computations stop condition met, tell advance () happen? Chances high loop fit needs best case.Still, programmer great freedom choosing either loops. many cases, using either kind loop difference perspective problem try solve code. cases, using one kind loop efficient using .","code":""},{"path":"loops.html","id":"the-break-statement","chapter":"5 Loops","heading":"5.3 The break statement","text":"break statement allows immediately exit loop, loop. next statement executed first line loop body. Interactive programs process user input often require exit loops prematurely. Depending input given, program may need transition next state terminate altogether.Also note usage String formatting. .format() method can applied String allows specify value variable substitutions within given String. detailed discussion formatters beyond scope current chapter, tutorial String formatting can found [] (https://www.digitalocean.com/community/tutorials/--use-string-formatters--python-3). String formatting highly useful, matter whether want export information program writing text Excel files, whether simply want print something console.basic idea behind String formatters substitute value, variable, expression want insert String curly brackets {}. specify --inserted value within method brackets, like soFormatters can manage multiple placeholders, variables perform cool transformations --substituted values, like roundingNotice usage positional arguments 0 1 specify order --substituted values n 25.7777 inserted String. Positional arguments specify index --inserted values within brackets format method., rounding achieved minor usage format code syntax, first specifies position transformation intended conversion {position:transformation}. case transform 25.7777 inhabiting index 1 floating point two decimals, thus format code syntax {1:.2f}. well exchanged two values, made much sense, now?Check tutorial information String formatters!","code":"myNumber = 17\nwhile True:\n    guess = input(\"Enter a number:\")\n    if guess > 17:\n        print(\"My number is smaller than {}\".format(guess))\n    elif guess < 17:\n        print(\"My number is greater than {}\".format(guess))\n    else:\n        break\nprint(\"Ding, ding! Correct, my number is {}\".format(myNumber))print(\"{} participants took part in the conducted research\".format(10))## 10 participants took part in the conducted researchn = 10\nprint(\"{0} participants took part in the conducted research. Their average score was {1:.2f}.\".format(n, 25.7777))## 10 participants took part in the conducted research. Their average score was 25.78.n = 10\nprint(\"{1:.2f} participants took part in the conducted research. Their average score was {0}.\".format(n, 25.7777))## 25.78 participants took part in the conducted research. Their average score was 10."},{"path":"loops.html","id":"controlling-the-flow-of-your-program-with-loops","chapter":"5 Loops","heading":"5.4 Controlling the flow of your program with loops","text":"now noticed default, Python faithfully executes program top-order. want change order specific parts program executed, possibly depending external conditions time day, input user?basic top-execution order can alterated using control flow statements. Python knows three control flow statements: ,, statements. already encountered statements Chapter 3 Conditionals. Control flow statements readily used interactive software Stroop Task experimentIn principle, code can run infinitely, unless user triggers QUIT event.type. Note original Stroop experiment, another condition prevents program running infinitely, namely maximum number trials.Within main loop, loop manages changing program states consequence user input. end, loop variable event iterates event objects stored event queue, essentially special sequence devised Pygame library. pygame.event module knowns number event types, among KEYDOWN event, referring event user presses key keyboard.example , several conditions fulfilled program state changes \"prepare next trial\": current program state \"welcome\", event KEYDOWNand key pressed SPACE. Note program , program termination can achieved time \"quit\" state.","code":"STATE = \"welcome\"\nwhile True:\n\n    # Changing states by user input\n    for event in pygame.event.get():\n        if STATE == \"welcome\":\n            if event.type == KEYDOWN and event.key == K_SPACE:\n                STATE = \"prepare_next_trial\"\n                print(STATE)\n        \n        if event.type == QUIT:\n                STATE = \"quit\""},{"path":"loops.html","id":"common-errors-3","chapter":"5 Loops","heading":"5.5 Common errors","text":"Easily common error surrounding loops trying make iterate integer instead sequence. often, want program modify elements given sequence according set statements. Logically, need many iterations elements sequence. often leads statement definitions :Probably, intention make loop repeat many times elements myList. However, len(myList) returns integer, sequence object! Instead, convert length myList sequence, instance using range().Alternatively, can assign values myList iteratively looping variable avoid working length sequence.wait, result seems slightly different. get alterated version myList element enhanced 1 (first example), order messed . exactly different strategy devised accessing element directly statement. Furthermore, index() method used find index first occurrence value specified within brackets. method returns index first occurence two strategies return different results case.opt either two looping strategies, keep mind may need go length get exact result using strategies. Usually, either one strategy quickly turns better, less complicated means end. example, instance used second list object obtain result first example, like soAgain, whether using second list viable option solve problem hand totally try achieve code.index range errors tend slip working loops.index range error thrown try access non-existing index sequence. example , two elements, thus two valid indices (0 1). b contrary three elements thereby three valid indices (0, 1 2). code snippet throws error third index accessed . Always make sure sequences iterate intend modify body loop right amount indices disposal.Letting loop run endlessly. Unless actively construct loop terminate, . can result sorts errors, usually notice program enter later states. construct loops, think well terminate . break statement can also option intentionally terminate loop another condition met defined statement, like soIn alteration guessing game, two ways make program terminate. First, guess number. Second, run trials. easiest way terminating loop response user input remains using break statement.","code":"myList = [1,2,3,4,5]\nfor i in len(myList):\n    myList[i] += 1## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: 'int' object is not iterable\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>myList = [5,2,3,4,5]\nfor i in range(len(myList)):\n    myList[i] += 1\n  \nprint(myList)## [6, 3, 4, 5, 6]myList = [5,2,3,4,5]\nfor i in myList:\n    myList[myList.index(i)] += 1\n\nprint(myList)\n    ## [6, 6, 3, 4, 5]myList = [5,2,3,4,5]\na = []\nfor i in myList:\n    a.append(i + 1)\n\nprint(a)## [6, 3, 4, 5, 6]a = [1, 'a']\nb = [1, 'a', 'b']\n\nfor i in range(len(b)):\n     a[i] = b[i]## Error in py_call_impl(callable, dots$args, dots$keywords): IndexError: list assignment index out of range\n## \n## Detailed traceback:\n##   File \"<string>\", line 2, in <module>i = 5\nmyNumber = 13\nwhile i > 0:\n    guess = input(\"Enter a number:\")\n    if guess == myNumber:\n        print(\"Ding, ding! Correct, my number is {}\".format(myNumber))\n        break\n    elif guess > myNumber:\n        i -= 1\n        print(\"My number is smaller than {}\".format(guess))\n        print(\"You may guess another {} times\".format(i))\n    elif guess < myNumber:\n        i -= 1\n        print(\"My number is greater than {}\".format(guess))\n        if i == 0:\n            print(\"Too bad, you lost\")\n        else:\n            print(\"You may guess another {} times\".format(i))"},{"path":"loops.html","id":"debugging-3","chapter":"5 Loops","heading":"5.6 Debugging","text":"Loops can (theory) continue infinite amount iterations. Imagine looping data set 1000 experimental participants. Loops large amount iterations may seem cumbersome debug first sight. Computers make mistakes falsely instructed make mistake , infinitely must. can imagine debugging loop runs hundreds thousands iterations pain time change small piece code need run iterations can inspect result change code. , break statement can used inspect output loop generates single, fixed amount iterations. , save time program need execute iteration program, output also less cluttered. Picture piece code produces one printed line iteration code, like soNow change small part code want inspect effect.unneccessary print one-liner thousand times see going . Instead, can use break statement print single line.comes handy suspect bug one loops. Remember bug loop, computer make mistake . identify bug one iteration small amount iterations, also present exact way remaining iterations. Usually, can resolve bugs loops based inspect subset iterations.","code":"for i in range(1000):\n  print(\"Hello, World!\")for i in range(1000):\n  print(\"Hello \" + \"World\" + \"!\")for i in range(1000):\n  print(\"Hello \" + \"World\" + \"!\")\n  break## Hello World!"},{"path":"loops.html","id":"exercises-4","chapter":"5 Loops","heading":"5.7 Exercises","text":"","code":""},{"path":"loops.html","id":"exercise-1.-following-the-control-flow-i","chapter":"5 Loops","heading":"5.7.1 Exercise 1. Following the control flow I","text":"output following code snippets?","code":"for i in range(len([1,2,3])):\n    print(i)for i in range(len([])):\n    print(i)a = 0\nfor i in range(3):\n    a += i\n    print(a + i)a = 0\nb = 30\nfor i in range(5):\n    a += i\n    b -= i\n    \nprint(a + b)for i in range(1,3):\n    print(i)i = 10\nwhile i > 5:\n    print(i - 5)\n    i -= 2a = 2\nb = (1,2)\n\nwhile a != 0:\n    for i in b:\n        print(a + i)\n    a -= 1"},{"path":"loops.html","id":"exercise-2.-debugging-i","chapter":"5 Loops","heading":"5.7.2 Exercise 2. Debugging I","text":"following code snippets throw error? , goes wrong? exercise, one answer correct.error thrown, code snippet prints 4 first iteration, 6, finally 8.error thwon, code snippet prints 0 first iteration, 1 finally 2.TypeError thrown statement include sequence iterate .Nothing goes wrong, user guesses 43, Ding, ding! Correct, number 43 printed program terminates.error thrown, user guesses 43, Ding, ding! Correct, number 43 printed, program terminate.IndexError thrown positioning argument curly brackets one value provided substitution case using indexing wrong.TypeError thrown first statement involving looping variable include sequence iterate .error thrown, output mini program 0, 6.0, 0, 9.0 element multiplied element b.NameError thrown undefined variable body second loop starts j range(len(b)).error thrown, output mini program 0, 0, 0, 1.5 index multiplied element b.","code":"a = [4,6,8]\n\nfor i in len(a):\n    print(a[i])myNumber = 43\nwhile True:\n    guess = input(\"Enter a number:\")\n    if guess > 43:\n        print(\"My number is smaller than {0}\".format(guess))\n    elif guess < 43:\n        print(\"My number is greater than {0}\".format(guess))\n    else:\n        print(\"Ding, ding! Correct, my number is {0}\".format(myNumber))a = [4,6]\nb = [0, 1.5]\nfor i in a:\n    for j in range(len(b)):\n        print(i * b[j])"},{"path":"loops.html","id":"exercise-3.-a-guessing-game","chapter":"5 Loops","heading":"5.7.3 Exercise 3. A guessing game","text":"Make Python script guessing.py implements following behaviour:beginning script, random number 0 1000 generated.program continuously asks user input prompting user request enter number.user guesses number correctly, program gives feedback number guessed correctly. program also shows number guesses needed. Finally, program terminates.guessed number large, program gives feedback number smaller.guessed number small, program gives feedback number larger.input given, program terminate. case, program terminate given input empty. Hint: Use internet figure handle empty input.Hint: Prompting feedback via console sufficient.","code":""},{"path":"loops.html","id":"exercise-4.-controlling-the-flow","chapter":"5 Loops","heading":"5.7.4 Exercise 4. Controlling the flow","text":"Programming small interactive programs guessing game helps understand use control flow statements bring desired behaviour programs. exercise, programming extension guessing game, three digit number lock!","code":""},{"path":"loops.html","id":"exercise-5.-following-the-control-flow-ii","chapter":"5 Loops","heading":"5.7.5 Exercise 5. Following the control flow II","text":"Read script carefully. Indicate values following expressions script finished executing:can check answers afterwards running script.","code":"dataset.keys()\ndataset[dataset.keys()[0]]\ncondA[0]\ncondA[0][0]\nlen(condA)\nlen(condB)\nmeanA\nmeanBimport numpy as np\n\ndataset = {'p1':(21,\"Female\",\"Dutch\",\"B-Psychology\"),\n           'p2':(20,\"Female\",\"Dutch\",\"B-Psychology\"),\n           'p3':(21,\"Female\",\"Dutch\",\"B-Applied_Mathematics\"),\n           'p4':(23,\"Male\", \"German\",\"B-Communication_Science\"),\n           'p5':(20,\"n/a\",\"Dutch\",\"M-Business_Administration\"),\n           'p6':(19,\"Male\",\"Swedish\",\"B-Computer_Science\"),\n           'p7':(19,\"Male\",\"German\",\"B-Communication_Science\"),\n           'p8':(24,\"Female\",\"Italian\",\"M-Psychology\"),\n           'p9':(23,\"Female\",\"Italian\",\"M-Communication_Science\"),\n           'p10':(18,\"Male\",\"Dutch\",\"B-Computer_Science\")\n           }\n\ncondA = []\ncondB = []\n\nageA = []\nageB = []\n\nfor participant in dataset.keys():\n    if dataset[participant][1] == \"Female\":\n        condA.append(dataset[participant])\n    elif dataset[participant][1] == \"Male\":\n        condB.append(dataset[participant])\n\nfor participant in condA:\n    ageA.append(participant[0])\n\ncount = 0\nwhile count < len(condB):\n    ageB.append(condB[count][0])\n    count += 1\n    \nmeanA = np.mean(ageA)\nmeanB = np.mean(ageB)"},{"path":"loops.html","id":"exercise-6.-debugging-ii","chapter":"5 Loops","heading":"5.7.6 Exercise 6. Debugging II","text":"script calculates descriptives data. code still somewhat buggy. Debug script indicate values fastest, slowest, all_mean.","code":"data = {'p1':(21,\"Female\",\"Condition B\",[0.675,0.777,0.778,0.62,0.869]),\n        'p2':(20,\"Female\",\"Condition A\",[0.599,0.674,0.698,0.569,0.7]),\n        'p3':(21,\"Female\",\"Condition A\",[0.655,0.645,0.633,0.788,0.866]),\n        'p4':(23,\"Male\", \"Condition A\",[0.721,0.701,0.743,0.682,0.654]),\n        'p5':(20,\"Male\",\"Condition B\",[0.721,0.701,0.743,0.682,0.654]),\n        'p6':(19,\"Male\",\"Condition B\",[0.711,0.534,0.637,0.702,0.633]),\n        'p7':(19,\"Male\",\"Condition B\",[0.687,0.657,0.766,0.788,0.621]),\n        'p8':(24,\"Female\",\"Condition A\",[0.666,0.591,0.607,0.704,0.59]),\n        'p9':(23,\"Female\",\"Condition B\",[0.728,0.544,0.671,0.689,0.644]),\n        'p10':(18,\"Male\",\"Condition A\",[0.788,0.599,0.621,0.599,0.623])\n        }\n\nfastest = (\"initialization\", 100)\nfor participant in data:\n    RTsum = 0\n    for i in len(data[participant][3]):\n        RTsum += data[participant][3][i]\n    RTmean = RTsum/len(data[participant][3])\n    if RTmean < fastest[1]:\n        fastest = (participant,RTmean)\n        \nslowest = (\"initialization\", 0)\nfor participant in data:\n    RTsum = 0\n    for RT in participant[3]:\n        RTsum += RT\n    RTmean = RTsum/len(data[participant][3])\n    if RTmean > slowest[1]:\n        slowest = (participant,RTmean)\n        \nall_mean = 0\nall_sum = 0\nnumber_of_trials = 0\nfor participant in data:\n    counter = 0\n    while counter < len(data[participant][3]):\n        all_sum += data[participant][3][counter]\nall_mean = all_sum/number_of_trials*len(data)"},{"path":"loops.html","id":"exercise-7.-nested-loops","chapter":"5 Loops","heading":"5.7.7 Exercise 7. Nested loops","text":"Nested data often requires nested loops answering certain questions data. Let’s look list data set . participant participant number paired list additional experiment information.want know many participants withdrew participation need counter, participant need second loop tests experiment information turn \"withdrew\" keyword:Implement second loop iterates experiment information count number participants withdrew participation.","code":"participants = [\n    (\"p1\", [\"Condition 1\",\"Location A\",\"withdrew\",\"no audio\"]),\n    (\"p2\", [\"Condition 1\",\"Location A\",\"no audio\",\"no video\"]),\n    (\"p3\", [\"Condition 2\",\"Location B\"]),\n    (\"p4\", [\"Condition 1\",\"Location A\",\"withdrew\"]),\n    (\"p5\", [\"Condition 2\",\"Location A\"]),\n    (\"p6\", [\"Condition 2\",\"Location B\",\"withdrew\"]),\n    (\"p7\", [\"Condition 1\",\"Location A\",\"no video\"]),\n    (\"p8\", [\"Condition 1\",\"Location B\"]),\n    (\"p9\", [\"Condition 2\",\"Location B\",\"withdrew\"]),\n    (\"p10\",[\"Condition 2\",\"Location A\",\"withdrew\"])]counter = 0\nfor (participant, expInfo) in participants:\n  pass\n        # to be implemented by you\n        \nprint(\"The number of participants who withdrew their participation is\", counter)"},{"path":"loops.html","id":"exercise-8.-data-transformation-using-loops","chapter":"5 Loops","heading":"5.7.8 Exercise 8. Data transformation using loops","text":"Write script transforms data set participants Exercise 3 dictonary data set.Extend script counter mechanism counts number participants tested location location B respectively.","code":""},{"path":"loops.html","id":"exercise-9.-calculating-a-mean","chapter":"5 Loops","heading":"5.7.9 Exercise 9. Calculating a mean","text":"sequence seq calculate arithmetic mean using loop. Check implementation using mean() method NumPy library.","code":"import numpy as np\n\nseq = range(1000)"},{"path":"loops.html","id":"think-further-4","chapter":"5 Loops","heading":"5.8 Think Further","text":"Tutorial String formatting. [Lisa Tagliaferri (2016). Use String Formatters Python 3] (https://www.digitalocean.com/community/tutorials/--use-string-formatters--python-3) Though heading says ‘Python 3’, Lisa discusses tutorial also applies Python 2.7.","code":""},{"path":"functions.html","id":"functions","chapter":"6 Functions","heading":"6 Functions","text":"Functions reusable pieces code. giving block statements name, functions allow make use block anywhere program many times want. can use block statements without write actual code contained block. makes code lot easier read eliminates great deal repetitive code. want make change later, one place. already seen used many built-functions Python, len() range(). chapter, learn define call functions.","code":"def hello(repetitions):\n    for i in range(repetitions):\n        print(\"Hello, World!\")\n\nhello(2)## Hello, World!\n## Hello, World!"},{"path":"functions.html","id":"defining-and-calling-functions","chapter":"6 Functions","heading":"6.1 Defining and calling functions","text":"can use function, defined program.syntax defining function includes def keyword, identifier name function (echo), followed parentheses may optionally enclose one multiple function parameters (text example). Finally, colon : demarcates end definition statement. body function may include number statements indented def statement.Functions enable us organize programs chunks; code chunks well mental chunks. Programs goals, usually propose solution given problem. Just real-life goals problem solving, subdividing task hand smaller subgoals helps us organize approach.Defining function make function run. run function, need call .Function calls consist name function, function takes one arguments, values included parentheses following function name.","code":"def echo(text):\n    print(text)def echo(text):\n    print(text)\necho(\"Hello there, programming aspirant!\")## Hello there, programming aspirant!"},{"path":"functions.html","id":"function-parameters-and-arguments","chapter":"6 Functions","heading":"6.2 Function parameters and arguments","text":"calling function takes parameters supply function values function can use something. Parameters specified within parentheses function definition. Multiple parameters separated commas. Mind terminology, names given values function definition called parameters values supply function called arguments.can think parameters variables exist function. default, values assigned call function cease exist function finished running. sole purpose serve internal computations within function.Another way saying variables inside functions local. Local variables way related variables outside function.example, scope variable x within myFunction(x) local, whereas scope x outside function said global.","code":"x = 100\n\ndef myFunction(x):\n    x += 50\n    print(\"Local x equals:\", x)\n    \nprint(\"Global x equals:\", x)## Global x equals: 100myFunction(0)## Local x equals: 50"},{"path":"functions.html","id":"the-return-statement","chapter":"6 Functions","heading":"6.3 The return statement","text":"want use value assigned variable manipulated within function somewhere else program? Let’s make changes myFunction(x) function returns value can used outside myFunction(x).return statement enables us retrieve one values function. returning multiple values, Python makes use tuple assignment. Make sure provide enough variables left side assignment operator unpack returned tuple. Consult Chapter 4 revision tuples tuple assignment, take quick look Think Like Computer Scientist: Tuple Assignment.understand example code , helps realize function definitions affect flow execution program. Remember default, Python faithfully executes program top-fashion. Function definitions need precede function calls, function’s statements executed function called.function called, execution flow program takes detour. Instead proceeding next program line, jumps first line called function, executes function statements top-order, jumps back left .","code":"def myFunction(x):\n    x += 50\n    print(\"Local x equals:\", x)\n    return x\n\nx = 100\nprint(\"Global x equals:\", x)## Global x equals: 100x = myFunction(0)## Local x equals: 50print(\"After function call, global x equals:\", x)## After function call, global x equals: 50def echo(text=\"This is some random text made for the purpose of interruption\"):\n    print(text)\n    \nprint (\"Hi there, \")## Hi there,echo()## This is some random text made for the purpose of interruptionprint(\"how are you?\")## how are you?"},{"path":"functions.html","id":"functions-can-call-other-functions-and-themselves","chapter":"6 Functions","heading":"6.4 Functions can call other functions, and themselves","text":"sounds simple enough, becomes slightly complex functions call one another, even .Note implementation average calls function summation calculate sum items list given argument (alist) function call average. executing return statement average, summation called program’s flow execution jumps first line summation. statements contained summation completed, flow execution jumps back took replaces expression summation(alist) value returned function call summation (case, 10.0).’s morale detour? reading trying understand program, simply read top bottom. Instead, follow flow execution understand going .","code":"def summation(alist):\n    sum = 0.0\n    for i in range(len(alist)):\n        sum += alist[i]\n    print(\"Sum of the list is:\", sum)\n    return sum\n\ndef average(alist):\n    return summation(alist)/len(alist)\n    \nprint(average([1,2,3,4]))## Sum of the list is: 10.0\n## 2.5"},{"path":"functions.html","id":"a-word-about-recursion","chapter":"6 Functions","heading":"6.4.1 A word about Recursion","text":"Functions can call functions, including . function calling said take recursive approach problem solving. Recursion method involving subdivision problem smaller smaller subproblems subproblem small enough obtained can solved easily.already know calculate sum list numbers using loops. Let’s pretend moment loops Python. approach calculating sum list numbers ?topic Recursion beyond scope book, interested reader invited take look Problem Solving Algorithms Data Structures: Chapter 4. Recursion, Brad Miller David Ranum (2011). particular, Section 4.3. Calculating Sum List Numbers adresses calculation sum list numbers taking recursive approach. Recursion powerful technique enables solutions problems otherwise difficult express code.","code":""},{"path":"functions.html","id":"stroop-functions","chapter":"6 Functions","heading":"6.5 Stroop functions","text":"","code":""},{"path":"functions.html","id":"common-errors-4","chapter":"6 Functions","heading":"6.6 Common errors","text":"Trying use local variables globally. Remember function parameter variable declared within function statement local, meaning accessed outside function.Forgetting return value end function definition. truth, functions necessarily return values, depending purpose function. Functions return one value(s) called fruitful functions, return statement called void functions. However, now tend forget return values want use outside function. Consider example .Instead assigned maximum value contained [2,4,6,8] m, m apparently became None, whatever . Let’s examine None .accidentally created object type NoneType forgetting return m function definition maximum. see , can raise errors somewhere else code, whose cause can tricky trace back complex programs. Therefore, always make sure double check whether functions return values need outside function.Forgetting assign value returned function.average mylist obviously 0. However, forgot assign value function average returns variable (case variable ). , calculated average value lost memory variable keeps initial value, 0.Disregarding tuple assignment function returns several values. Keep eye assign multiple return values. handled carelessly, can easily become source errors remainder program.Note first variant returns tuple return values elements, second variant assigns return value separately variable name.Providing wrong number arguments function call.Providing wrong data type function argument. body function written assuming provide intended data type argument function call. software engineering, every piece new code intensively checked help -called unit tests going production. Amongst things, unit tests include type checks data input output format self-built functions. minimizes chance new piece code crashes rest program. Unit tests beyond scope introductory book, probably encounter one another instance accidentally provide wrong data type function. Providing value unintended data type can raise kinds follow-errors.","code":"def average(alist):\n    s = sum(alist)\n    return s/float(len(alist))\n    \nm = average([1,2,3,4])\nprint(s)## Error in py_call_impl(callable, dots$args, dots$keywords): NameError: name 's' is not defined\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>def maximum(alist):\n    if len(alist) == 1:\n        return alist[0]\n    elif len(alist) != 0 and len(alist) > 1:\n        m = 0\n        for i in range(len(alist)):\n            if alist[i] > m:\n                m = alist[i]\n\nm = maximum([2,4,6,8,10])\nprint(\"m equals:\", m)\n        ## m equals: Nonetype(m)## <class 'NoneType'>print(m + 1)## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\ndef average(alist):\n    s = sum(alist)\n    return s/float(len(alist))\n\na = 0\nmylist = [1,2,3,4]\naverage(mylist)## 2.5print(\"average of mylist is:\", a)## average of mylist is: 0def sumAverage(alist):\n    s = sum(alist)\n    return s, s/float(len(alist))\n\nresult = sumAverage([1,2,3,4])\ns, av = sumAverage([1,2,3,4])\n\nprint(\"result equals\", result)## result equals (10, 2.5)print(\"s equals\", s, \", av equals\", av)## s equals 10 , av equals 2.5def average(alist):\n    s = sum(alist)\n    return s/float(len(alist))\n\naverage([1,2],[3,4])## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: average() takes 1 positional argument but 2 were given\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>def average(alist):\n    s = sum(alist)\n    return s/float(len(alist))\n\naverage(True)## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: 'bool' object is not iterable\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\n##   File \"<string>\", line 2, in averageaverage(\"Hello\")## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: unsupported operand type(s) for +: 'int' and 'str'\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\n##   File \"<string>\", line 2, in average"},{"path":"functions.html","id":"exercises-5","chapter":"6 Functions","heading":"6.7 Exercises","text":"","code":""},{"path":"functions.html","id":"exercise-1.-following-the-control-flow","chapter":"6 Functions","heading":"6.7.1 Exercise 1. Following the control flow","text":"Read following script carefully. Try follow flow execution. Indicate values x,y anumber program finished executing. may use calculator perform calculations.\ncan check answers afterwards running script.","code":"def mean(numbers):\n    return float(sum(numbers))/max(len(numbers),1)\n    \ndef sumMean(myList):\n    return sum(myList), mean(myList)\n\ndef add(anumber,to_add):\n    return anumber + to_add\n\ndef main():\n    x = 0\n    y = 0\n    anumber = 0\n    myList = range(11)\n\n    x = add(x,37 + mean(myList))\n    \n    if x > 44:\n        x, y = sumMean(myList)\n    else:\n        x, y = sumMean([1,2,3,4])\n        \n    y += add(x,5)\n    anumber += add(y,5)\n    \n    if y > 50:\n        y = mean([x,y])\n    else:\n        anumber = mean([x,max(myList)])\n    \n    print(\"x equals\", x)\n    print(\"y equals\", y)\n    print(\"anumber equals\", anumber)\n        \nmain()"},{"path":"functions.html","id":"exercise-2.-an-imperfect-list-sorting-attempt","chapter":"6 Functions","heading":"6.7.2 Exercise 2. An imperfect list sorting attempt","text":"Given following instructionsTake two lists myList1 = [5,2,1,3,0] myList2 = [9,7,8] implement algorithm sorts ascending order sorted list containing integers 0 10 obtained.Fill missing numbers applicable.fellow student made attempt sorting lists. order , \ndefined two helper functions, insert swap. attempt followed approach first bringing lists correct order separately combining .Unfortunately, attempt still contains number errors. Find errors describe words goes wrong. Hint: six errors code.","code":"import copy\n\n# Insert an element at a given position in a list\ndef insert(a,position,alist):\n  result = copy.deepcopy(alist)\n  result = result[:position] + [a] + result[position:]\n\n# Swap the position of two elements a and b in a list\ndef swap(a,b,alist):\n  index_a, index_b = alist.index(a), alist.index(b)\n  index_a, index_b = index_b, index_a\n  result = copy.deepcopy(alist)\n  result[index_a], result[index_b] = a,b\n  return result\n\nmyList1 = [5,2,1,3,0]\nmyList2 = [9,7,8]\n   \n# sorting myList1\nswap(5,0,myList1)\nswap(2,1,myList1)\nmyList1 = insert(4,myList1)\n    \n#sorting myList2\nmyList2 = swap(myList2,8,9,7,8)\nmyList2 = insert(10,3,myList2)\n   \nresult = myList1 + myList2\nprint(result)"},{"path":"functions.html","id":"exercise-3.-an-erroneous-sorting-algorithm","chapter":"6 Functions","heading":"6.7.3 Exercise 3. An erroneous sorting algorithm","text":"Instead sorting list manually exercise 2 may figure quite labour intensive (especially amount data large allow manual sorting), people come number efficient sorting algorithms. essence, algorithms functions take unsorted list input, perform number internal manipulations return sorted list. find (erroneous) implementation bubble sort. main idea bubble sort iteratively going list exchanging position adjacent elements order.Feel free take look Problem Solving Algorithms Data Structures: Chapter 5. Sorting Searching, 5.7: Bubble Sort detailed description bubble sort approach.Correct errors implementation bubble sort script runs error-free. implementation makes use swap helper function first encountered exercise 2. errors swap function.","code":"import copy\nimport random\n\ndef swap(a,b,alist):\n    index_a, index_b = alist.index(a), alist.index(b)\n    index_a, index_b = index_b, index_a\n    result = copy.deepcopy(alist)\n    result[index_a], result[index_b] = a,b\n    return result\n\ndef bubbleSort(alist):\n    result = copy.deepcopy(alist)\n    for iteration in len(result):\n        for index in range(len(result)-1,0,-1):\n            if result[index] > result[index-1]:\n                result = swap(result[index],result[index-1])\n    return result\n\nmyList = range(51)\nrandom.shuffle(myList)\nprint(myList)\nprint(bubbleSort(myList))"},{"path":"functions.html","id":"exercise-4.-chunking","chapter":"6 Functions","heading":"6.7.4 Exercise 4. Chunking","text":"","code":""},{"path":"functions.html","id":"exercise-5.-add-functionality-to-the-stroop-task","chapter":"6 Functions","heading":"6.7.5 Exercise 5. Add functionality to the stroop task","text":"","code":""},{"path":"functions.html","id":"exercise-6.-insertion-sort-algorithm","chapter":"6 Functions","heading":"6.7.6 Exercise 6. Insertion sort algorithm","text":"exercise 3, encountered one infamous sorting algorithms known programming community: bubble sort. , however, efficient sorting algorithms. exercise, take sorting skills next level implement insertion sort.Problem Solving Algorithms Data Structures: Chapter 5. Sorting Searching, 5.9: Insertion Sort explains insertion sort approach excellently. main idea behind insertion sort builds sorted sublist left part unsorted list continuously updates list comparing designated element unsorted list element sublist.chapter insertion sort Miller Ranum includes sample implementation algorithm. , however, strongly advised build algorithm understand happens step.therefore required add elaborate documentation code (form comments explaining step). Elaborate means read back code month later, still able explain insertion sort works., way, nice graphical illustration insertion algorithm Wikipedia page. may help get grasp algorithm works.","code":""},{"path":"functions.html","id":"think-further-5","chapter":"6 Functions","heading":"6.8 Think further","text":"alternative approach explaining functions Python additional information, invited take look following resources:Wentworth, P., Elkner, J., Downey, . B., & Meyer, C. (2015). think like computer scientist: Learning Python 3. Chapter 4. FunctionsTutorials Point India Private Limited Company: Python Basic Tutorial - FunctionsHarrington, . N. (2017). Hands-Python Tutorial: 1.11 Defining Functions ","code":""},{"path":"functions.html","id":"references","chapter":"6 Functions","heading":"6.9 References","text":"Miller, B. N., & Ranum, D. L. (2011). Problem Solving Algorithms Data Structures Using Python SECOND EDITION. Franklin, Beedle & Associates Inc..","code":""},{"path":"data.html","id":"data","chapter":"7 Working with data","heading":"7 Working with data","text":"","code":"\nknitr::opts_chunk$set(warning = FALSE, message = FALSE)\nlibrary(tidyverse)## -- Attaching packages --------------------------------------- tidyverse 1.3.1 --## v ggplot2 3.3.5     v purrr   0.3.4\n## v tibble  3.1.2     v dplyr   1.0.6\n## v tidyr   1.1.3     v stringr 1.4.0\n## v readr   1.4.0     v forcats 0.5.1## Warning: package 'ggplot2' was built under R version 4.1.1## -- Conflicts ------------------------------------------ tidyverse_conflicts() --\n## x dplyr::filter() masks stats::filter()\n## x dplyr::lag()    masks stats::lag()"},{"path":"data.html","id":"elements-of-data-processing","chapter":"7 Working with data","heading":"7.1 Elements of data processing","text":"previous chapter dealt functions reusable pieces code. another common notion function : function processes data. basic model data processing following:, data? psychologists used think data observations empirical studies process statistical procedures. precisely matches model:Python, general programming language, exist libraries implement tables observations, well t-test (modern statistical procedures, luckily). However, don’t want bother statistics moment. Instead, take another look two function introduced 6:function summation takes list values computes sum. , satisfies basic model data processing:easy see input output implemented Python functions:function arguments provide inputthe function body processingthe return statement gives outputConsequently, every function takes arguments return statement can considered data processing. Furthermore, data processing can take place chains. Let’s take variance list numbers example. formula variance, shown , reveals variance statistic produces three steps: first, residuals computed, squared finally mean value taken.Let’s see implemnented Python. squared residuals, create function, resort function mean numpy library. Note two defined functions operate dedicated list output, rather modifying original one. Recall lists called reference, means original list otherwise altered function.code represents data processing way intermediate results stored dedicated variables (RES, SQR). makes processing chain clear code, longer chains downside length cluttering program variables just used . compact form write chain nesting function:Nested function evaluated inside-. Consequently, setting chain, one begins first processing step builds subsequent one “around” . conveniently compact, lacks intuition data processing chain. Therefore, best many situations, encapsulate whole line dedicated function:simple example highlights another important aspect data processing model: models can nested. function variance data processing chain, can take role global data processing chain. example, prepare summary statistics table report, use variance function part . care required input know produce, don’t worry processing chain, anymore. called black box.","code":"def summation(alist):\n    sum = 0.0\n    for i in range(len(alist)):\n        sum += alist[i]\n    print(\"Sum of the list is:\", sum)\n    return sum\n\nsummation([1,2,3,4])## Sum of the list is: 10.0\n## 10.0from numpy import mean\n\ndef residuals(lon):\n    avg = mean(lon)\n    output = []\n    for i in lon:\n          output.append((i - avg))\n    return output\n\ndef square(lon):\n    output = []\n    for i in lon:\n          output.append(i**2)\n    return output\n\nLON = [1, 8, 2, 9]\nRES = residuals(LON)\nSQR = square(RES)\nVAR = mean(SQR)\n\nprint(VAR)## 12.5from numpy import mean\n\ndef residuals(lon):\n    avg = mean(lon)\n    output = []\n    for i in lon:\n          output.append((i - avg))\n    return output\n\ndef square(lon):\n    output = []\n    for i in lon:\n          output.append(i**2)\n    return output\n\nLON = [1, 8, 2, 9]\nVAR = mean(square(residuals(LON)))\nprint(VAR)## 12.5from numpy import mean\n\ndef residuals(lon):\n    avg = mean(lon)\n    output = []\n    for i in lon:\n          output.append((i - avg))\n    return output\n\ndef square(lon):\n    output = []\n    for i in lon:\n          output.append(i**2)\n    return output\n\ndef variance(lon):\n    return mean(square(residuals(lon)))\n  \nLON = [1, 8, 2, 9]\nprint(variance(LON))## 12.5"},{"path":"data.html","id":"data-tables","chapter":"7 Working with data","heading":"7.2 Data tables","text":"purpose psychological experiments collect data participants various conditions. Imagine wanted analyze data single participant Stroop task. Perhaps, wanted analyze factorial linear model (ANOVA, like). data analysis program likely expects data following form:create table Python? simple form regard every column separate list initialize data gathering creating three empty lists. main part program can populate three lists separately, example:","code":"Condition = []\nCorrectness = []\nRT = []\n\nCondition.append(this_condition)\nCorrectness.append(this_correctness)\nRT.append(this_reaction_time)"},{"path":"data.html","id":"down-the-sink-writing-data-files","chapter":"7 Working with data","heading":"7.3 Down the sink: Writing data files","text":"case psychological experiments, main part data processing likely done programs, R, SPSS Excel. programs can make little use data stored Python variables. Rather, data read files. programs data format tables (specialized functions exist ), Lingua Franca file based data exchange comma-separated-values (CSV) form. almost easy sounds:every row data represented row textall values row separated commataThe example data set look like following CSV:order write file, use loop function, together string concatenation. Fortunately, csv library comes Python implements CSV export right-away. However, simple issueing just one command.\nDealing files issue . Unlike variables, linked running program, files just dumb sinks hard disk computer. must happen , example, two programs modify file simultaneously, create mess. Therefore, operating system takes special care files ensures one programn can write time (simultaneous reading less problem). signal operating system file written, decoration necessary. specifically, programmer must first create fileg handler file, command open .csv library commands operate writing handler. happens means writing handler, created function csv.writer. , function writerow adds rows table, one one. slightly inconvenient, data table arranged columns (three lists) first place. reason, loops first gathers every row table list this_row.\nfinally, close command signals operating system file longer use.general rule, good keep period open close short. Especially, one open file start program close quits. Programs development (written apprentices) tend crash means data loss potential file corruption. safest way probably open file observation gathered, append observation close immediatly.append rows existing file? closer look open function reveals takes second parameter, mode, type string. Three major mode exists (plus bunch fine-tuning options):Hence, code writing observation one--one :","code":"\nwrite.csv(D_Stroop, file = \"\", eol = \"\\n\\n\")## \"\",\"Condition\",\"Correctness\",\"RT\"\n## \n## \"1\",\"congruent\",TRUE,800.921185693852\n## \n## \"2\",\"congruent\",FALSE,696.864295047379\n## \n## \"3\",\"congruent\",TRUE,765.243482711174\n## \n## \"4\",\"congruent\",FALSE,814.332269635055\n## \n## \"5\",\"incongruent\",TRUE,630.556964944383\n## \n## \"6\",\"incongruent\",FALSE,686.060561659131\n## \n## \"7\",\"incongruent\",TRUE,693.333933180317\n## \n## \"8\",\"incongruent\",TRUE,731.797519903504Condition = [\"incongruent\", \"incongruent\", \"congruent\"]\nCorrectness = [False, False, True]\nRT = [800, 696, 765]\n\nimport csv\nmyfile =  open(\"Stroop.csv\", mode = \"w\")\nwriter = csv.writer(myfile)\nfor i in range(0, len(Condition)):\n    thisrow = [Condition[i], Correctness[i], RT[i]]\n    writer.writerow(thisrow)## 23\n## 23\n## 20myfile.close()import csv\nmyfile =  open(\"Stroop.csv\", mode = \"a\")\nwriter = csv.writer(myfile)\nwriter.writerow([thisCondition, thisCorrectness, thisRT])\nmyfile.close()"},{"path":"data.html","id":"may-the-source-reading-data-files","chapter":"7 Working with data","heading":"7.4 May the source …: reading data files","text":"processing chain starts data source, matter . source can one three kinds:function call, example one produces random numbersuser input, response time, derived button pressdata filesThe first two options already covered course. following see read data files. Files typically produced programs. tables Excel (programming editor, like). seen, CVS good choice.Stroop program, currently use one external source data, user responses. data, like words andf colors just coded list, tupels dictionaries. Reading data files seems unncecessary exercise first, fact can make program flexibel used non-programmers. possible scenario Stroop task different experimenters use , sets colors. one . First, prepare table assigns color words respective RGB codes save CSV file. spreadsheet program suited job.Lets assume table created Excel saved Colors.csv. following Python codes opens csv file creates reader (analog writer ). four lists created capture table columns. loop walks reader CSV file line--line. first line file (index 0) typically contains column names, omitted. result four lists length makes table. using two integer ramdom numbers, can select color word, ink color can produce stimuli.","code":"import csv\nimport random\n\ncsv_file   = open(\"Colors.csv\")\ncsv_reader = csv.reader(csv_file)\n\nColor = []\nR = []\nG = []\nB = []\n\nrow_number = 0\n\nfor row in csv_reader:\n  if row_number > 0:\n    Color.append(row[0])\n    R.append(row[1])\n    G.append(row[2])\n    B.append(row[3])\n  row_number += 1\n  \ncsv_file.close()\n\n\nthis_word  = random.randint(0,2)\nthis_color = random.randint(0,2)\n\nprint(\"Presenting\", \nColor[this_word], \"in color\", Color[this_color], \"(\", \nR[this_color],\nG[this_color],\nB[this_color], \")\")## Presenting violet in color orange ( 255 150 0 )"},{"path":"data.html","id":"exercises-6","chapter":"7 Working with data","heading":"7.5 Exercises","text":"","code":""},{"path":"data.html","id":"exercise-1","chapter":"7 Working with data","heading":"7.5.1 Exercise 1","text":"Write simple image presentation program, takes table following form input changes following picture key press.works, make program automatic. Add column table gives presentation time image seconds.","code":"\ntibble(File = c(\"Image01.jpg\", \"Image02.jpg\", \"Image03.jpg\"))## # A tibble: 3 x 1\n##   File       \n##   <chr>      \n## 1 Image01.jpg\n## 2 Image02.jpg\n## 3 Image03.jpg"},{"path":"data.html","id":"exercise-2","chapter":"7 Working with data","heading":"7.5.2 Exercise 2","text":"Python library openpyxl can read write Excel files, directly. Work (tutorial)[https://automatetheboringstuff.com/chapter12/]. Now modify presentation program use Excel files input.","code":""},{"path":"data.html","id":"think-further-6","chapter":"7 Working with data","heading":"7.6 Think further","text":"working data tables lot, may worth take look Pandas library. primary contribution Pandas object class DataFrame, captures whole table provides plethora useful methods filtering manipulation data. also commands read write csv files data frame.","code":"import pandas\n\nColors = pandas.read_csv(\"colors.csv\")\n\nprint(Colors)##     Color    R    G    B\n## 0  violet  180    0  180\n## 1   green    0  150  150\n## 2  orange  255  150    0"},{"path":"data.html","id":"references-1","chapter":"7 Working with data","heading":"7.7 References","text":"","code":""},{"path":"interaction.html","id":"interaction","chapter":"8 Interaction","heading":"8 Interaction","text":"decided learn programming probably something different mind putting values variables compare apple pears conditionals. likely, thinking creating something little magic ASCII letters printed console. Perhaps, already idea smartphone app mind. hasn’t?won’t push far. , conditionals hand, prepared get next level develop interactive programs Interactive programs run continuously something user presses button moves clicks mouse. don’t something completely random, except artistic installations, perhaps, react purposeful way user input. can say, program executes interaction model, set rules describe programs behaviour. show write interactive programs efficiently turning transition table transitionals.chapter just show use conditional loop. notice writing interactive program just coding. development process sequence steps output one step input next.First, teach analyze interaction problem note ideas structured way, transition table. ’ll show implement prototype testing interaction protocol turning transition table transitionals. Finally, ’ll explain detail put elements interaction together Pygame give fluent appearance.","code":"    Your brain does              The result is\n    [Interaction modelling]  --> Transition table \n--> [Coding transitionals]   --> Interactive prototype\n--> [Coding presentationals] --> Pygame program."},{"path":"interaction.html","id":"interaction-models","chapter":"8 Interaction","heading":"8.1 Interaction models","text":"interaction model describes program . simple definition , making interaction model . Rather, creating model important part sincere software development happens long start coding. essence, starting work interactive program, first : switch computer, pull pencils paper scratch head.asking envisioning program going write, eventually. formal output interaction analysis just one table somewhat abstractly describes flow program. mean, analysis may use representations, flow charts screen scribbles. opposite case: seeing program different angles, help come better interaction model results can used downstream, screen scribbles visual design.complex , interaction model can broken three sets elements: states, transitions events:states different modes program .transitions let program move one state anotherevents make transitions happenThe scope book covers rather simple interactive programs , psychological experiments. order explain basics interaction programming, go something even simple: Dutch traffic light.","code":""},{"path":"interaction.html","id":"identifying-states","chapter":"8 Interaction","heading":"8.1.1 Identifying states","text":"first step analysis identify states program. state rather abstract term, let’s see examples:light switch two states Offthe Dutch traffic light three signals Go, Attention StopIn MS Word, several different modes view document: Read, Print, Web.…making model existing system front eyes, ’s called reverse engineering. One good heuristic reverse engineer states simply observe different visual forms display takes. , states exmained given description label. , let’s reverse engineer Dutch traffic light watching one cycle signals:three displays traffic light:capture purpose state give capture first place analysis purpose states. note table states (TOS):Notice named states traffic light, better call Green, Yellow Red. , colored lamps just one medium signal. description state address purpose state appearance. analysis, rather thinking lamps buzzers, think user understans. Visual design comes later point development process.","code":".    .    R\n.    Y    .\nG    .    .## # A tibble: 3 x 2\n##   State Purpose                   \n##   <chr> <chr>                     \n## 1 Go    signal permission to cross\n## 2 Att   signal soon Stop          \n## 3 Stop  No permission to cross"},{"path":"interaction.html","id":"identifying-transitions","chapter":"8 Interaction","heading":"8.1.2 Identifying transitions","text":"second step analysis identifying transitions states. Dutch traffic light knows three transitions:Cycling set states simple interaction protocol. unique, states arrenged closed cycle, implies every state appears exactly left-hand side (original state) right-hand side (destination). later see, also need one button manual traffic light.time complicated state charts can easily go --hand. now introduce method transition tables, breaks complex analysis series simple questions. know afterthe state analysis set states , potentially, every state can change every . put square matrix states. rows denote origin state, columns target states.According empty transition table, traffic light nine possible transitions. make sense implemented? start first row ask: “make sense state Go followed ?” , answer leave cell just empty. , situations, want make “selfish” transition, think dia show program, , whenever button pressed, shows next picture. state Show_picture followed Show_picture. also implies, states can somewhat abstract. make little sense separate state defined every picture show.Let’s move : “transition Go Att make sense?” Absolutely! make cross. second third row, leaving blank impossble transitions marking possible.important understand, transitions symmetric. case traffic light, can go Go Att, transition back. interaction models uni-directional cycle, transitions can well symmetric, think checkout process webshops. Usually, guide process number steps (billing address –> delivery address, credit card number), allow go back previous step corrections.Notice traffic light example, every state origin exactly one transition, whereas checkout process two transitions originating Billing. called branching. wonder program eventually decides transition take, read events.","code":"      Go  Att Stop\nGo\nAtt\nStop         Welcome  Present Goodbye\nWelcome           X\nPresent           X       X\nGoodbye        Go  Att Stop\nGo          X\nAtt             X\nStop  X             Delivery  Billing Credit_card\nDelivery               x\nBilling      x                 x\nCredit_card            x       "},{"path":"interaction.html","id":"events-user-input-and-internal-conditions","chapter":"8 Interaction","heading":"8.1.3 Events: user input and internal conditions","text":"transition table tells possible transitions allowed implemented. yet tell going happen, exactly. event condition triggers transitions. Events can internal conditions user input.Internal conditions require user input. program decides solely , transit. call transitions internal conditions automatic transitions. typical case automatic transitions control timer. assume Dutch traffic light runs automatically, without someone standing next (yellow vest) pushing buttons, transitions must automatic. Certainly, want traffic light change states instantly, certain time passed. interaction model means specify resting time every state. right transition table replacing crosses brief description condition makes system leave origin state:words, interaction model expressed like following:state Go, wait 20s, transit AttWhen Att, wait 5s, transit StopWhen Stop, wait 20s, transit GoIn psychological experiments, time-controlled transitions happen lot. purpose experiments investigate subliminal priming, presnetation time short, people consciously process stimuls, still subconscious effects. example, briefly seeing picture apple, participants reportedly react faster question: “word? PEAR.” subliminal primning experiments, order control cognitive processing time, stimuli presented brief moment, followed visual mask (erase visual sensory memory). Finally, response acquired key press (user input) program proceeds next trial.brings us second form events: user input events. transition triggered user input called interactive transition. least one interactive transition, call interactive program. cases, user input just pressing certain key. Let’s first look manual traffic light can specified. Taking another look transition table tells us:three possible transitionsat every origin state one transition possibleBecause one transition possible every moment, seems can go just one key, let’s call Next.case, seems fairly practical give traffic light operator remote control just one button. note complex systems good idea terms usability. ? known mode confusion. ideal example probably one 1980 clunky digital watches, just told time, also let use stop watches, timers, altitude alarms, step counters brewing nice cup coffee. functionality controlled just four flimsy buttons. buttons , changes state watch . example, lower left button switch another time zone Watch, reset stop watch mode. user learn manual every button every state completely aware mode watch currently .desgning complex interactions therefore better use different user inputs (keys presses) different actions. mean use totally new control every cell transition table. can actions similar across states, action Next Previous checkout process example:Note keep name controls rather abstract, denoting action, physical key mouse button. Like analysis states, defer peoblem later state. reason get distracted stage, also makes transition table easier read, let’s us identify actions use control. many controls finally use program matter careful choice. However, least one rule: number separate controls must equal larger maximum number interactive transitions row. According rule, traffic light can one controls, whereas checkout program requires least two (Billing).checkout traffic light examples, one transition per state, course, can one. subliminal priming example, participant’s response whether shown letter combination word, . implies two controls needed transitions, say controls Word Not_word. program continue state Stim, irrespectively two keys pressed.needs considered carefully, end putting two controls cell yet discovered states. subliminal priming example, Resp followed Stim, irrespectively user input. , special case.transition table now complete. covers states (rows columns), transitions (occupied cells) events (cell). next section, build interactive programs translating cell table transition conditional.","code":"      Go  Att   Stop\nGo        20s\nAtt             5s\nStop  20s      Stim  Mask   Resp\nStim        100ms\nMask               100ms\nResp  X      Go  Att   Stop\nGo        Next\nAtt             Next\nStop  Next             Delivery  Billing     Credit_card\nDelivery               Next\nBilling      Previous              Next\nCredit_card            Previous      Stim       Mask   Resp\nStim             100ms\nMask                    100ms\nResp  Word or\n      Not_word"},{"path":"interaction.html","id":"exercises-7","chapter":"8 Interaction","heading":"8.1.4 Exercises","text":"german traffic lights differ Dutch traffic lights light Red Yellow switching Go. Create transition table.Identify states, events transitions stopwatch program create transition table.smart traffic light switches Stop Go automatically, car approaching crossroads clear. Analyze create transition table.Review Stroop program find states code. , take closer look code states used.","code":""},{"path":"interaction.html","id":"programming-interactive-prototypes","chapter":"8 Interaction","heading":"8.2 Programming interactive prototypes","text":"One worst things can happen software development flaw introduced early state planning discovered program almost done. reason, good practice software development test models catch flaws early possible. , can test interaction model? course, just implement whole program see, intended. , truly flaws, lot effort wasted lot work redone. catch-22 situation can resolved implementing just aspect system want test, example flow interaction. called prototype , see, transition table can quickly translated simple piece software, interactive prototype, using just standard coding patterns.interactive prototype, turn transitions table transition conditionals short: transitionals. two kinds transitions, automatic interactive, also deal interactive automatic transitionals.","code":""},{"path":"interaction.html","id":"interactive-transitionals","chapter":"8 Interaction","heading":"8.2.1 Interactive transitionals","text":"following code snippet implements two interactive transitional origin, namely transition Billing Delivery Credit_card:Notice thatthe state program maintained plain String variablethe starting state set “Billing”interactive transitionals check two conditions: current state whether respective key presseda transition occurs setting variable STATE another valueThe code ask user input , change state (stay Billing, valid input entered) terminate. Instead, want program truly flow able react longer series user actions. Basically, thing put transitionals loop. However, particular case, happen program never truly stop. purpose, implement general state called Exit, ends program. transitions Exit special, state always destination, never origin. can omit row. many cases also want respect users freedom allow jump Exit time want:interaction prototype Checkout looks like following.Notice :loop comes conditions . just plainly loops, someone proves truth true.print statement top loop entirely replaces graphical user interface stage.every transitional, put continue statement. ? , State veriable updated, can fire second transitional. Check , reading conditionals: within one iteration go Delivery Exit way even see intermediate steps printed console. continue statement forces loop begin new iteration, immediatly, omitting transitionals one fired. makes sure per iteration one state transition takes place.use transitional ask state therefore always triggers Exit x pressedthe Credit_card –> Exit transitional uses continue order reach print(STATE) command one time. final iteration , last transitional (one without destination) encountered break statement ends loop.general, interactive transitional emerge transition table following pattern:Notice every combination state event gets ... continue block. call flat transitionals. Another way use nested transitionals, outer block interrogate state uses inner block deal possible events, general form :difference functionality two forms transitionals, longer programs may easier read. nested transitionals, checkout program look like following:Notice thatthe indentation visually groups transitions belong origin statewe reduced number continue statements. key never changed inside transitional, single event conditional triggered time.","code":"print(STATE)\nkey = input(\"Press a key: \")\n\nif STATE == \"Billing\" and key == \"p\":\n  STATE = \"Delivery\"\n\nif STATE == \"Billing\" and key == \"n\":\n  STATE = \"Credit_card\"             Delivery  Billing     Credit_card  Exit\nDelivery               Next                     X\nBilling      Previous              Next         X\nCredit_card            Previous                 X, NextSTATE = \"Delivery\"\nwhile True:\n  \n  print(STATE)\n  key = input(\"Press a key: \")\n  \n  # interactive transitionals\n  \n  if STATE == \"Delivery\" and key == \"n\":\n    STATE = \"Billing\"\n    continue\n  if STATE == \"Billing\" and key == \"p\":\n    STATE = \"Delivery\"\n    continue\n  \n  if STATE == \"Billing\" and key == \"n\":\n    STATE = \"Credit_card\"\n    continue\n  if STATE == \"Credit_card\" and key == \"p\":\n    STATE = \"Billing\"\n    continue\n  \n  if STATE == \"Credit_card\" and key == \"n\":\n    STATE = \"Exit\"\n    continue\n    \n  if key == \"x\":\n    STATE = \"Exit\"\n    continue\n    \n  if STATE == \"Exit\":\n    break\n    \n    \nexit()if STATE == <origin> and <event>:\n  STATE = <state>\n  continueif STATE == <origin>:\n  if   <event_1>:\n    STATE = <next_state_1>\n  elif <event_2>:\n    STATE = <next_state_2>\n  elif ...\n  continueSTATE = \"Delivery\"\nwhile True:\n  \n  print(STATE)\n  \n  key = input(\"Press a key: \")\n# interactive transitionals\n  if STATE == \"Delivery\" and key == \"n\":\n    STATE = \"Billing\"\n    continue\n  \n  if STATE == \"Billing\":\n    if key == \"n\":\n      STATE = \"Credit_card\"\n    if key == \"p\":\n      STATE = \"Delivery\"\n    continue\n  if STATE == \"Credit_card\":\n    if key == \"n\":\n      STATE = \"Exit\"\n    if key == \"p\":\n      STATE = \"Billing\"\n    continue\n  \n  if STATE == \"Exit\":\n    break"},{"path":"interaction.html","id":"automatic-transitions","chapter":"8 Interaction","heading":"8.2.2 Automatic transitions","text":"Sometimes want transition happen due internal conditions program, example:stay state Att, 5 seconds passed move Stopshow stimulus 100ms, move distraction mask.20 trials experiment, make pause.dias shown, give GoodbyeA frequent case automatic transitions staying state certain amount time, move next state. Take example dia show program automatically shows every picture , say, 30 seconds. Fortunately, automatic transitions almost look , difference <event> becomes <condition>.experienced Stroop task theater play chapter 1 dealing time requires extra tricks. example, let automatic traffic light rest Go state exactly 20 seconds? set timestamp wait difference become 20 seconds longer. Fortunately, interaction prototypes, cheap dirty trick straight-forwardly, command sleep(20). suspends whole program wakes twenty seconds. dirty? two reasons: First, works interaction prototypes, Pygame programs. example, showing animated stimuli, putting whole program halt won’t work. Second, able bypass waiting time, say, user wants prematurely proceed next picture dia show.program can (typically ) mix interactive automatic transitionals. example, create semi-automatic traffic light, operator switch Stop Go. set Stop, program first goes state Att, rests seconds automatically moves Stop.Notice thatthe input commands moved transitionals otherwise loop prompt input automatic transitions, well, just idea. Later, use event handling mechanism Pygame, provide better solution mixing interactive automatic transitionals.simplified event handling. traffic light needs just one control button toggle Stop Go, key (followed Return) just Return key. general solution, works, just one transition per state.","code":"from time import sleep\nSTATE = \"Stop\" # Att, Go\nwhile True:\n    print(STATE)\n    if STATE == \"Go\":\n      sleep(2)\n      STATE = \"Att\"\n      continue\n      \n    if STATE == \"Att\":\n      sleep(1)\n      STATE = \"Stop\"\n      continue\n      \n    if STATE == \"Stop\":\n      sleep(2)\n      STATE = \"Go\"\n      continuefrom time import sleep\nSTATE = \"Stop\" # Att, Go\nwhile True:\n    print(STATE)\n    if STATE == \"Go\":\n      input(\"Hit Return\")\n      STATE = \"Att\"\n      continue\n      \n    if STATE == \"Att\":\n      sleep(2)\n      STATE = \"Stop\"\n      continue\n      \n    if STATE == \"Stop\":\n      input(\"Hit Return\")\n      STATE = \"Go\"\n      continue"},{"path":"interaction.html","id":"the-timestamp-method","chapter":"8 Interaction","heading":"8.2.3 The timestamp method","text":"said, prototype, sleep(s) fine cases cause delayed reaction, start coding Pygame. use timestamp method, little benefits interactive prototypes. Still, seems order introduce method somewhat cleaner code interactive prototypes.following code shows, implement time delay setting timestamp comparing difference current time automatic traffic light example.Notice thatthe second condition time-controlled transitionals carries waiting timethe function time() returns number seconds since 1 January 1970. called Unix epoch.starting state Go time-controlled, set first timestamp loop starts.print statements moved transitionals. Read .current_time set beginning every iteration. Read .appears going sleep method time method just superficial change code. fact, one dramatic change program runs, although may even realize first glance. sleep, loop exactly one iteration per state change, one per five seconds (combined sleeping time). entering transitional, sleep initiated program rests. wakes finds continue, eventually. timestamp version, program never sleeps. loop cycles fast can, incredibly fast, every iteration picking current_time comparing timestamp. Find , putting print(STATE) back old place, top loop.use exact method Pygame. , , method work well prototype. system chosen traffic light. full purpose fully automatic. problem input command, waits input. , loop stands still. order combine user input fast loop, need another way handling input events. Pygame provide.","code":"from time import time\nSTATE = \"Go\" # Att, Go\ntime_stamp = time()\nwhile True:\n    \n    current_time = time()\n    \n    if STATE == \"Go\" and current_time - time_stamp >= 2:\n      STATE = \"Att\"\n      time_stamp = time()\n      print(STATE)\n      continue\n      \n    if STATE == \"Att\" and current_time - time_stamp >= 1:\n      STATE = \"Stop\"\n      time_stamp = time()\n      print(STATE)\n      continue\n      \n    if STATE == \"Stop\" and current_time - time_stamp >= 2:\n      STATE = \"Go\"\n      time_stamp = time()\n      print(STATE)\n      continue"},{"path":"interaction.html","id":"presentation-conditionals","chapter":"8 Interaction","heading":"8.2.4 Presentation conditionals","text":"inspect interactive prototyping code far, notice output produced single print statement, resides outside transitionals. fully purpose, deriving golden rule user interface development, see later.sole purpose traffic light transit states make states visible user general, interactive programs just transit state state. usually process sort data information. often, user input one state, affects display subsequent state.one suffices check interaction flow, lacks ability poor solution, checks primary state program . order check logic program useful enrich tehz output . example, traffic light example, may want show tr5affic light, just state.tempting just print statements transitionals, finally work Pygame programs. Recall said beginning chapter breaking complex problem manageable pieces. software development accepted best practice clearly separate two aspects interactive program: flow states presentation screen. even name approach, called two-tier architecture. may seem done toy examples, use , significant advantages long run:can focus one thing time, typically starting flow program done, move screen design.can even separate two tasks: one expert interaction flow, another expert creates screens.works Pygame.order flexible prototype presents screen state, expand print(STATE) statement set presentation conditionals (presentitionals), allowing us create different output different states. demonstrate idea example checkout process.Notice :Presentationals never change state domain transitionals.presentitionals triggered states, simply. find wanting add another condition, say whether response correct, can either go teh presentitional can split state two separate ones.use statements without continue. otherwise, iteration jump carefully crafted transitionals nothing ever happen anymore. also don’t need break iteration, program always exactly one state presetitionals never change state. makes sure exactly one presentitional fire single iteration.presentitionals come transitionals, otherwise fall prey continue statement never show . Pygame, due better event handler mechanism, longer necessary seems logical put presentitionals last.","code":"STATE = \"Delivery\"\nwhile True:\n  \n  # presentation conditionals\n  \n  if STATE == \"Billing\":\n    print(\"n for proceed\")\n    billing  = input(\"Please, enter your billing address\")\n  \n  if STATE == \"Delivery\":\n    delivery = input(\"Please, enter your delivery address\")\n    print(\"p for previous, n for next\")\n  \n  if STATE == \"Credit_card\":\n    print(\"n for next, p for previous\")\n    credit_card  = input(\"Please, enter your billing address\")\n  \n  if STATE == \"Exit\":\n    print(\"We received your order\")\n    break\n    \n  \n  key = input(\"Press a key: \")\n  # interactive transitionals\n  if STATE == \"Delivery\" and key == \"n\":\n    STATE = \"Billing\"\n    continue\n  \n  if STATE == \"Billing\":\n    if key == \"n\":\n      STATE = \"Credit_card\"\n    elif key == \"p\":\n      STATE = \"Delivery\"\n    continue\n  if STATE == \"Credit_card\":\n    if key == \"n\":\n      STATE = \"Exit\"\n    elif key == \"p\":\n      STATE = \"Billing\"\n    continue"},{"path":"interaction.html","id":"interactions-in-pygame","chapter":"8 Interaction","heading":"8.3 Interactions in Pygame","text":"","code":""},{"path":"interaction.html","id":"overall-structure","chapter":"8 Interaction","heading":"8.3.1 Overall structure","text":"Notice :code setting display looks complicated, usually suffices just copy part code whenever start new project. Still, probably want configure aspects requirements:\nchoose background color, e.g. col_black #FFFFFF (white)\nset width height screen changing SCREEN_SIZE\nchange caption screen (appear top bar window)\nchange font font size\nchoose background color, e.g. col_black #FFFFFF (white)set width height screen changing SCREEN_SIZEchange caption screen (appear top bar window)change font font sizethe main program nbot invoked directly, encapsulated function def main():. function executed last line code.","code":"BACKGR_COL = col_gray\nSCREEN_SIZE = (700, 500)\npygame.init()\npygame.display.set_mode(SCREEN_SIZE) \npygame.display.set_caption(\"Stroop Test\")\nscreen = pygame.display.get_surface()\nfont = pygame.font.Font(None, 80)\nfont_small = pygame.font.Font(None, 40) \ndef main():\n  # fast while loop\n  while True:\n  \n          # refreshing the display\n          screen.fill(BACKGR_COL)        \n  \n          # Event loop\n  \n              # interactive transitionals                     \n  \n          # automatic transitionals\n  \n          # Presentitionals\n  \n          # Updating the display\n          pygame.display.update()\nmain()"},{"path":"interaction.html","id":"the-screen-and-the-refresh-loop.","chapter":"8 Interaction","heading":"8.3.2 The screen and the refresh loop.","text":"Pygame can create interactive programs fancy geometries fluent animations. fact, computer animations just pseudo-fluent. like movies: fluent movement, like jumping ball, captured high speed. just sequence still images, sluggish human visual system perceived less fluent real scene.Pygame program, animation created series stills, , difference stills celluloid. get computed instance transfered computer screen fast succession, like 60 per second (60Hz). happens followed:setting displaya fast loop runs continuously, every iteration:screen refreshed painting background color previous imagethe next image computed transitionals presentitionalsthe display updated new imageA single iteration fast loop call refresh.","code":""},{"path":"interaction.html","id":"handling-user-input","chapter":"8 Interaction","heading":"8.3.3 Handling user input","text":"Pygame can create interactive programs react fluently user input. longer prompt waits input requires Return continue. User input Pygame programs handled clever mechanism called event handler queue. don’t actually see , set behind scenes pygame.init(). acts lot like descretive secretary: stays teh background collects incoming messages, hands one one executive lets thing .fast loop runs foreground, event handler separate mechanism continuously listens input keyboard mouse. Whenever something happens, key pressed mouse pushed, event handler registers event puts queue. every regresh queue retrieved emptied pygame.event.get(), returns queue list. event loop iterates list, pulling events one one handing interactive transitionals.Notice thatwhen input, event loop never runs none interactive transitionals wil fire. event handler loop acts like conditional time. sits fast refresh loop therefore idle iterations. never put automatic transitionals event loop.pygame.event.get() returns event queue, also empties . Otherwise, events eveluated .event complex piece information. key press, type event KEYDOWN property key holds key pressed.one event recorded, processed single refresh. can mean one transition per refresh.still need continue make sure one transitional per event fired. event handler queue consumed (emptied) pygame.event.get(), variable event . two successive transitionals use event (e.g. n next), triggered.","code":"# Event handler\nfor event in pygame.event.get(): \n    # interactive transitionals                     \n    if STATE == \"welcome\":\n        if event.type == KEYDOWN and event.key == K_SPACE:\n            STATE = \"prepare_next_trial\"\n            print(STATE)\n            continue"},{"path":"interaction.html","id":"transitionals","chapter":"8 Interaction","heading":"8.3.4 Transitionals","text":"Interactive transitionals differ slightly. event handler mechanism longer reside fast , one level deeper event handler loop. use print statement see state transitions console, must go individual transitionals, see :Notice :event condition gets little complicated () lets us prefer nested transitionalsthe second transitional little data processing, namely capturing response time time stamp method.third transitional contains two transitions, call branching transitional. inner conditional interrogates number trials already presented either moves another trial teh end experiment.last transitional breaks event handler loop. user wants quit, wants quit wait event handler loop finish queue.Automatic transitionals Pygame differ way automatic transitionals console prototypes, except use time_stamp method cause delay. structure remain directly fast loop.one automatic transitional Stroop program, little special closer examination: every new trial, transitional prepare_trial triggered automatically program moves show_trial. closer examination transitional different ones seen , state prepare_trial presentational. completely invisible user, ghost transitional. also notice quite extra code inside. serious data processing done, actual transition.transition actually prepares aspects stimulus, shown. , aren’t computations just done direct transition show_trial? fact, little program , matter. just one automatic transitional., situations, using ghost transitionals can usefulwhen data processing complex. , seems natural think progranm data processing transition.data processing lets program branch. example, define two separate states trial feedback, correct incorrect responses. , seems natural put computations branching “knot” .cases, program easier understand debig, difference functionality.","code":"# Event loop\nfor event in pygame.event.get():\n    \n    # interactive transitionals                     \n    if STATE == \"welcome\":\n        if event.type == KEYDOWN and event.key == K_SPACE:\n            STATE = \"prepare_next_trial\"\n        print(STATE)\n        continue\n            \n    if STATE == \"wait_for_response\":\n        if event.type == KEYDOWN and event.key in KEYS.values():\n            time_when_reacted = time()\n            this_reaction_time = time_when_reacted - time_when_presented\n            this_correctness = (event.key == KEYS[this_color])\n            STATE = \"feedback\"\n        print(STATE)\n        continue\n    if STATE == \"feedback\":\n        if event.type == KEYDOWN and event.key == K_SPACE:\n            if trial_number < n_trials:\n                STATE = \"prepare_next_trial\"\n            else:\n                STATE = \"goodbye\"\n        print(STATE)\n        continue\n            \n    \n    if event.type == QUIT:\n        STATE = \"quit\"\n        print(STATE)\n        break# automatic transitionals\nif STATE == \"prepare_trial\":\n        trial_number = trial_number + 1\n        this_word  = pick_color()\n        this_color = pick_color()\n        time_when_presented = time()\n        STATE = \"show_trial\"\n        print(STATE)    "},{"path":"interaction.html","id":"pygame-events","chapter":"8 Interaction","heading":"8.3.5 Pygame events","text":"event handler collects events two refreshes hands event loop. already seen transitionals events complex just literal characters. makes sense, consider also mouse events captured. expressed characters, either coordinates (mouse moved) button presses certain position screen.let’s look keyboard input, first, appear Stroop program. structure inner event conditions:, conditional asks type event, key pressed . Note basic key entered, also mean released. secod condition key. Different prototypes, literal character, constant, Pygame predefined. helps deal keys character assigned, Return, Alt, Ctrl arrows keyboard. full list key definitions can found [Pygame documentation]:(https://www.pygame.org/docs/ref/key.html).KEYDOWN must also KEYUP event type, recorded, key released . can quite useful, goal something long key pressed. Just try key arrow_up editing document. moves cursor lines release .full list event types given [Pygame documentation]:(https://www.pygame.org/docs/ref/event.html). briefly explain important, event type QUIT mouse event types:actually corresponds time exit implemented prototype. Usually, QUIT event key press ESC key. try , see can cancel Stroop program time pressing ESC.Mouse events come several types different properties, two important ones :MOUSEMOTION event recorded mouse pointer moved refreshes. attribute event.pos, list two numbers, x y coordinates new pointer position.MOUSEBUTTONDOWN recorded mouse button pressed . attribute event.button identifies button (LEFT, RIGHT).See two events action following little program:Notice thatevent.pos list two values, x y coordinatesPygame provides mouse buttons constants, put quotation marks.unsafe create new variables inside event, never know happens. better explicitly create variables (mousex, mousey) top main programthere two presentitionals, use function drawing","code":"  if event.type == KEYDOWN and event.key == K_<key>:if event.type == QUIT:\n  STATE = \"quit\"\n  breakimport pygame\nimport sys\nfrom time import time\nfrom pygame.locals import *\nimport random\nfrom pygame.compat import unichr_, unicode_\n##### VARIABLES #####\n# Colors\ncol_black = (0, 0, 0)\ncol_green = (0, 255, 0)\ncol_green_dim = (0, 60, 0)\nBACKGR_COL = col_black\nSCREEN_SIZE = (500, 500)\npygame.init()\npygame.display.set_mode(SCREEN_SIZE)\npygame.display.set_caption(\"Mouse events\")\nscreen = pygame.display.get_surface()\nscreen.fill(BACKGR_COL)\ndef main():\n    STATE = \"not_clicked\"\n    mousex = 0\n    mousey = 0\n    while True:\n        screen.fill(BACKGR_COL)        \n        for event in pygame.event.get():                        \n            # IT\n            if STATE == \"not_clicked\":\n                # mouse moved, new pointer position is stored\n                if event.type == MOUSEMOTION: \n                    mousex = event.pos[0]\n                    mousey = event.pos[1]\n                    continue\n                # left mouse button clicked\n                if event.type == MOUSEBUTTONDOWN and event.button == LEFT: \n                    STATE = \"clicked\"\n                    time_when_clicked = time() # timestamp for \"unclicking\"\n                    continue\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n        # AT\n        # unclicking after 500ms\n        if STATE == \"clicked\" and time() - time_when_clicked > 0.5: \n            STATE = \"not_clicked\"\n        #  Presentitionals\n        if STATE == \"clicked\":\n            draw(mousex, mousey, True)\n        \n        if STATE == \"not_clicked\":\n            draw(mousex, mousey, False)\n        \n        pygame.display.update()\ndef draw(posx, posy, clicked):\n    if clicked:\n        color = col_green\n    else:\n        color = col_green_dim\n    text_surface = font.render(str(int(posx)) + ':' + str(int(posy)), True, color, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,SCREEN_SIZE[1]/2.0)\n    screen.blit(text_surface, text_rectangle)\nmain()"},{"path":"interaction.html","id":"presentitionals","chapter":"8 Interaction","heading":"8.4 Presentitionals in Pygame","text":", ’re getting candy! Pygame presentitionals give program face. presentitionals Pygame formal structure prototype presentitionals, nothing say . chapter shows create graphical user interface render stimuli, show pictures, play animations buttons.Pygame system developed arcade games powerful comes creating transforming graphical objects. Unfortunately, also makes complex, functions many dots names. Fortunately, many psychological experiments complex simplest arcade game. Introducing small subset Pygame functionality sufficient. geek take look books game development Python.Recall every refresh screen almost literally painted . fact, every one presentitional can considered drawing . allows us demonstrate elements Pygame graphics simple programs, produce still picture. also matches way proceed, writing transitionals: first write scaffolding code, consists presentitional empty draw function. grab draw functions one one program visuals, using text, geometric figures pictures. scaffolding looks like:Notice :use print statements presentitionals, fast loop.often, useful make draw function generic use function arguments fix properties.","code":"if state == \"some_state\":\n  draw_some_state()\n  \nif state == \"some_other_state\":\n  draw_some_state(some_property)\n  \npygame.display.update()\n  \ndef draw_some_state():\n  pass\n  \ndef draw_some_other_state(some_property):\n  pass"},{"path":"interaction.html","id":"display-and-surface","chapter":"8 Interaction","heading":"8.4.1 Display and surface","text":"Creating appearence states means draw things surface (also known screen canvas). However, can , surface must created. Also, understand “physical properties” surface.Like almost program, Pygame program appears window, just like one text displayed, browser pdf viewer. windows composed frame, consists rectangular edge, title bar caption Windows controls |_|| ||X| upper right corner. edge sits surface. first thing needs done creating window, called display Pygame terminology. following code creates minimal Pygame display surface 600 pixel wide 400 pixel high puts “Pygame display” title bar. thing can quit properly.Notice :initializing display, assignment operator involved. one display object pygame.display magically appears initializing pygame. However, extent can configure liking., display set fixed size won’t able resize window runtime. way make resizeable, complicate matters comes drawing surface.surface object created pygame.display.get_surface() assigned name surface . Thus, can give another name , fact, call “screen” “canvas” examples book.surface.fill() give surface color. colors, read .display updated (refreshed), surface, just little counter-intuitive, surface draw.Although program nithing noteworthy, included event handler quit transition. , closing window becomes surprisingly difficult task.say surface can actually see example. One thing notice size surface given pixel unit. pixel? Take loupe look computer monitor closely. see tiny dots, composed three differently colored areas. dots pixel everything draw render screen actually composed pixel. seems natural use pixel unit measurement programming graphics, long precisely know size surface. One reason using metric (mm, cm) units pixel size can differ lot monitors. Use loupe teh display smartphone check . , , always work fixed size displays.Objects placed canvas coordinates, given pixel, . used coordinate systems origin (x = 0, y = 0) lower left corner, Pygame surfaces origin (0,0) upper left corner. historical reason old clunky electron ray tubes start new refresh first line, left--right. Perhaps, easier remember like writing text.pygame.update.display() refresh loop updates display every iteration. update collects graphical elements produced iteration puts surface. However, speaking figuratively unlike grabbing fresh canvas drawing. much like old masters worked oil canvas. New updated elements -painted. Areas affected -painting stay just . computer games perfectly makes sense. navigating character, say famous Pacman, maze constant makes little sense update every 60th second. interactive programs dealing , , interface layout changes often , order play safe, always surface.fill() order create blank sheet every refresh.Speaking colors: creating surface, filled background color choice, tupel (0, 0, 0). three numbers? Remember saw loop: every pixel composed three subpixel different colors, namely: Red, Green Blue. every computer world composes colors: additive mixture three colors. short, call RGB system. Every subpixel fixed color, brightness color can vary, taking values 0 255 (happens called byte). examples, check Stroop program, number colors predefined tupels. , (0, 0, 0) means three color channels dark results Black. opposite (255, 255, 255) means channels fire maximum brightness, results White.","code":"# Required libraries\nimport pygame\nimport sys\nfrom pygame.locals import *\nfrom pygame.compat import unichr_, unicode_\n# Initializing the display\npygame.init()\npygame.display.set_mode((600, 400))\npygame.display.set_caption(\"A Pygame display\")\n# Creating the surface\nsurface = pygame.display.get_surface()\nsurface.fill((0,0,0))\ndef main():\n    while True:\n        for event in pygame.event.get():\n            # IT\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n        pygame.display.update()\nmain()"},{"path":"interaction.html","id":"drawing-figures","chapter":"8 Interaction","heading":"8.4.2 Drawing figures","text":"Drawing_figuresNotice :order drawing commands determines figures painted one another.Sometimes useful write wrapper functions Psygame commands. , mainly purpose creating matrix-like appearance function names equal length.Even static programs minimal event loop reacts properly user wants quit program.","code":"import pygame\nimport sys\nfrom pygame.locals import *\nfrom pygame.compat import unichr_, unicode_\npygame.init()\nwidth = 1000\nheight = 800\npygame.display.set_mode((width, height))\npygame.display.set_caption(\"Drawing figures\")\nscreen = pygame.display.get_surface()\nscreen.fill((0,0,0))\ndef main():\n    while True:\n        screen.fill((0,0,0))\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n        \n        draw_circ(250, 200, 200, (255, 255, 255), 5)\n        draw_circ(250, 200, 150, (255, 255, 255), 20)\n        draw_circ(250, 650, 100, (255, 0, 0), 0)\n        \n        draw_rect(500, 50,  400, 600, (0, 0, 255), 0)\n        draw_rect(500, 50,  200, 200, (0, 255, 0), 10)\n        \n        draw_tria(250, 200, 250, 650, 500, 50)\n        \n        pygame.display.update()\ndef draw_circ(x, y, radius, \n              color = (255,255,255), \n              stroke_size = 1):\n    pygame.draw.circle(screen, color, \n                       (x,y), radius, stroke_size)\ndef draw_rect(x, y, \n              width, height, \n              color = (255,255,255), \n              stroke_size = 1):\n    pygame.draw.rect(screen, color, (x, y, width, height), stroke_size)\n    pass\ndef draw_tria(x_1, y_1, \n              x_2, y_2,\n              x_3, y_3, color = (255,255,255), \n              stroke_size = 1):\n    points = ((x_1, y_1), (x_2, y_2), (x_3, y_3))\n    pygame.draw.polygon(screen, color, points, stroke_size)\n    pass\nmain()"},{"path":"interaction.html","id":"placing-text-and-pictures","chapter":"8 Interaction","heading":"8.4.3 Placing text and pictures","text":"Putting text screen something experience everyday, read internet, write emails write code. One might think straight-forward Pygame creating figures. easy, though, order understand complications arise, think following: want write note “DON’T PANIC!” surrounding box. first, writing box?put writing first, written see high wide written text . problem happens rendering text Pygame surfaces. Fonts differ even individual characters differ. reasonable way, determine size text box, rendered. solve problem, divide drawing process two parts: rendering part creates object text box computer memory, without sending surface, yet. object, can retrieve properties text box, notably dimensions. Even better, object can manipulated many ways, example resizing moving Pygame doc. , text object send surface.following program merged steps programmer-friendly function almost behaves like figure drawing commands. difference: don’t know advance large textbox .Notice :First, actually select font text. . set globally.coordinates function refer upper left corner default, can set refer teh center box.SURF.blit() command sends rendered text textbox surface.box first retrieved rendered text, moved finally send surface.function draw_textbox() uses pygame.transform.smoothscale() force text given width height. results don’t neccessarily look good.consistently put global variables capital letters avoid confusion globalö local variables.Working pictures similar text boxes. , know size loaded file hard drive.Notice thatthe picture file resides teh directory program. different use relative paths. Avoid absolute paths, makes program less portable.function definition, put scale arguent end, although earlier position logical. reason argument without default come first, file.picture.get_rect() called twice. scaling box gets updatePutting scaling part conditional necessary, saves computation needed.","code":"import pygame\nimport sys\nfrom pygame.locals import *\nfrom pygame.compat import unichr_, unicode_\npygame.init()\nwidth = 1000\nheight = 800\npygame.display.set_mode((width, height))\npygame.display.set_caption(\"Drawing figures\")\nFONT = pygame.font.Font('freesansbold.ttf',40)\nSURF = pygame.display.get_surface()\nSURF.fill((0,0,0))\ndef main():\n    while True:\n        SURF.fill((0,0,0))\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n        \n        draw_text(x = 0, y = 0, text = \"Pygame says:\")\n        draw_text(x = width/2, y = height/2, text = \"Hi there!\", \n                  center = True)\n        \n        pygame.display.update()\ndef draw_text(x, y, text,\n              color = (255, 255, 255),\n              center = False):\n    rendered_text = FONT.render(text, True, color)\n    # retrieving the abstract rectangle of the text box\n    box = rendered_text.get_rect()\n    # this sets the x and why coordinates\n    if center:\n        box.center = (x,y)\n    else:\n        box.topleft = (x,y)\n    # This puts a pre-rendered object to the screen\n    SURF.blit(rendered_text, box)\n \nmain()def main():\n    while True:\n        SURF.fill((0,0,0))\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n        \n        draw_picture(x = WIDTH/2, y = HEIGHT/2, file = \"Beach.png\", \n                     center = True,\n                     scale = 0.5)\n        pygame.display.update()\ndef draw_picture(x, y, file, scale = 1, center = False):\n    picture = pygame.image.load(file)\n    # retrieving the box\n    box = picture.get_rect()\n    # transformation\n    if scale != 1:\n        new_width = int(box.width * scale)\n        new_height = int(box.height * scale)\n        picture = pygame.transform.smoothscale(picture, \n                                               (new_width, new_height))\n        box = picture.get_rect()\n    # getting the new box\n    if center:\n        box.center = (x,y)\n    else:\n        box.topleft = (x,y)\n    SURF.blit(picture, box)\n \nmain()"},{"path":"interaction.html","id":"exercises-8","chapter":"8 Interaction","heading":"8.5 Exercises","text":"","code":""},{"path":"interaction.html","id":"exercise-c.-transition-tables","chapter":"8 Interaction","heading":"8.5.1 Exercise C. Transition tables","text":"following code snippet, make transition table.","code":"STATE = \"A\"\nwhile True:\n    #ITC\n    for event in pygame.event.get():                        \n        if STATE == \"A\":\n            count = 0\n            if event.type == KEYDOWN and event.key == K_w:\n                STATE = \"B\"\n                print(STATE)\n        elif STATE == \"B\":\n            count = count + 1\n            if event.type == KEYDOWN and event.key == K_a:\n                timer = time()\n                STATE = \"C\"\n                print(STATE)\n        elif STATE == \"D\":\n            if event.type == KEYDOWN and event.key == K_SPACE:\n                if count < 10:\n                    STATE = \"B\"\n                else:\n                    STATE = \"quit\"\n                print(STATE)\n    #ATC\n    if STATE == \"C\":\n        present_picture()\n        if time() - timer > 3:\n            STATE = \"D\"\n        print(STATE)\n    elif STATE == \"quit\":\n        pygame.quit()\n        sys.exit()"},{"path":"interaction.html","id":"common-errors-5","chapter":"8 Interaction","heading":"8.6 Common errors","text":"forgot add continue transitionals.used drawing functions inside event handler loop.used wait command Pygame program.","code":""},{"path":"interaction.html","id":"think-further-7","chapter":"8 Interaction","heading":"8.7 Think Further","text":"","code":""},{"path":"solutions.html","id":"solutions","chapter":"9 Solutions","heading":"9 Solutions","text":"","code":""},{"path":"solutions.html","id":"chapter-1.-introduction","chapter":"9 Solutions","heading":"9.1 Chapter 1. Introduction","text":"","code":""},{"path":"solutions.html","id":"chapter-2.-variables-values-and-types","chapter":"9 Solutions","heading":"9.2 Chapter 2. Variables, values and types","text":"","code":""},{"path":"solutions.html","id":"exercise-1.-operators-1","chapter":"9 Solutions","heading":"9.2.1 Exercise 1. Operators","text":"","code":"x = 2\ny = 1.0\nprint(x + y)## 3.0x = 4.0\ny = x + 1\nprint(x + y)## 9.0x = 1\ny = \"1.0\"\nprint(x + y)x = 4\ny = 4.0\nprint(x == y)## Truex = 12\ny = x / 2\nprint(y >= 5)## True"},{"path":"solutions.html","id":"exercise-2.-values-1","chapter":"9 Solutions","heading":"9.2.2 Exercise 2. Values","text":"Statements 2 4 trueEach value exclusively belongs one data typeVariables can assigned type value","code":""},{"path":"solutions.html","id":"exercise-3.-mini-programs-2","chapter":"9 Solutions","heading":"9.2.3 Exercise 3. Mini programs","text":"","code":"x = \"1.0\"\ny = \"1\"\nprint(x + y)## 1.01x = 5\ny = 2\nprint((x / y) == 2.5)## Truex = 1\nx = x + 1\nx = x - 2\nprint(x)## 0"},{"path":"solutions.html","id":"exercise-4.-debugging-1","chapter":"9 Solutions","heading":"9.2.4 Exercise 4. Debugging","text":"goes wrong following code snippets?illegal variable name usedThe assignment operator used instead comparative operatorThe content inside brackets print statement lacks quotation marks","code":"x = 1\n2x = 2\nprint(x + 2x)x = 3\ny = \"3\"\nprint(x = y)name = \"Colin\"\nprint(This is + name)\n"},{"path":"solutions.html","id":"exercise-5.-string-concatenation-1","chapter":"9 Solutions","heading":"9.2.5 Exercise 5. String concatenation","text":"statement ‘Veni, vidi, vici.’ coined Gaius Julius Caesar.statement ‘Veni, vidi, vici.’, ‘came, saw, conquered.’, coined Gaius Julius Caesar.statement ‘Veni, vidi, vici.’ coined Gaius Julius Caesar, supposedly around 47 BC.\nAlternatively, also correct say execution stops print statement due errornous string concatenation line .+ operator joins two strings, resulting one string. string left side operator precedes string right side operator resulting string.+ operator joins two strings, resulting one string. string left side operator precedes string right side operator resulting string.myString = myString + s1 + s2 + year + s3: variable yearis type int causes TypeError concatenation; integer objects string objects concatenated. error can solved either explicit typecasting changing variable year string start .myString = myString + s1 + s2 + year + s3: variable yearis type int causes TypeError concatenation; integer objects string objects concatenated. error can solved either explicit typecasting changing variable year string start .","code":"myString = myString + s1 + s2 + str(year) + s3\n\nyear = \"47\""},{"path":"solutions.html","id":"exercise-6.-variable-names-1","chapter":"9 Solutions","heading":"9.2.6 Exercise 6. Variable names","text":"2ndMan: variable name starts digitm@n3: @ signs illegal characterman 5: space manand 5 illegalman_no._7: fullstop illegal. Python think man_no class (default) therefore throw NameError8thMan: starting digit","code":""},{"path":"solutions.html","id":"exercise-7.-stroop-task-welcome-message-1","chapter":"9 Solutions","heading":"9.2.7 Exercise 7. Stroop task welcome message","text":"Note: description specified code expected students. intention think happens internally PyGame implementing task ‘printing something screen’.Line 1 initializes new Surface object pre-defined message msgText color msgColor rendered assigns variable text_surface. PyGame draws text new Surface create image (Surface) text, blit image onto another Surface.Lines 2 3 transform surface rectangular shape specify center rectangular shape relation screen size program window.Line 4 copies text Surface position screen Surface, making visible.clarification, consult PyGame documentation.","code":"text_surface = font.render(msgText,True,msgColor,BACKGR_COL)\ntext_rectangle = text_surface.get_rect()\ntext_rectangle.center = (SCREEN_SIZE[0]/2.0,225)\nscreen.blit(text_surface,text_rectangle)"},{"path":"solutions.html","id":"exercise-8.-printing-1","chapter":"9 Solutions","heading":"9.2.8 Exercise 8. Printing","text":"Initially, variable trialsis string. Multiplying variable three thus results string consisting three times value trials. can fixed either initializing trials integer using explicit typecasting.","code":"participants = 52\ntrials = 200\nexperimental_sessions = 3\ntrials_pp = trials * experimental_sessions\nconditions = 4\n\ncondition1 = \"easy/limited\"\ncondition2 = \"easy/unlimited\"\ncondition3 = \"difficult/limited\"\ncondition4 = \"difficult/unlimited\"\n\n\nprint(\"In total,\", participants, \"participants participated in the study.\")## In total, 52 participants participated in the study.print(\"A 2x2 factorial between-subjects design was employed.\")## A 2x2 factorial between-subjects design was employed.print(\"The study examined the interaction of two independent variables: \")## The study examined the interaction of two independent variables:print(\"task difficulty (easy, difficult) and time (limited, unlimited).\")## task difficulty (easy, difficult) and time (limited, unlimited).print(conditions, \"conditions were devised, plus a control condition.\")## 4 conditions were devised, plus a control condition.print(\"The conditions were:\",condition1,\",\",condition2,\",\",condition3,\"and\",condition4)## The conditions were: easy/limited , easy/unlimited , difficult/limited and difficult/unlimitedprint(\"Participants were tested in\", experimental_sessions, \"experimental sessions.\")## Participants were tested in 3 experimental sessions.print(\"Each session consisted of\",trials,\"trials.\")## Each session consisted of 200 trials.print(\"In total, each partcipant thus completed\", trials_pp, \"trials.\")## In total, each partcipant thus completed 600 trials.trials_pp = int(trials) * experimental_sessions"},{"path":"solutions.html","id":"exercise-9.-using-python-as-calculator","chapter":"9 Solutions","heading":"9.2.9 Exercise 9. Using Python as calculator","text":"","code":"n1 = 37\nn2 = 456\nn3 = 1027%n1\nn2 = n2/n3\nn2 += 4\nn4 = n2%5\nn4 -= 17\nn4 = 65%n4/float(2)\n\nprint(n4)## -0.9285714285714306"},{"path":"solutions.html","id":"exercise-10.-a-boolean-puzzle-1","chapter":"9 Solutions","heading":"9.2.10 Exercise 10. A Boolean puzzle","text":"Hardcoded results also valid, exampleOnly n1*n2/float(n1) == n2 hardcoding work.","code":"n1 = 238\nn2 = 17\n\nprint(n1 > n2)## Trueprint(n1/17 == 14)## Trueprint(n1*n2/float(n1) == n2)## Trueprint(n1+(-n1) == n2 - n2 and n1+(-n1) == 972%243 and n2-n2 == 0)## Trueprint(n2*(n1*47/n2) == n1*47)## Trueprint(n1/4 == n2/1*3 or n1/4 == n2/17*59)## Falseprint(n1+(-238) == n2 - 17 and n1+(-238) == 972%243 and n2-17 == 0)"},{"path":"solutions.html","id":"chapter-3.-conditionals","chapter":"9 Solutions","heading":"9.3 Chapter 3. Conditionals","text":"","code":""},{"path":"solutions.html","id":"exercise-1.-boolean-logic-1","chapter":"9 Solutions","heading":"9.3.1 Exercise 1. Boolean logic","text":"output following code snippets?","code":"a = True\nb = False\n\nprint(a and b)## Falsea = True\nb = False\nprint(not a and b)## Falsea = True\nb = False\nprint((not a) or b)## Falsea = True\nb = False\n\nprint(not (a and b))## Truea = True\nb = False\n\nprint(not (a or b))## Falsea = 1\nb = 2\nc = 4\n\nprint(a >= b and c > a + b)## Falsea = 1\nb = 2\nc = 3\n\nprint(b % a >= c - (a + b))## True"},{"path":"solutions.html","id":"exercise-2.-state-charts-1","chapter":"9 Solutions","heading":"9.3.2 Exercise 2. State charts","text":"","code":"# Variables\nSTATE = \"A\"\nnumber_of_trials = 0\n\nwhile True:\n  #ITC\n  for event in pygame.event.get():\n      if STATE == \"A\":\n          number_of_trials = number_of_trials + 1\n          if event.type==KEYDOWN and event.key == K_SPACE:\n              STATE = \"C\"\n      elif STATE == \"C\":\n          if event.type==KEYDOWN and event.key == K_A or event.key == K_D:\n              arrival_at_B = time()\n              STATE = \"B\"\n            \n  #ATC\n  if STATE == \"B\":\n      if time() - arrival_at_B > 3:\n          if number_of_trials < 15:\n              STATE = \"A\"\n          else:\n              pygame.quit()\n              sys.exit()"},{"path":"solutions.html","id":"exercise-3.-transition-tables-1","chapter":"9 Solutions","heading":"9.3.3 Exercise 3. Transition tables","text":"following code snippet, make transition table.","code":"STATE = \"A\"\n\nwhile True:\n    #ITC\n    for event in pygame.event.get():                        \n        if STATE == \"A\":\n            count = 0\n            if event.type == KEYDOWN and event.key == K_w:\n                STATE = \"B\"\n                print(STATE)\n        elif STATE == \"B\":\n            count = count + 1\n            if event.type == KEYDOWN and event.key == K_a:\n                timer = time()\n                STATE = \"C\"\n                print(STATE)\n        elif STATE == \"D\":\n            if event.type == KEYDOWN and event.key == K_SPACE:\n                if count < 10:\n                    STATE = \"B\"\n                else:\n                    STATE = \"quit\"\n                print(STATE)\n\n    #ATC\n    if STATE == \"C\":\n        present_picture()\n        if time() - timer > 3:\n            STATE = \"D\"\n        print(STATE)\n    elif STATE == \"quit\":\n        pygame.quit()\n        sys.exit()"},{"path":"solutions.html","id":"exercise-4.-mini-programs-1","chapter":"9 Solutions","heading":"9.3.4 Exercise 4. Mini programs","text":"output following mini programs?Nothingx divisible 32","code":"x = 5\ny = 0\n\nif x >= 5 and y != False:\n    print(y/x)x = 12\n\nif x%3 == 0:\n    print(\"x is divisible by 3\")\nelif x%4 == 0:\n    print(\"x is divisible by 4\")x = 2\ny = 0\n\nif y + 1 == x or not x * 1 <= y:\n   print(x + y)"},{"path":"solutions.html","id":"exercise-5.-following-the-control-flow-1","chapter":"9 Solutions","heading":"9.3.5 Exercise 5. Following the control flow","text":"","code":"myString = \"Hello, World!\"\nif len(myString) >= 13 or \"ello\" in myString:\n    myString = \"Hi, programming aspirant!\"\nelif len(myString) <= 12 and \"ello\" in myString:\n    myString = \"Hello, from the other side.\"\nprint(myString)## Hi, programming aspirant!if \"Hi\" in myString:\n    if len(myString) < 25:\n        myString = \"Wow, my computer seems to answer!\"\n    elif len(myString) > 25:\n        myString = myString + \" -- Your computer\"\n    else:\n        myString = myString + \" How are you?\"\nelse:\n    if len(myString) <= 29:\n        myString = \"How are you, my computer?\"\n    elif len(myString) == 27 and \"Hello\" in myString:\n        myString = myString + \" I must have called a thousand times.\"\n    else:\n        myString = myString + \" -- Adele\"\nprint(myString)## Hi, programming aspirant! How are you?if \"computer\" in myString or len(myString) == 38 or \"HI\" in myString:\n    myString = myString + \" I myself am doing fine.\"\nelse:\n    myString = myString + \" I am doing just fine.\"\nprint(myString)## Hi, programming aspirant! How are you? I myself am doing fine."},{"path":"solutions.html","id":"exercise-6.-indentation-1","chapter":"9 Solutions","heading":"9.3.6 Exercise 6. Indentation","text":"","code":"myNumber = 4\nif myNumber < 20 and myNumber > 0:\n    if myNumber > 0 and myNumber < 15:\n        myNumber = myNumber + 3\n    else:\n        myNumber = myNumber - 3\n        print(\"This is a dead end statement.\")\nelif myNumber > 20:\n    print(\"This should only be printed if myNumber exceeds 20!\")\nelse:\n    myNumber = 17"},{"path":"solutions.html","id":"exercise-7.-pseudo-code-conditionals-1","chapter":"9 Solutions","heading":"9.3.7 Exercise 7. Pseudo code conditionals","text":"Number 3 example infamous Modus Ponens, condition implies condition b. Whenever True, b must also True.\nfamous? Two reasons:mathematical proofs, called sufficient condition b, meaning True, b must True well. However, exclude possibility b becomes True due another condition c. example:\n\nrains streets wet\n\nexclude possibility street wet washed water.mathematical proofs, called sufficient condition b, meaning True, b must True well. However, exclude possibility b becomes True due another condition c. example:rains streets wetdoes exclude possibility street wet washed water.psychology reasoning shown people difficulties checking modus ponens. asked verify example, people first check whether street wet, although relevant question whether raining, indeed.psychology reasoning shown people difficulties checking modus ponens. asked verify example, people first check whether street wet, although relevant question whether raining, indeed.","code":"\n1.\nIf not rain\n    if Jan has time\n        do swimming\n    else\n        do hiking\nelse\n    do read\n    \n2.\nif age >= 18 and not alcohol abuse\n    set participation to True\n    \n3.\nif rain\n    set wet to True\n    \n4.\nif eligible\n    do briefing\n    if condition equals A\n        do lead to 001\n    else\n        do lead to 002\nelse\n    do explain\n"},{"path":"solutions.html","id":"exercise-8.-modify-stroop-task-1","chapter":"9 Solutions","heading":"9.3.8 Exercise 8. Modify Stroop Task","text":"","code":"import pygame\nimport sys\nfrom time import time\nimport random\nfrom pygame.locals import *\nfrom pygame.compat import unichr_, unicode_\n\n##### VARIABLES #####\n# Colors\ncol_white = (250, 250, 250)\ncol_black = (0, 0, 0)\ncol_gray = (220, 220, 220)\ncol_red = (250, 0, 0)\ncol_green = (0, 200, 0)\ncol_blue = (0, 0, 250)\ncol_yellow = (250,250,0)\n\nNTRIALS = 5\n\nWORDS    = (\"red\", \"green\", \"blue\")\n\nCOLORS   = {\"red\": col_red,\n            \"green\": col_green,\n            \"blue\": col_blue}\n\nKEYS     = {\"red\": K_b,\n            \"green\": K_n,\n            \"blue\": K_m}\n\n\nBACKGR_COL = col_gray\nSCREEN_SIZE = (700, 500)\n\npygame.init()\npygame.display.set_mode(SCREEN_SIZE) \npygame.display.set_caption(\"Stroop Test\")\n\nscreen = pygame.display.get_surface()\nscreen.fill(BACKGR_COL)\n\nfont = pygame.font.Font(None, 80)\nfont_small = pygame.font.Font(None, 40) \n\n\ndef main():\n    \"\"\" Start the Stroop task.\n    \"\"\"\n    ## Variables\n    STATE = \"welcome\"\n    trial_number = 0\n\n    # for gathering the response times\n    RT = []\n\n    while True:\n        pygame.display.get_surface().fill(BACKGR_COL)        \n\n        # Changing states by user input\n        for event in pygame.event.get():\n            # welcome screen --> prepare next trial (space bar)\n            if STATE == \"welcome\":\n                if event.type == KEYDOWN and event.key == K_SPACE:\n                    STATE = \"prepare_next_trial\"\n                    print(STATE)\n\n            # wait for response --> feedback (b, n, m)\n            elif STATE == \"wait_for_response\":\n                if event.type == KEYDOWN and event.key in KEYS.values():\n                    # remember when the user has reacted\n                    time_when_reacted = time()\n                    # calculate the response time\n                    this_reaction_time = time_when_reacted - time_when_presented\n                    RT.append(this_reaction_time)\n                    # was the response correct?\n                    this_correctness = (event.key == KEYS[this_color])\n                    STATE = \"feedback\"\n                    print(STATE)\n\n            if event.type == QUIT:\n                STATE = \"quit\"\n\n        # automatic state transitions\n        # prepare next trial --> wait for response (immediatly)\n        if STATE == \"prepare_next_trial\":\n            trial_number = trial_number + 1\n            # randomly pick word and color\n            this_word  = pick_color()\n            this_color = pick_color()\n            # remember when stimulus was presented\n            time_when_presented = time()\n            STATE = \"wait_for_response\"\n            print(STATE)\n\n        # show feedback, then advance to next trial or goodbye  (for 1s)\n        if STATE == \"feedback\" and (time() - time_when_reacted) > 1:\n            if trial_number < NTRIALS:\n                STATE = \"prepare_next_trial\"\n            else:\n                STATE = \"goodbye\"\n            print(STATE)\n\n        # Drawing to the screen\n        if STATE == \"welcome\":\n            draw_welcome()\n            draw_button(SCREEN_SIZE[0]*1/4, 450, \"Red: B\", col_red)\n            draw_button(SCREEN_SIZE[0]*2/4, 450, \"Green: N\", col_green)\n            draw_button(SCREEN_SIZE[0]*3/4, 450, \"Blue: M\", col_blue)\n        \n        if STATE == \"wait_for_response\":\n            draw_stimulus(this_color, this_word)\n            draw_button(SCREEN_SIZE[0]*1/4, 450, \"Red: B\", col_red)\n            draw_button(SCREEN_SIZE[0]*2/4, 450, \"Green: N\", col_green)\n            draw_button(SCREEN_SIZE[0]*3/4, 450, \"Blue: M\", col_blue)\n        \n        if STATE == \"feedback\":\n            draw_feedback(this_correctness, this_reaction_time)\n        \n        if STATE == \"goodbye\":\n            draw_goodbye()\n        \n        if STATE == \"quit\":\n            pygame.quit()\n            sys.exit()\n\n        pygame.display.update()\n        \ndef pick_color():\n    \"\"\" Return a random word.\n    \"\"\"\n    random_number = random.randint(0,2)\n    return WORDS[random_number]\n\ndef draw_button(xpos, ypos, label, color):\n    text = font_small.render(label, True, color, BACKGR_COL)\n    text_rectangle = text.get_rect()\n    text_rectangle.center = (xpos, ypos)\n    screen.blit(text, text_rectangle)\n\ndef draw_welcome():\n    text_surface = font.render(\"STROOP Experiment\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n    text_surface = font_small.render(\"Press Spacebar to continue\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,300)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_stimulus(color, word):\n    text_surface = font.render(word, True, COLORS[color], col_gray)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_feedback(correct, reaction_time):\n    if correct:\n        text_surface = font_small.render(\"correct\", True, col_black, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n        screen.blit(text_surface, text_rectangle)\n        text_surface = font_small.render(str(int(reaction_time * 1000)) + \"ms\", True, col_black, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,200)\n        screen.blit(text_surface, text_rectangle)\n        if reaction_time > 5:\n            text_surface = font_small.render(\"Come on, you can be faster!\", True, col_black, BACKGR_COL)\n            text_rectangle = text_surface.get_rect()\n            text_rectangle.center = (SCREEN_SIZE[0]/2.0,250)\n            screen.blit(text_surface, text_rectangle)\n            \n    else:\n        text_surface = font_small.render(\"Wrong key!\", True, col_red, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n        screen.blit(text_surface, text_rectangle)\n        #text_surface = font_small.render(\"Press Spacebar to continue\", True, col_black, BACKGR_COL)\n\n\ndef draw_goodbye():\n    text_surface = font_small.render(\"END OF THE EXPERIMENT\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n    text_surface = font_small.render(\"Close the application.\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,200)\n    screen.blit(text_surface, text_rectangle)\n    \nmain()"},{"path":"solutions.html","id":"exercise-9.-simplify-nested-conditionals-1","chapter":"9 Solutions","heading":"9.3.9 Exercise 9. Simplify nested conditionals","text":"","code":"# participant details #\nage = 20\ngender = \"Male\"\nstudy = \"Psychology\"\nspeaks_Dutch = True\ncoffee = True\ncondition = \"not eligible for the experiment\"\n\n## version 1\n### The order of checking for study, coffee and\n### language proficiency are interchangable\nif age >= 18:\n    if study == \"Psychology\" or study == \"Communication Sciences\":\n        if coffee == True and speaks_Dutch == True:\n            if gender == \"Female\":\n                condition = \"A\"\n            else:\n                condition = \"B\"\n        else:\n            print(\"Participant is not eligible to take part in the experiment.\")\n    else:\n        print(\"Participant is not eligible to take part in the experiment.\")\nelse:\n    print(\"Participant is not eligible to take part in the experiment.\")\n    \n\n## version 2             \nif age >= 18 and study == \"Psychology\" or study == \"Communication Sciences\" and coffee == True and speaks_Dutch == True:\n    if gender == \"Female\":\n        condition = \"A\"\n    else:\n        condition = \"B\"\nelse:\n    print(\"Participant is not eligible to take part in the experiment.\")"},{"path":"solutions.html","id":"exercise-10.-flow-chart-conditionals-1","chapter":"9 Solutions","heading":"9.3.10 Exercise 10. Flow chart conditionals","text":"","code":"n = -1\nif n > 0:\n    n = 2*n\nelse:\n    n += 1\nif n > 4*241%17:\n    n -= 5\nelse:\n    if n > 10:\n        n += 50\n    else:\n        n = n%2\nprint(n)"},{"path":"solutions.html","id":"chapter-4.-lists","chapter":"9 Solutions","heading":"9.4 Chapter 4. Lists","text":"","code":""},{"path":"solutions.html","id":"exercise-1.-indexing-1","chapter":"9 Solutions","heading":"9.4.1 Exercise 1. Indexing","text":"output following code snippets?","code":"a = [6, 7]\nb = [4, 5]\nb.append(a)\n\nprint(b)## [4, 5, [6, 7]]d = {1: 'a',\n    'a': 1}\n    \nprint(d[1])## aa = [1]\nb = ('a', 2)\na.extend(b)\n\nprint(a[1])## aa, b = (['a', 'd'], ['b', 'c'])\n\nprint(b[0])## ba = [1, 2, 3]\n\nprint(a[-1])## 3a = (1, 2, [3, 4], 5)\n\nprint(a[2][1])## 4"},{"path":"solutions.html","id":"exercise-2.-debugging-1","chapter":"9 Solutions","heading":"9.4.2 Exercise 2. Debugging","text":"following code snippets throw error? anything goes wrong, go wrong?ValueError thrown. many values right side equals sign = unpack.IndexError thrown. appending b, three elements. 3 valid index.error thrown, 3 appended [1, 2].error thrown, list keys contains one element, ('', 'b').","code":"a, b = 'Sigmund', 'Freud', (1856, 1939)## Error in py_call_impl(callable, dots$args, dots$keywords): ValueError: too many values to unpack (expected 2)\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>a = [1, 2]\nb = (3, 4)\n\na.append(b)\nprint(a[3])## Error in py_call_impl(callable, dots$args, dots$keywords): IndexError: list index out of range\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>a = ('a', [1, 2])\n\na[1].append(3)a = {('a', 'b'): 3}\n\nprint(a.keys())## dict_keys([('a', 'b')])"},{"path":"solutions.html","id":"exercise-3.-mini-programs-3","chapter":"9 Solutions","heading":"9.4.3 Exercise 3. Mini programs","text":"output following mini programs?[][3, 4]False1","code":"a = {}\n\nprint(a.keys())## dict_keys([])a = []\nb = ([1, 2], [3, 4], [5, 6])\n\na.extend(b)\nprint(a[1])## [3, 4]a = ('a', ('b', 'c'))\n\nprint('b' in a)## Falsea = [{'a': 1 }, {'a': 2}]\n\nif 'a' in a[0]:\n    print(a[0]['a'])\nelif 'a' in a[1]:\n    print(a[1]['a'])\n  ## 1"},{"path":"solutions.html","id":"exercise-1.-shopping-list","chapter":"9 Solutions","heading":"9.4.4 Exercise 1. Shopping list","text":"['buns',  'cheese',  'milk',  'oatmeal',  'blueberries',  'oranges',  'apples',  'chocolate',  ['eggs', 'yoghurt', 'salmon'],  ['icing sugar',   'whipping cream',   'lemons',   'flower',   'vanilla sugar',   'eggs',   'baking powder',   'margarine']]","code":""},{"path":"solutions.html","id":"exercise-2.-dictionnaries","chapter":"9 Solutions","heading":"9.4.5 Exercise 2. Dictionnaries","text":"","code":"('Erik', 'Erikson', (1902, 1994))\n('Theory of Cognitive Development',)\n1856\n\"Frederic\"\n\"Skinner Box\"\n\"positive reinforcement\""},{"path":"solutions.html","id":"exercise-3.-selecting-elements","chapter":"9 Solutions","heading":"9.4.6 Exercise 3. Selecting elements","text":"","code":"shoppingList[2]\nshoppingList[0][0]\ngrades[\"p3\"][3]\ngrades[\"p5\"][1]\ngrades[\"p6\"][0]\ngrades[\"p1\"][4][2]\ngrades[\"p5\"][4][0]\ngrades[\"p6\"][4][1]"},{"path":"solutions.html","id":"exercise-4.-adjust-a-dictionnary-data-set","chapter":"9 Solutions","heading":"9.4.7 Exercise 4. Adjust a dictionnary data set","text":"","code":"#1\ndataset['p1'][5] = 6.1\ndataset['p7'][5] = 7.4\n\n#2\ndataset['p5'][0] = 23\ndataset['p5'][1] = \"Female\"\n\n#3\ndataset['p4'][4][2] = True\ndataset['p4'][4][3] = True\n## or\ndataset['p4'][4] = [True,True,True,True,True]\n\n#4\ndataset['p2'][3] = \"B-Health_Sciences\"\n\n#5\ndataset['p4'].append(\"expelled\")\n## or\ndataset['p4'] = dataset['p4'] + [\"expelled\"]\n\n#final dataset\ndataset = {'p1':[21,\"Female\",\"Dutch\",\"B-Psychology\",[True,False,True,False,False],6.1],\n           'p2':[20,\"Female\",\"Dutch\",\"B-Health_Sciences\",[True,True,True,False,True],8.4],\n           'p3':[21,\"Female\",\"Dutch\",\"B-Applied_Mathematics\",[False,True,True,False,True],7.8],\n           'p4':[23,\"Male\", \"German\",\"B-Communication_Science\",[True,True,True,True,True],8.8,\"expelled\"],\n           'p5':[23,\"Female\",\"Dutch\",\"M-Business_Administration\",[False,False,True,True,True],7.6],\n           'p6':[19,\"Male\",\"Swedish\",\"B-Computer_Science\",[True,False,False,True,False],7.5],\n           'p7':[19,\"Male\",\"German\",\"B-Communication_Science\",[True,True,False,True,True],7.4]\n           }"},{"path":"solutions.html","id":"exercise-5.-a-dictionnary-data-set","chapter":"9 Solutions","heading":"9.4.8 Exercise 5. A dictionnary data set","text":"","code":"import numpy as np\n\nparticipants = {'p1':(\"Male\",19,\"Dutch\",\"Student\"),\n                'p2':(\"Male\",47,\"Dutch\",\"Pharmacist\"),\n                'p3':(\"Male\",31,\"Italian\",\"PhD Student\"),\n                'p4':(\"Female\",22,\"German\",\"Student\"),\n                'p5':(\"Female\",46,\"Dutch\",\"Florist\"),\n                'p6':(\"Male\",27,\"Dutch\",\"Student\"),\n                'p7':(\"Female\",22,\"Dutch\",\"Police trainee\"),\n                'p8':(\"Female\",26,\"Indian\",\"Architect\"),\n                'p9':(\"Male\",18,\"American\",\"Student\"),\n                'p10':(\"Male\",20,\"Chinese\",\"Student\")\n               }\n\n\"\"\" Calculate the average age \"\"\"\nmean_age = (participants['p1'][1]+participants['p2'][1]+participants['p3'][1]+participants['p4'][1]+participants['p5'][1]+participants['p6'][1]+participants['p7'][1]+participants['p8'][1]+participants['p9'][1]+participants['p10'][1])/float(len(participants))\n\n# A more elegant, manual solution you will learn about in \"Chapter 5. Loops\"\n# would be as follows:\nage_sum = 0\nfor key in participants.keys():\n    age_sum += participants[key][1]\nloop_mean = age_sum/float(len(participants))\n\n# Using Numpy greatly simplifies calculations, but\n# you first need to transform the data to fit your needs.\n# You will see, however, that extracting the age variable and saving it\n# separately will simplify other statistical operations later on.\nage = [participants['p1'][1],\n       participants['p2'][1],\n       participants['p3'][1],\n       participants['p4'][1],\n       participants['p5'][1],\n       participants['p6'][1],\n       participants['p7'][1],\n       participants['p8'][1],\n       participants['p9'][1],\n       participants['p10'][1]]\n\nnumpy_mean = np.mean(age)\n\n\n\"\"\" Calculate the standard deviation of the age variable \"\"\"\n\nstd_age = np.std(age)\n\n\"\"\" Calculate the minimum and maximum of the age variable \"\"\"\n\nminimum = np.nanmin(age)\nmaximum = np.nanmax(age)"},{"path":"solutions.html","id":"exercise-6.-stroop-extension","chapter":"9 Solutions","heading":"9.4.9 Exercise 6. Stroop extension","text":"","code":"# -*- coding: utf-8 -*-\nimport pygame\nimport sys\nfrom time import time\nimport random\nfrom pygame.locals import *\nfrom pygame.compat import unichr_, unicode_\n\n##### VARIABLES #####\n# Colors\ncol_white = (250, 250, 250)\ncol_black = (0, 0, 0)\ncol_gray = (220, 220, 220)\ncol_red = (250, 0, 0)\ncol_green = (0, 200, 0)\ncol_blue = (0, 0, 250)\ncol_yellow = (250,250,0)\ncol_pink = (250,0,127)\n\nNTRIALS = 5\n\nWORDS    = (\"red\", \"green\", \"blue\", \"yellow\", \"pink\")\n\nCOLORS   = {\"red\": col_red,\n            \"green\": col_green,\n            \"blue\": col_blue,\n            \"yellow\": col_yellow,\n            \"pink\": col_pink}\n\nKEYS     = {\"red\": K_b,\n            \"green\": K_n,\n            \"blue\": K_m,\n            \"yellow\":K_v,\n            \"pink\":K_c}\n\n\nBACKGR_COL = col_gray\nSCREEN_SIZE = (700, 500)\n\npygame.init()\npygame.display.set_mode(SCREEN_SIZE) \npygame.display.set_caption(\"Stroop Test\")\n\nscreen = pygame.display.get_surface()\nscreen.fill(BACKGR_COL)\n\nfont = pygame.font.Font(None, 80)\nfont_small = pygame.font.Font(None, 40)\n\np_numbers = range(1,11)\n\nconditions = {\"Stroop_3\":[1,2,4,8,10],\n              \"Stroop_5\":[3,5,6,7,9]}\n\ndef main():\n    \"\"\" Start the Stroop task.\n    \"\"\"\n    ## Variables\n    STATE = \"welcome\"\n    trial_number = 0\n    # initialize participant number\n    p_number = 0\n\n    # for gathering the response times\n    RT = []\n\n    while True:\n        pygame.display.get_surface().fill(BACKGR_COL)        \n\n        # Changing states by user input\n        for event in pygame.event.get():\n            # welcome screen --> prepare next trial (space bar)\n            if STATE == \"welcome\":\n                if event.type == KEYDOWN and event.key == K_SPACE:\n                    STATE = \"enter_participant_number\"\n                    print(STATE)\n\n            # wait for response --> feedback (b, n, m)\n            elif STATE == \"wait_for_response\":\n                if event.type == KEYDOWN and event.key in KEYS.values():\n                    # remember when the user has reacted\n                    time_when_reacted = time()\n                    # calculate the response time\n                    this_reaction_time = time_when_reacted - time_when_presented\n                    RT.append(this_reaction_time)\n                    # was the response correct?\n                    this_correctness = (event.key == KEYS[this_color])\n                    STATE = \"feedback\"\n                    print(STATE)\n            \n            elif STATE == \"enter_participant_number\":\n                p_number = prompt()\n                STATE = \"transition_experiment\"\n                print(STATE + \"\\nRETURN TO PYGAME WINDOW\")\n                \n            elif STATE == \"transition_experiment\":\n                if event.type == KEYDOWN and event.key == K_SPACE:\n                    STATE = \"prepare_next_trial\"\n\n            if event.type == QUIT:\n                STATE = \"quit\"\n\n        # automatic state transitions\n        # prepare next trial --> wait for response (immediatly)\n        if STATE == \"prepare_next_trial\":\n            trial_number = trial_number + 1\n            # randomly pick word and color\n            # depending on condition\n            if p_number in conditions[\"Stroop_3\"]:\n                this_word  = pick_color()\n                this_color = pick_color()\n            else:\n                this_word = pick_color5()\n                this_color = pick_color5()\n            # remember when stimulus was presented\n            time_when_presented = time()\n            STATE = \"wait_for_response\"\n            print(STATE)\n\n        # show feedback, then advance to next trial or goodbye  (for 1s)\n        if STATE == \"feedback\" and (time() - time_when_reacted) > 1:\n            if trial_number < NTRIALS:\n                STATE = \"prepare_next_trial\"\n            else:\n                STATE = \"goodbye\"\n            print(STATE)\n\n        # Drawing to the screen\n        if STATE == \"welcome\":\n            draw_welcome()\n            draw_button(SCREEN_SIZE[0]*1/6, 450, \"Pink: C\", col_pink)\n            draw_button(SCREEN_SIZE[0]*2/6, 450, \"Yellow: V\", col_yellow)\n            draw_button(SCREEN_SIZE[0]*3/6, 450, \"Red: B\", col_red)\n            draw_button(SCREEN_SIZE[0]*4/6, 450, \"Green: N\", col_green)\n            draw_button(SCREEN_SIZE[0]*5/6, 450, \"Blue: M\", col_blue)\n        \n        if STATE == \"enter_participant_number\":\n            draw_enter()\n        \n        if STATE == \"transition_experiment\":\n            draw_transition()\n            if p_number in conditions[\"Stroop_3\"]:\n                draw_button(SCREEN_SIZE[0]*1/4, 450, \"Red: B\", col_red)\n                draw_button(SCREEN_SIZE[0]*2/4, 450, \"Green: N\", col_green)\n                draw_button(SCREEN_SIZE[0]*3/4, 450, \"Blue: M\", col_blue)\n            else:\n                draw_button(SCREEN_SIZE[0]*1/6, 450, \"Pink: C\", col_pink)\n                draw_button(SCREEN_SIZE[0]*2/6, 450, \"Yellow: V\", col_yellow)\n                draw_button(SCREEN_SIZE[0]*3/6, 450, \"Red: B\", col_red)\n                draw_button(SCREEN_SIZE[0]*4/6, 450, \"Green: N\", col_green)\n                draw_button(SCREEN_SIZE[0]*5/6, 450, \"Blue: M\", col_blue)\n        \n        if STATE == \"wait_for_response\":\n            draw_stimulus(this_color, this_word)\n            if p_number in conditions[\"Stroop_3\"]:\n                draw_button(SCREEN_SIZE[0]*1/4, 450, \"Red: B\", col_red)\n                draw_button(SCREEN_SIZE[0]*2/4, 450, \"Green: N\", col_green)\n                draw_button(SCREEN_SIZE[0]*3/4, 450, \"Blue: M\", col_blue)\n            else:\n                draw_button(SCREEN_SIZE[0]*1/6, 450, \"Pink: C\", col_pink)\n                draw_button(SCREEN_SIZE[0]*2/6, 450, \"Yellow: V\", col_yellow)\n                draw_button(SCREEN_SIZE[0]*3/6, 450, \"Red: B\", col_red)\n                draw_button(SCREEN_SIZE[0]*4/6, 450, \"Green: N\", col_green)\n                draw_button(SCREEN_SIZE[0]*5/6, 450, \"Blue: M\", col_blue)\n        \n        if STATE == \"feedback\":\n            draw_feedback(this_correctness, this_reaction_time)\n        \n        if STATE == \"goodbye\":\n            draw_goodbye()\n        \n        if STATE == \"quit\":\n            pygame.quit()\n            sys.exit()\n\n        pygame.display.update()\n\ndef prompt():\n    p_number = 0\n    while p_number == 0:\n        p_number = int(raw_input(\"Please enter participant number here:\"))\n    if p_number in range(1,len(p_numbers)+1):\n        return p_number\n    else:\n        print(\"Unknown participant number, valid participant numbers are 1 to 10\")\n        prompt()\n                    \ndef pick_color():\n    \"\"\" Return a random word.\n    \"\"\"\n    random_number = random.randint(0,2)\n    return WORDS[random_number]\n\ndef pick_color5():\n    \"\"\" Return a random word,\n    5 color Stroop version\n    \"\"\"\n    random_number = random.randint(0,4)\n    return WORDS[random_number]\n\ndef draw_button(xpos, ypos, label, color):\n    text = font_small.render(label, True, color, BACKGR_COL)\n    text_rectangle = text.get_rect()\n    text_rectangle.center = (xpos, ypos)\n    screen.blit(text, text_rectangle)\n\ndef draw_welcome():\n    text_surface = font.render(\"STROOP Experiment\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n    text_surface = font_small.render(\"Press Spacebar to continue\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,300)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_enter():\n    text_surface = font_small.render(\"Please enter participant number in console\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,250)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_transition():\n    text_surface = font_small.render(\"Press Spacebar to start the experiment\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,250)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_stimulus(color, word):\n    text_surface = font.render(word, True, COLORS[color], col_gray)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n\ndef draw_feedback(correct, reaction_time):\n    if correct:\n        text_surface = font_small.render(\"correct\", True, col_black, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n        screen.blit(text_surface, text_rectangle)\n        text_surface = font_small.render(str(int(reaction_time * 1000)) + \"ms\", True, col_black, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,200)\n        screen.blit(text_surface, text_rectangle)\n    else:\n        text_surface = font_small.render(\"Wrong key!\", True, col_red, BACKGR_COL)\n        text_rectangle = text_surface.get_rect()\n        text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n        screen.blit(text_surface, text_rectangle)\n        #text_surface = font_small.render(\"Press Spacebar to continue\", True, col_black, BACKGR_COL)\n\n\ndef draw_goodbye():\n    text_surface = font_small.render(\"END OF THE EXPERIMENT\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,150)\n    screen.blit(text_surface, text_rectangle)\n    text_surface = font_small.render(\"Close the application.\", True, col_black, BACKGR_COL)\n    text_rectangle = text_surface.get_rect()\n    text_rectangle.center = (SCREEN_SIZE[0]/2.0,200)\n    screen.blit(text_surface, text_rectangle)\n    \nmain()"},{"path":"solutions.html","id":"chapter-5.-loops","chapter":"9 Solutions","heading":"9.5 Chapter 5. Loops","text":"","code":""},{"path":"solutions.html","id":"exercise-1.-following-the-control-flow-i-1","chapter":"9 Solutions","heading":"9.5.1 Exercise 1. Following the control flow I","text":"output following code snippets?","code":"for i in range(len([1,2,3])):\n    print(i)## 0\n## 1\n## 2for i in range(len([])):\n    print(i)a = 0\nfor i in range(3):\n    a += i\n    print(a + i)\n    ## 0\n## 2\n## 5a = 0\nb = 30\nfor i in range(5):\n    a += i\n    b -= i\n    \nprint(a + b)## 30for i in range(1,3):\n    print(i)## 1\n## 2i = 10\nwhile i > 5:\n    print(i - 5)\n    i -= 2## 5\n## 3\n## 1a = 2\nb = (1,2)\n\nwhile a != 0:\n    for i in b:\n        print(a + i)\n    a -= 1## 3\n## 4\n## 2\n## 3"},{"path":"solutions.html","id":"exercise-2.-debugging-i-1","chapter":"9 Solutions","heading":"9.5.2 Exercise 2. Debugging I","text":"following code snippets throw error? , goes wrong? one answer correct.correct answer :TypeError thrown statement include sequence iterate .correct answer :error thrown, user guesses 43, Ding, ding! Correct, number 43 printed, program terminate.correct answer :error thrown, output mini program 0, 6.0, 0, 9.0 element multiplied element b.","code":"a = [4,6,8]\n\nfor i in len(a):\n    print(a[i])myNumber = 43\nwhile True:\n    guess = input(\"Enter a number:\")\n    if guess > 43:\n        print(\"My number is smaller than {0}\".format(guess))\n    elif guess < 43:\n        print(\"My number is greater than {0}\".format(guess))\n    else:\n        print(\"Ding, ding! Correct, my number is {0}\".format(myNumber))a = [4,6]\nb = [0, 1.5]\nfor i in a:\n    for j in range(len(b)):\n        print(i * b[j])"},{"path":"solutions.html","id":"exercise-3.-controlling-the-flow","chapter":"9 Solutions","heading":"9.5.3 Exercise 3. Controlling the flow","text":"","code":""},{"path":"solutions.html","id":"exercise-4.-following-the-control-flow-ii","chapter":"9 Solutions","heading":"9.5.4 Exercise 4. Following the control flow II","text":"Disclaimer: possible Python interpreter returns keys dataset different order shown execute dataset.keys() system. dictionaries stored internally computer memory. well hash functions utilized efficiency reasons. consequence, order keys dictionary unspecified (use index operator access elements dictionary p1 necessarily first key shown list). also means display keys dictionary list (keys() method ), order keys occur list can differ system system. means worry system returns different order execute dataset.keys(). important understand dataset[dataset.keys()[0]] returns value displayed execute code snippet.","code":"['p2', 'p3', 'p1', 'p6', 'p7', 'p4', 'p5', 'p10', 'p8', 'p9']\n(20, 'Female', 'Dutch', 'B-Psychology')\n(20, 'Female', 'Dutch', 'B-Psychology')\n20\n5\n4\n21.8\n19.75"},{"path":"solutions.html","id":"exercise-5.-debugging","chapter":"9 Solutions","heading":"9.5.5 Exercise 5. Debugging","text":"","code":"data = {'p1':(21,\"Female\",\"Condition B\",[0.675,0.777,0.778,0.62,0.869]),\n        'p2':(20,\"Female\",\"Condition A\",[0.599,0.674,0.698,0.569,0.7]),\n        'p3':(21,\"Female\",\"Condition A\",[0.655,0.645,0.633,0.788,0.866]),\n        'p4':(23,\"Male\", \"Condition A\",[0.721,0.701,0.743,0.682,0.654]),\n        'p5':(20,\"Male\",\"Condition B\",[0.721,0.701,0.743,0.682,0.654]),\n        'p6':(19,\"Male\",\"Condition B\",[0.711,0.534,0.637,0.702,0.633]),\n        'p7':(19,\"Male\",\"Condition B\",[0.687,0.657,0.766,0.788,0.621]),\n        'p8':(24,\"Female\",\"Condition A\",[0.666,0.591,0.607,0.704,0.59]),\n        'p9':(23,\"Female\",\"Condition B\",[0.728,0.544,0.671,0.689,0.644]),\n        'p10':(18,\"Male\",\"Condition A\",[0.788,0.599,0.621,0.599,0.623])\n        }\n\nfastest = (\"initialization\",100)\nfor participant in data:\n    RTsum = 0\n    for i in range(len(data[participant][3])-1):\n        RTsum += data[participant][3][i]\n    RTmean = RTsum/len(data[participant][3])\n    if RTmean < fastest[1]:\n        fastest = (participant,RTmean)\n        \nslowest = (\"initialization\",0)\nfor participant in data:\n    RTsum = 0\n    for RT in data[participant][3]:\n        RTsum += RT\n    RTmean = RTsum/len(data[participant][3])\n    if RTmean > slowest[1]:\n        slowest = (participant,RTmean)\n        \nall_mean = 0\nall_sum = 0\nnumber_of_trials = 0\nfor participant in data:\n    counter = 0\n    while counter < len(data[participant][3]):\n        all_sum += data[participant][3][counter]\n        number_of_trials += 1\n        counter += 1\nall_mean = all_sum/number_of_trials*len(data)\n    \nprint(\"fastest:\", fastest)\nprint(\"slowest:\", slowest)\nprint(\"all_mean:\", all_mean)"},{"path":"solutions.html","id":"exercise-6.-nested-loops","chapter":"9 Solutions","heading":"9.5.6 Exercise 6. Nested loops","text":"","code":"participants = [\n    (\"p1\", [\"Condition 1\",\"Location A\",\"withdrew\",\"no audio\"]),\n    (\"p2\", [\"Condition 1\",\"Location A\",\"no audio\",\"no video\"]),\n    (\"p3\", [\"Condition 2\",\"Location B\"]),\n    (\"p4\", [\"Condition 1\",\"Location A\",\"withdrew\"]),\n    (\"p5\", [\"Condition 2\",\"Location A\"]),\n    (\"p6\", [\"Condition 2\",\"Location B\",\"withdrew\"]),\n    (\"p7\", [\"Condition 1\",\"Location A\",\"no video\"]),\n    (\"p8\", [\"Condition 1\",\"Location B\"]),\n    (\"p9\", [\"Condition 2\",\"Location B\",\"withdrew\"]),\n    (\"p10\",[\"Condition 1\",\"Location A\",\"withdrew\"])]\n\ncounter = 0\nfor (participant,expInfo) in participants:\n        for info in expInfo:\n            if info == \"withdrew\":\n                counter += 1\n        \nprint(\"The number of participants who withdrew their participation is\", counter)"},{"path":"solutions.html","id":"exercise-7.-data-transformation-using-loops","chapter":"9 Solutions","heading":"9.5.7 Exercise 7. Data transformation using loops","text":"","code":"participants = [\n    (\"p1\", [\"Condition 1\",\"Location A\",\"withdrew\",\"no audio\"]),\n    (\"p2\", [\"Condition 1\",\"Location A\",\"no audio\",\"no video\"]),\n    (\"p3\", [\"Condition 2\",\"Location B\"]),\n    (\"p4\", [\"Condition 1\",\"Location A\",\"withdrew\"]),\n    (\"p5\", [\"Condition 2\",\"Location A\"]),\n    (\"p6\", [\"Condition 2\",\"Location B\",\"withdrew\"]),\n    (\"p7\", [\"Condition 1\",\"Location A\",\"no video\"]),\n    (\"p8\", [\"Condition 1\",\"Location B\"]),\n    (\"p9\", [\"Condition 2\",\"Location B\",\"withdrew\"]),\n    (\"p10\",[\"Condition 1\",\"Location A\",\"withdrew\"])]\n\ndict_participants = {}\nfor participant in participants:\n    dict_participants[participant[0]] = participant[1]\n\ncounterA = 0\ncounterB = 0\nfor key in dict_participants:\n    if dict_participants[key][1] == \"Location A\":\n        counterA += 1\n    else:\n        counterB += 1\n\n## or using nested loops\n\ncounterA1 = 0\ncounterB1 = 0\nfor key in dict_participants:\n    for info in dict_participants[key]:\n        if info == \"Location A\":\n            counterA1 += 1\n        elif info == \"Location B\":\n            counterB1 += 1\n\nprint(\"The number of participants who were tested at location A is\", counterA, counterA1)\nprint(\"The number of participants who were tested at location B is\", counterB, counterB1)"},{"path":"solutions.html","id":"exercise-8.-calculating-a-mean","chapter":"9 Solutions","heading":"9.5.8 Exercise 8. Calculating a mean","text":"","code":"import numpy as np\n\nseq = range(1000)\ncounter = 0\nsum = 0.0\n\nwhile counter <= 999:\n    sum += seq[counter]\n    counter += 1\n\nmean = sum/len(seq)\n\nprint(mean, np.mean(seq))"},{"path":"solutions.html","id":"exercise-9.-a-guessing-game","chapter":"9 Solutions","heading":"9.5.9 Exercise 9. A guessing game","text":"","code":"import random\nimport sys\n\nnumber = random.randint(0,1000)\nguesses = 0\n\nwhile(True):\n    try:\n        user_input = input(\"Please enter a number between 0 and 1000\")\n    except SyntaxError:\n        sys.exit() \n    if user_input == number:\n        print(\"Ding Ding Ding! Correct! The number was\", number)\n        guesses +=1\n        print(guesses, \"guesses needed\")\n        break\n    elif user_input > number:\n        print(\"My number is smaller\")\n        guesses +=1\n    elif user_input < number:\n        print(\"My number is larger\")\n        guesses +=1\n\nsys.exit()"},{"path":"solutions.html","id":"chapter-6.-functions","chapter":"9 Solutions","heading":"9.6 Chapter 6. Functions","text":"","code":""},{"path":"solutions.html","id":"exercise-1.-following-the-control-flow-1","chapter":"9 Solutions","heading":"9.6.1 Exercise 1. Following the control flow","text":"","code":"\"x equals 10\"\n\"y equals 17.5\"\n\"anumber equals 10.0\""},{"path":"solutions.html","id":"exercise-2.-an-imperfect-list-sorting-attempt-1","chapter":"9 Solutions","heading":"9.6.2 Exercise 2. An imperfect list sorting attempt","text":"Line 6/7. insert function return resulting list.Line 20 21. output swap function assigned variable thereby, manipulation performed myList1 stored memory.Line 22. two arguments provided function call insert. function, however, requires three arguments: element inserted, position indicating insert element, list element inserted.Line 25. swap function used incorrectly. First , function takes three arguments, five arguments provided. person tried swap several element pairs function suitable swapping one pair time!Line 25. Second, order arguments provided swap function messed . function first takes one element swapped, element first element swapped list contains two elements.Line 26. insert function defined suitable appending elements end list. can solved one two ways: either, function left instead using insert, built-function append() can used. , makes insertion function robust, check added function, appending element supposed inserted position exceeds index range list.","code":"def insert(a,position,alist):\n    result = copy.deepcopy(alist)\n    if position >= len(result):\n        return result.append(a)\n    else:\n        return result[:position] + [a] + result[position:]"},{"path":"solutions.html","id":"exercise-3.-an-errorneous-sorting-algorithm","chapter":"9 Solutions","heading":"9.6.3 Exercise 3. An errorneous sorting algorithm","text":"","code":"import copy\nimport random\n\ndef swap(a,b,alist):\n    index_a, index_b = alist.index(a), alist.index(b)\n    index_a, index_b = index_b, index_a\n    result = copy.deepcopy(alist)\n    result[index_a], result[index_b] = a,b\n    return result\n\ndef bubbleSort(alist):\n    result = copy.deepcopy(alist)\n    for iteration in range(len(result)-1):\n        for index in range(len(result)-1,0,-1):\n            if result[index] < result[index-1]:\n                result = swap(result[index],result[index-1],result)\n    return result\n\nmyList = range(51)\nrandom.shuffle(myList)\nprint(myList)\nprint(bubbleSort(myList))"},{"path":"solutions.html","id":"exercise-4.","chapter":"9 Solutions","heading":"9.6.4 Exercise 4.","text":"","code":""},{"path":"solutions.html","id":"exercise-5.","chapter":"9 Solutions","heading":"9.6.5 Exercise 5.","text":"","code":""},{"path":"solutions.html","id":"exercise-6.-insertion-sort-algorithm-1","chapter":"9 Solutions","heading":"9.6.6 Exercise 6. Insertion sort algorithm","text":"","code":"import copy\nimport random\n\ndef insertionSort(alist):\n    result = copy.deepcopy(alist)\n    for index in range(1,len(result)):\n        \n        # Temporarily assign the element that is to be compared to the\n        # (sorted) sublist at the left of the element's position\n        value = result[index]\n        # Remember the position in the list of the element under investigation\n        position = index \n        \n        # Stepwise, compare each element left to the designated element (b) and the\n        # designated element (value). Whenever b is larger than value, update position\n        # by shifting the position of b to the current value of position, thus in fact,\n        # one place to the right. Continue until position equals 0 and there are no more elements b\n        # left to compare value to.\n        while position > 0 and result[position-1] > value:\n            result[position] = result[position-1]\n            position -= 1\n        \n        # Insert the value that has been compared to at the right position in the list\n        result[position] = value\n    return result\n\nmyList = range(51)\nrandom.shuffle(myList)\n\nprint(insertionSort(myList))"},{"path":"debugging-and-good-programming-practices.html","id":"debugging-and-good-programming-practices","chapter":"10 Debugging and good programming practices","heading":"10 Debugging and good programming practices","text":"","code":""},{"path":"debugging-and-good-programming-practices.html","id":"debugging-4","chapter":"10 Debugging and good programming practices","heading":"10.1 Debugging","text":"Debugging one intellectually challenging aspects programming. often also perceived frustrating aspect. large extent, problems people face debugging much technical psychological. Debugging starts realization computer nothing wrong. fact, exactly tell . fault lies thus programmer conceived implemented solution. always remember even though debugging can difficult frustrating endeavour, can done. times, require creativity skill disposal, succeed act systematically give task.recipe-like cookbook approach debugging, adhering general principles probably help.###print statement aspiring programmer’s best friend\ndebugging take role detective. , focus errorneous program , rather wanted . work facts. Variables flow program key finding crucial pieces information lead clue going wrong.print statement commonly used tool debugging. Even clue going wrong, often hunch culprit might . idea start, simply start beginning program. also helps realize bug moving around code, trying trick evade (even though might feel times). sitting place, wrong thing way every time. start hunch take closer look variables whether program supposed place. , print statements come handy. can use print statements make current values assigned variables visible. following control flow program mind (calculating expected values variables go program), verify whether variables assigned expected values. yes, continue search error downward flow program. , look upward bug. Also take close look values . belong expected data type? values way remarkable (high, low, etc.)? give indication going wrong.###Frequent unit-testing\nRome built day true computer programs. Programming, task, can split subtasks. subtasks can chunks code like functions generalize operations frequently need program, division graphical state transition dynamics program. Individual components frequently extensively tested bugs merging rest code. One simple bug small component program can become untracable main code cause weirdest errors. generally good idea pull code main program put functions keep main flow program readable prevent writing lines code . Just make sure frequently test units code putting main flow program course, main flow program still working nicely. Inserting print statements calling function check whether involved variables mutated intended way one way make sure different chunks program interact nicely.###copy-paste syndrome\nCopying code generally bad idea. Extensive copying code takes one two forms. programmers -copy code, others copy people’s code. Little frustrating realizing debugging bug multiple times. Whenever copy undebugged chunks code, also copy bugs within . forget chunks code copied voilà; chances high encounter bug different places. Putting chunks code program repeatedly uses functions good way counteract -copying one’s code. point re-inventing wheel, nothing wrong trying another person’s debugging approach one’s code. However, -copying people’s code bound cause errors long run, also leave great deal unanswered questions another’s solution fixes bug attempts . worst case, longer understand code! Copying code works understanding code. Instead, try program something similar, adjust small parts see happens. way, work towards understanding (another’s) code.###Standing shoulders giants\nsaid, chances high , whatever try accomplish programming, somebody else already tried (may run errors bugs). Looking internet solution can prove useful point debugging efforts right direction. Truth told, rarely find perfect solution individual problem context personal, specific code. Still, can figure internet whether dealing known bug read specific information Python documentation. , search keywords relevant problem, operator precedence float division. Just aware always need transfer whatever read individual situation can difficult task programming beginner. Taking role detective figuring going wrong usually way go. Reading internet merely tool.","code":""},{"path":"debugging-and-good-programming-practices.html","id":"boosting-your-programming-learning-curve","chapter":"10 Debugging and good programming practices","heading":"10.2 Boosting your programming learning curve","text":"start programming, easy become intimidated amount information find programming books multitude error messages encounter. Initially, may also difficulty adjusting programmer thinks. Really, extent programming another way approach problem hand. Programming means seeing problem another perspective. cheer , even experienced programmers make mistakes, beginner’s mistakes included. encounter error messages . dare say , total, spend much time debugging code beginner. reality programming. programming skills improve become acquainted thinking mind programmer, enabled tackle advanced problems solve easier problems efficient ways. Luckily, good practices speed development programming skills. truth, without good practices, journey aspiring programmer much harder. Therefore, best internalize following practices beginning.","code":""},{"path":"debugging-and-good-programming-practices.html","id":"going-with-the-flow","chapter":"10 Debugging and good programming practices","heading":"10.2.1 Going with the flow","text":"Whenever read code, try mentally follow flow program step step.code snippet , variable x assigned value 1 line one. thus think “variable x assigned value 1” reading first line code. Chapter 3 Variables, values types explains detail variables assigned value. now, focus approach code snippet. Back code snippet, read line two. line two, x assigned another value, namely 2. learn Chapter 2 variables can assigned one value time assigning new value variable erases earlier value assignment. Variable x thus new value program executes line two, namely 2. last line program, value variable x printed console. executed, 2 thus appears console.neither 1 3 appear console output? console output 1 print statement comes second value assignment. x assigned value 2 already. output neither 3 value assignment initial assignment simply overwrites variable’s earlier value.Following flow program help understand algorithm front . can decipher even complex algorithms just following flow code.\nComprehending flow computer program crucial step understanding program achieves purpose. best thing , approaching\ncode following flow develops programming skills much like reading book foreign language improves language skills.\nreading book vocabulary expands. learn new words, word used sentence context word used. Often, encounter unfamiliar word, understand meaning based context alone. Reading code following flow programming skills reading book foreign langauge capability understand produce language. first, encounter numerous unfamiliar constructs, following flow program help understand . Printing console useful tool making flow program visible. hesitate insert print statements code front . print statements can show value variable time whether program reaches certain part program terminated (possibly prematurely due error).","code":"x = 1\nx = 2\nprint(x)## 2"},{"path":"debugging-and-good-programming-practices.html","id":"just-do-it","chapter":"10 Debugging and good programming practices","heading":"10.2.2 Just do it!","text":"read something new, book, internet class, try see happens! essential learning attitude learning program. Definitely, learn program just reading books. “learning ” skill. Chapter 2 [Variables, values data types] introduces float division. Float division peculiarity Python 2 versions. integer division result another integer, result truncated instead represented floating point. first reaction reading float division open Python interpreter try happens divide two integers share common multiple.executed code snippet Python interpreter, become apparent meant truncated? psychologist know writing (hand) facilitates structuring thoughts subsequently, memorizing. Trying code snippets different respect.","code":"x = 7\ny = 3\nprint(x / y)## 2.3333333333333335"}]
